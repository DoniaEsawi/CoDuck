Terminals unused in grammar

    UNTIL
    LEFT_SQ_BRACKET
    RIGHT_SQ_BRACKET
    QUESTION_MARK
    DOT
    BIT_NOT_OP


State 0 conflicts: 1 shift/reduce
State 10 conflicts: 2 shift/reduce
State 13 conflicts: 1 shift/reduce, 2 reduce/reduce
State 22 conflicts: 16 shift/reduce, 7 reduce/reduce
State 25 conflicts: 1 reduce/reduce
State 28 conflicts: 1 reduce/reduce
State 44 conflicts: 7 shift/reduce
State 51 conflicts: 2 shift/reduce
State 74 conflicts: 4 reduce/reduce
State 91 conflicts: 18 shift/reduce, 7 reduce/reduce
State 137 conflicts: 1 reduce/reduce
State 157 conflicts: 2 shift/reduce
State 158 conflicts: 2 shift/reduce
State 159 conflicts: 2 shift/reduce
State 171 conflicts: 16 shift/reduce, 7 reduce/reduce
State 182 conflicts: 16 shift/reduce, 7 reduce/reduce
State 183 conflicts: 1 shift/reduce
State 184 conflicts: 16 shift/reduce, 7 reduce/reduce
State 195 conflicts: 2 shift/reduce
State 205 conflicts: 16 shift/reduce, 7 reduce/reduce
State 219 conflicts: 16 shift/reduce, 7 reduce/reduce
State 220 conflicts: 16 shift/reduce, 7 reduce/reduce
State 221 conflicts: 16 shift/reduce, 7 reduce/reduce
State 227 conflicts: 16 shift/reduce, 7 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: program function
    2        | functions
    3        | IDENT
    4        | declaration

    5 type: INTEGER
    6     | FLOAT
    7     | DOUBLE
    8     | VOID
    9     | BOOLEAN
   10     | CHAR

   11 declaration: type IDENT SEMICOLON
   12            | type IDENT ASSIGN_OP expression SEMICOLON
   13            | CONST type IDENT SEMICOLON
   14            | CONST type IDENT ASSIGN_OP expression SEMICOLON

   15 $@1: %empty

   16 declarations: $@1 declaration
   17             | declarations declaration

   18 tail: statements
   19     | LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET

   20 tail_inloop: statements_inloop
   21            | LEFT_CURLY_BRACKET statements_inloop RIGHT_CURLY_BRACKET

   22 bool_expression: relExp
   23                | TRUE_TOKEN
   24                | FALSE_TOKEN

   25 assign: IDENT ASSIGN_OP expression

   26 expression: assign
   27           | IDENT INC_OP
   28           | IDENT DEC_OP
   29           | simpleExp
   30           | IDENT

   31 simpleExp: simpleExp OR_OP andExp
   32          | andExp

   33 andExp: andExp AND_OP
   34       | bitRelExp

   35 bitRelExp: bitRelExp BIT_OR_OP relExp
   36          | bitRelExp AND relExp
   37          | bitRelExp BIT_XOR_OP relExp
   38          | relExp

   39 op: EQ_OP
   40   | NE_OP
   41   | GT_OP
   42   | LT_OP
   43   | LE_OP
   44   | GE_OP
   45   | OR_OP
   46   | AND_OP

   47 relExp: relExp op bitshiftExp
   48       | bitshiftExp

   49 bitshiftExp: bitshiftExp BIT_LSHIFT_OP sumExp
   50            | bitshiftExp BIT_RSHIFT_OP sumExp
   51            | sumExp

   52 pls_min: ADD_OP
   53        | SUB_OP

   54 mul_div: MUL_OP
   55        | DIV_OP
   56        | MOD_OP

   57 sumExp: sumExp pls_min mulExp
   58       | mulExp

   59 mulExp: mulExp mul_div unaryExp
   60       | unaryExp

   61 unaryExp: INC_OP IDENT
   62         | DEC_OP IDENT
   63         | NOT_OP IDENT
   64         | IDENT
   65         | value
   66         | LEFT_PAREN expression RIGHT_PAREN

   67 value: CONST_INT
   68      | CONST_FLOAT
   69      | CONST_CHAR
   70      | STRING_LITERAL

   71 else_if: ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   72        | else_if ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   73        | %empty

   74 else_part: ELSE tail
   75          | %empty

   76 if_statement: IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part

   77 while_statement: WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop

   78 for_statement: FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

   79 do_statement: DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON

   80 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

   81 cases: case
   82      | cases case
   83      | cases default

   84 default: DEFAULT COLON statements BREAK SEMICOLON

   85 case: CASE expression COLON statements BREAK SEMICOLON

   86 return_val: expression
   87           | %empty

   88 return_statement: RETURN return_val SEMICOLON

   89 break_statement: BREAK SEMICOLON

   90 continue_statement: CONTINUE SEMICOLON

   91 expression_statement: expression SEMICOLON

   92 statements: %empty
   93           | statement
   94           | statements statement

   95 statement: if_statement
   96          | while_statement
   97          | for_statement
   98          | do_statement
   99          | switch_statement
  100          | return_statement
  101          | expression_statement
  102          | declarations
  103          | enum_statement
  104          | func_call

  105 statement_inloop: statement
  106                 | break_statement
  107                 | continue_statement

  108 statements_inloop: statement_inloop
  109                  | statements_inloop statement_inloop

  110 functions: functions function
  111          | function

  112 function: function_head function_tail
  113         | %empty

  114 param_empty: parameters
  115            | %empty

  116 function_head: FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN type

  117 function_tail: LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET

  118 parameters: parameter
  119           | parameters COMMA parameter
  120           | %empty

  121 parameter: type IDENT

  122 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET

  123 enum_list: one_val
  124          | enum_list COMMA one_val

  125 one_val: IDENT
  126        | IDENT ASSIGN_OP value

  127 func_call: IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

  129 arguments: argument
  130          | arguments COMMA argument
  131          | %empty

  132 argument: expression


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INTEGER <int_val> (258) 5
    FLOAT <int_val> (259) 6
    DOUBLE <int_val> (260) 7
    VOID <int_val> (261) 8
    BOOLEAN <int_val> (262) 9
    CHAR <int_val> (263) 10
    CONST <int_val> (264) 13 14
    IDENT <symbol_table_item> (265) 3 11 12 13 14 25 27 28 30 61 62 63 64 116 121 122 125 126 127 128
    CONST_INT <int_val> (266) 67
    CONST_FLOAT <double_val> (267) 68
    CONST_CHAR <char_val> (268) 69
    STRING_LITERAL <str_val> (269) 70
    IF <int_val> (270) 76
    ELSE <int_val> (271) 74
    ELIF <int_val> (272) 71 72
    WHILE <int_val> (273) 77 79
    FOR <int_val> (274) 78
    DO <int_val> (275) 79
    SWITCH <int_val> (276) 80
    CASE <int_val> (277) 85
    DEFAULT <int_val> (278) 84
    RETURN <int_val> (279) 88
    BREAK <int_val> (280) 84 85 89
    CONTINUE <int_val> (281) 90
    TRUE_TOKEN <int_val> (282) 23
    FALSE_TOKEN <int_val> (283) 24
    ENUM <int_val> (284) 122
    FUNC <int_val> (285) 116
    UNTIL <int_val> (286)
    LEFT_PAREN <int_val> (287) 66 71 72 76 77 78 79 80 116 127 128
    RIGHT_PAREN <int_val> (288) 66 71 72 76 77 78 79 80 116 127 128
    LEFT_CURLY_BRACKET <int_val> (289) 19 21 80 117 122
    RIGHT_CURLY_BRACKET <int_val> (290) 19 21 80 117 122
    LEFT_SQ_BRACKET <int_val> (291)
    RIGHT_SQ_BRACKET <int_val> (292)
    SEMICOLON <int_val> (293) 11 12 13 14 78 79 84 85 88 89 90 91
    COMMA <int_val> (294) 119 124 130
    COLON <int_val> (295) 84 85
    QUESTION_MARK <int_val> (296)
    DOT <int_val> (297)
    ADD_OP <int_val> (298) 52
    SUB_OP <int_val> (299) 53
    MUL_OP <int_val> (300) 54
    DIV_OP <int_val> (301) 55
    MOD_OP <int_val> (302) 56
    INC_OP <int_val> (303) 27 61
    DEC_OP <int_val> (304) 28 62
    OR_OP <int_val> (305) 31 45
    AND_OP <int_val> (306) 33 46
    NOT_OP <int_val> (307) 63
    BIT_OR_OP <int_val> (308) 35
    AND <int_val> (309) 36
    BIT_XOR_OP <int_val> (310) 37
    BIT_NOT_OP <int_val> (311)
    BIT_LSHIFT_OP <int_val> (312) 49
    BIT_RSHIFT_OP <int_val> (313) 50
    EQ_OP <int_val> (314) 39
    NE_OP <int_val> (315) 40
    GT_OP <int_val> (316) 41
    LT_OP <int_val> (317) 42
    GE_OP <int_val> (318) 44
    LE_OP <int_val> (319) 43
    ASSIGN_OP <int_val> (320) 12 14 25 126 128


Nonterminals, with rules where they appear

    $accept (66)
        on left: 0
    program (67)
        on left: 1 2 3 4
        on right: 0 1
    type (68)
        on left: 5 6 7 8 9 10
        on right: 11 12 13 14 116 121
    declaration (69)
        on left: 11 12 13 14
        on right: 4 16 17
    declarations (70)
        on left: 16 17
        on right: 17 102
    $@1 (71)
        on left: 15
        on right: 16
    tail (72)
        on left: 18 19
        on right: 71 72 74 76
    tail_inloop (73)
        on left: 20 21
        on right: 77 78 79
    bool_expression (74)
        on left: 22 23 24
        on right: 71 72 76 77 78 79
    assign (75)
        on left: 25
        on right: 26 78
    expression (76)
        on left: 26 27 28 29 30
        on right: 12 14 25 66 78 80 85 86 91 132
    simpleExp (77)
        on left: 31 32
        on right: 29 31
    andExp (78)
        on left: 33 34
        on right: 31 32 33
    bitRelExp (79)
        on left: 35 36 37 38
        on right: 34 35 36 37
    op (80)
        on left: 39 40 41 42 43 44 45 46
        on right: 47
    relExp (81)
        on left: 47 48
        on right: 22 35 36 37 38 47
    bitshiftExp (82)
        on left: 49 50 51
        on right: 47 48 49 50
    pls_min (83)
        on left: 52 53
        on right: 57
    mul_div (84)
        on left: 54 55 56
        on right: 59
    sumExp (85)
        on left: 57 58
        on right: 49 50 51 57
    mulExp (86)
        on left: 59 60
        on right: 57 58 59
    unaryExp (87)
        on left: 61 62 63 64 65 66
        on right: 59 60
    value (88)
        on left: 67 68 69 70
        on right: 65 126
    else_if (89)
        on left: 71 72 73
        on right: 72 76
    else_part (90)
        on left: 74 75
        on right: 76
    if_statement (91)
        on left: 76
        on right: 95
    while_statement (92)
        on left: 77
        on right: 96
    for_statement (93)
        on left: 78
        on right: 97
    do_statement (94)
        on left: 79
        on right: 98
    switch_statement (95)
        on left: 80
        on right: 99
    cases (96)
        on left: 81 82 83
        on right: 80 82 83
    default (97)
        on left: 84
        on right: 83
    case (98)
        on left: 85
        on right: 81 82
    return_val (99)
        on left: 86 87
        on right: 88
    return_statement (100)
        on left: 88
        on right: 100
    break_statement (101)
        on left: 89
        on right: 106
    continue_statement (102)
        on left: 90
        on right: 107
    expression_statement (103)
        on left: 91
        on right: 101
    statements (104)
        on left: 92 93 94
        on right: 18 19 84 85 94 117
    statement (105)
        on left: 95 96 97 98 99 100 101 102 103 104
        on right: 93 94 105
    statement_inloop (106)
        on left: 105 106 107
        on right: 108 109
    statements_inloop (107)
        on left: 108 109
        on right: 20 21 109
    functions (108)
        on left: 110 111
        on right: 2 110
    function (109)
        on left: 112 113
        on right: 1 110 111
    param_empty (110)
        on left: 114 115
        on right: 116
    function_head (111)
        on left: 116
        on right: 112
    function_tail (112)
        on left: 117
        on right: 112
    parameters (113)
        on left: 118 119 120
        on right: 114 119
    parameter (114)
        on left: 121
        on right: 118 119
    enum_statement (115)
        on left: 122
        on right: 103
    enum_list (116)
        on left: 123 124
        on right: 122 124
    one_val (117)
        on left: 125 126
        on right: 123 124
    func_call (118)
        on left: 127 128
        on right: 104
    arguments (119)
        on left: 129 130 131
        on right: 127 128 130
    argument (120)
        on left: 132
        on right: 129 130


State 0

    0 $accept: . program $end
    1 program: . program function
    2        | . functions
    3        | . IDENT
    4        | . declaration
    5 type: . INTEGER
    6     | . FLOAT
    7     | . DOUBLE
    8     | . VOID
    9     | . BOOLEAN
   10     | . CHAR
   11 declaration: . type IDENT SEMICOLON
   12            | . type IDENT ASSIGN_OP expression SEMICOLON
   13            | . CONST type IDENT SEMICOLON
   14            | . CONST type IDENT ASSIGN_OP expression SEMICOLON
  110 functions: . functions function
  111          | . function
  112 function: . function_head function_tail
  113         | . %empty  [$end, FUNC]
  116 function_head: . FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN type

    INTEGER  shift, and go to state 1
    FLOAT    shift, and go to state 2
    DOUBLE   shift, and go to state 3
    VOID     shift, and go to state 4
    BOOLEAN  shift, and go to state 5
    CHAR     shift, and go to state 6
    CONST    shift, and go to state 7
    IDENT    shift, and go to state 8
    FUNC     shift, and go to state 9

    FUNC      [reduce using rule 113 (function)]
    $default  reduce using rule 113 (function)

    program        go to state 10
    type           go to state 11
    declaration    go to state 12
    functions      go to state 13
    function       go to state 14
    function_head  go to state 15


State 1

    5 type: INTEGER .

    $default  reduce using rule 5 (type)


State 2

    6 type: FLOAT .

    $default  reduce using rule 6 (type)


State 3

    7 type: DOUBLE .

    $default  reduce using rule 7 (type)


State 4

    8 type: VOID .

    $default  reduce using rule 8 (type)


State 5

    9 type: BOOLEAN .

    $default  reduce using rule 9 (type)


State 6

   10 type: CHAR .

    $default  reduce using rule 10 (type)


State 7

    5 type: . INTEGER
    6     | . FLOAT
    7     | . DOUBLE
    8     | . VOID
    9     | . BOOLEAN
   10     | . CHAR
   13 declaration: CONST . type IDENT SEMICOLON
   14            | CONST . type IDENT ASSIGN_OP expression SEMICOLON

    INTEGER  shift, and go to state 1
    FLOAT    shift, and go to state 2
    DOUBLE   shift, and go to state 3
    VOID     shift, and go to state 4
    BOOLEAN  shift, and go to state 5
    CHAR     shift, and go to state 6

    type  go to state 16


State 8

    3 program: IDENT .

    $default  reduce using rule 3 (program)


State 9

  116 function_head: FUNC . IDENT LEFT_PAREN param_empty RIGHT_PAREN type

    IDENT  shift, and go to state 17


State 10

    0 $accept: program . $end
    1 program: program . function
  112 function: . function_head function_tail
  113         | . %empty  [$end, FUNC]
  116 function_head: . FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN type

    $end  shift, and go to state 18
    FUNC  shift, and go to state 9

    $end  [reduce using rule 113 (function)]
    FUNC  [reduce using rule 113 (function)]

    function       go to state 19
    function_head  go to state 15


State 11

   11 declaration: type . IDENT SEMICOLON
   12            | type . IDENT ASSIGN_OP expression SEMICOLON

    IDENT  shift, and go to state 20


State 12

    4 program: declaration .

    $default  reduce using rule 4 (program)


State 13

    2 program: functions .  [$end, FUNC]
  110 functions: functions . function
  112 function: . function_head function_tail
  113         | . %empty  [$end, FUNC]
  116 function_head: . FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN type

    FUNC  shift, and go to state 9

    $end      reduce using rule 2 (program)
    $end      [reduce using rule 113 (function)]
    FUNC      [reduce using rule 2 (program)]
    FUNC      [reduce using rule 113 (function)]
    $default  reduce using rule 2 (program)

    function       go to state 21
    function_head  go to state 15


State 14

  111 functions: function .

    $default  reduce using rule 111 (functions)


State 15

  112 function: function_head . function_tail
  117 function_tail: . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 22

    function_tail  go to state 23


State 16

   13 declaration: CONST type . IDENT SEMICOLON
   14            | CONST type . IDENT ASSIGN_OP expression SEMICOLON

    IDENT  shift, and go to state 24


State 17

  116 function_head: FUNC IDENT . LEFT_PAREN param_empty RIGHT_PAREN type

    LEFT_PAREN  shift, and go to state 25


State 18

    0 $accept: program $end .

    $default  accept


State 19

    1 program: program function .

    $default  reduce using rule 1 (program)


State 20

   11 declaration: type IDENT . SEMICOLON
   12            | type IDENT . ASSIGN_OP expression SEMICOLON

    SEMICOLON  shift, and go to state 26
    ASSIGN_OP  shift, and go to state 27


State 21

  110 functions: functions function .

    $default  reduce using rule 110 (functions)


State 22

   15 $@1: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@1 declaration
   17             | . declarations declaration
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31 simpleExp: . simpleExp OR_OP andExp
   32          | . andExp
   33 andExp: . andExp AND_OP
   34       | . bitRelExp
   35 bitRelExp: . bitRelExp BIT_OR_OP relExp
   36          | . bitRelExp AND relExp
   37          | . bitRelExp BIT_XOR_OP relExp
   38          | . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
   76 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   77 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   78 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   79 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   80 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   88 return_statement: . RETURN return_val SEMICOLON
   91 expression_statement: . expression SEMICOLON
   92 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   93           | . statement
   94           | . statements statement
   95 statement: . if_statement
   96          | . while_statement
   97          | . for_statement
   98          | . do_statement
   99          | . switch_statement
  100          | . return_statement
  101          | . expression_statement
  102          | . declarations
  103          | . enum_statement
  104          | . func_call
  117 function_tail: LEFT_CURLY_BRACKET . statements RIGHT_CURLY_BRACKET
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 28
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    IF              shift, and go to state 33
    WHILE           shift, and go to state 34
    FOR             shift, and go to state 35
    DO              shift, and go to state 36
    SWITCH          shift, and go to state 37
    RETURN          shift, and go to state 38
    ENUM            shift, and go to state 39
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    INTEGER              reduce using rule 15 ($@1)
    INTEGER              [reduce using rule 92 (statements)]
    FLOAT                reduce using rule 15 ($@1)
    FLOAT                [reduce using rule 92 (statements)]
    DOUBLE               reduce using rule 15 ($@1)
    DOUBLE               [reduce using rule 92 (statements)]
    VOID                 reduce using rule 15 ($@1)
    VOID                 [reduce using rule 92 (statements)]
    BOOLEAN              reduce using rule 15 ($@1)
    BOOLEAN              [reduce using rule 92 (statements)]
    CHAR                 reduce using rule 15 ($@1)
    CHAR                 [reduce using rule 92 (statements)]
    CONST                reduce using rule 15 ($@1)
    CONST                [reduce using rule 92 (statements)]
    IDENT                [reduce using rule 92 (statements)]
    CONST_INT            [reduce using rule 92 (statements)]
    CONST_FLOAT          [reduce using rule 92 (statements)]
    CONST_CHAR           [reduce using rule 92 (statements)]
    STRING_LITERAL       [reduce using rule 92 (statements)]
    IF                   [reduce using rule 92 (statements)]
    WHILE                [reduce using rule 92 (statements)]
    FOR                  [reduce using rule 92 (statements)]
    DO                   [reduce using rule 92 (statements)]
    SWITCH               [reduce using rule 92 (statements)]
    RETURN               [reduce using rule 92 (statements)]
    ENUM                 [reduce using rule 92 (statements)]
    LEFT_PAREN           [reduce using rule 92 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 92 (statements)
    INC_OP               [reduce using rule 92 (statements)]
    DEC_OP               [reduce using rule 92 (statements)]
    NOT_OP               [reduce using rule 92 (statements)]
    $default             reduce using rule 15 ($@1)

    declarations          go to state 44
    $@1                   go to state 45
    assign                go to state 46
    expression            go to state 47
    simpleExp             go to state 48
    andExp                go to state 49
    bitRelExp             go to state 50
    relExp                go to state 51
    bitshiftExp           go to state 52
    sumExp                go to state 53
    mulExp                go to state 54
    unaryExp              go to state 55
    value                 go to state 56
    if_statement          go to state 57
    while_statement       go to state 58
    for_statement         go to state 59
    do_statement          go to state 60
    switch_statement      go to state 61
    return_statement      go to state 62
    expression_statement  go to state 63
    statements            go to state 64
    statement             go to state 65
    enum_statement        go to state 66
    func_call             go to state 67


State 23

  112 function: function_head function_tail .

    $default  reduce using rule 112 (function)


State 24

   13 declaration: CONST type IDENT . SEMICOLON
   14            | CONST type IDENT . ASSIGN_OP expression SEMICOLON

    SEMICOLON  shift, and go to state 68
    ASSIGN_OP  shift, and go to state 69


State 25

    5 type: . INTEGER
    6     | . FLOAT
    7     | . DOUBLE
    8     | . VOID
    9     | . BOOLEAN
   10     | . CHAR
  114 param_empty: . parameters
  115            | . %empty  [RIGHT_PAREN]
  116 function_head: FUNC IDENT LEFT_PAREN . param_empty RIGHT_PAREN type
  118 parameters: . parameter
  119           | . parameters COMMA parameter
  120           | . %empty  [RIGHT_PAREN, COMMA]
  121 parameter: . type IDENT

    INTEGER  shift, and go to state 1
    FLOAT    shift, and go to state 2
    DOUBLE   shift, and go to state 3
    VOID     shift, and go to state 4
    BOOLEAN  shift, and go to state 5
    CHAR     shift, and go to state 6

    RIGHT_PAREN  reduce using rule 115 (param_empty)
    RIGHT_PAREN  [reduce using rule 120 (parameters)]
    COMMA        reduce using rule 120 (parameters)
    $default     reduce using rule 115 (param_empty)

    type         go to state 70
    param_empty  go to state 71
    parameters   go to state 72
    parameter    go to state 73


State 26

   11 declaration: type IDENT SEMICOLON .

    $default  reduce using rule 11 (declaration)


State 27

   12 declaration: type IDENT ASSIGN_OP . expression SEMICOLON
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31 simpleExp: . simpleExp OR_OP andExp
   32          | . andExp
   33 andExp: . andExp AND_OP
   34       | . bitRelExp
   35 bitRelExp: . bitRelExp BIT_OR_OP relExp
   36          | . bitRelExp AND relExp
   37          | . bitRelExp BIT_XOR_OP relExp
   38          | . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL

    IDENT           shift, and go to state 74
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    assign       go to state 46
    expression   go to state 75
    simpleExp    go to state 48
    andExp       go to state 49
    bitRelExp    go to state 50
    relExp       go to state 51
    bitshiftExp  go to state 52
    sumExp       go to state 53
    mulExp       go to state 54
    unaryExp     go to state 55
    value        go to state 56


State 28

   25 assign: IDENT . ASSIGN_OP expression
   27 expression: IDENT . INC_OP
   28           | IDENT . DEC_OP
   30           | IDENT .  [SEMICOLON]
   64 unaryExp: IDENT .  [SEMICOLON, ADD_OP, SUB_OP, MUL_OP, DIV_OP, MOD_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
  127 func_call: IDENT . LEFT_PAREN arguments RIGHT_PAREN
  128          | IDENT . ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    LEFT_PAREN  shift, and go to state 76
    INC_OP      shift, and go to state 77
    DEC_OP      shift, and go to state 78
    ASSIGN_OP   shift, and go to state 79

    SEMICOLON  reduce using rule 30 (expression)
    SEMICOLON  [reduce using rule 64 (unaryExp)]
    $default   reduce using rule 64 (unaryExp)


State 29

   67 value: CONST_INT .

    $default  reduce using rule 67 (value)


State 30

   68 value: CONST_FLOAT .

    $default  reduce using rule 68 (value)


State 31

   69 value: CONST_CHAR .

    $default  reduce using rule 69 (value)


State 32

   70 value: STRING_LITERAL .

    $default  reduce using rule 70 (value)


State 33

   76 if_statement: IF . LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part

    LEFT_PAREN  shift, and go to state 80


State 34

   77 while_statement: WHILE . LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop

    LEFT_PAREN  shift, and go to state 81


State 35

   78 for_statement: FOR . LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

    LEFT_PAREN  shift, and go to state 82


State 36

   15 $@1: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@1 declaration
   17             | . declarations declaration
   20 tail_inloop: . statements_inloop
   21            | . LEFT_CURLY_BRACKET statements_inloop RIGHT_CURLY_BRACKET
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31 simpleExp: . simpleExp OR_OP andExp
   32          | . andExp
   33 andExp: . andExp AND_OP
   34       | . bitRelExp
   35 bitRelExp: . bitRelExp BIT_OR_OP relExp
   36          | . bitRelExp AND relExp
   37          | . bitRelExp BIT_XOR_OP relExp
   38          | . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
   76 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   77 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   78 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   79 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   79             | DO . tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   80 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   88 return_statement: . RETURN return_val SEMICOLON
   89 break_statement: . BREAK SEMICOLON
   90 continue_statement: . CONTINUE SEMICOLON
   91 expression_statement: . expression SEMICOLON
   95 statement: . if_statement
   96          | . while_statement
   97          | . for_statement
   98          | . do_statement
   99          | . switch_statement
  100          | . return_statement
  101          | . expression_statement
  102          | . declarations
  103          | . enum_statement
  104          | . func_call
  105 statement_inloop: . statement
  106                 | . break_statement
  107                 | . continue_statement
  108 statements_inloop: . statement_inloop
  109                  | . statements_inloop statement_inloop
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT               shift, and go to state 28
    CONST_INT           shift, and go to state 29
    CONST_FLOAT         shift, and go to state 30
    CONST_CHAR          shift, and go to state 31
    STRING_LITERAL      shift, and go to state 32
    IF                  shift, and go to state 33
    WHILE               shift, and go to state 34
    FOR                 shift, and go to state 35
    DO                  shift, and go to state 36
    SWITCH              shift, and go to state 37
    RETURN              shift, and go to state 38
    BREAK               shift, and go to state 83
    CONTINUE            shift, and go to state 84
    ENUM                shift, and go to state 39
    LEFT_PAREN          shift, and go to state 40
    LEFT_CURLY_BRACKET  shift, and go to state 85
    INC_OP              shift, and go to state 41
    DEC_OP              shift, and go to state 42
    NOT_OP              shift, and go to state 43

    $default  reduce using rule 15 ($@1)

    declarations          go to state 44
    $@1                   go to state 45
    tail_inloop           go to state 86
    assign                go to state 46
    expression            go to state 47
    simpleExp             go to state 48
    andExp                go to state 49
    bitRelExp             go to state 50
    relExp                go to state 51
    bitshiftExp           go to state 52
    sumExp                go to state 53
    mulExp                go to state 54
    unaryExp              go to state 55
    value                 go to state 56
    if_statement          go to state 57
    while_statement       go to state 58
    for_statement         go to state 59
    do_statement          go to state 60
    switch_statement      go to state 61
    return_statement      go to state 62
    break_statement       go to state 87
    continue_statement    go to state 88
    expression_statement  go to state 63
    statement             go to state 89
    statement_inloop      go to state 90
    statements_inloop     go to state 91
    enum_statement        go to state 66
    func_call             go to state 67


State 37

   80 switch_statement: SWITCH . LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    LEFT_PAREN  shift, and go to state 92


State 38

   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31 simpleExp: . simpleExp OR_OP andExp
   32          | . andExp
   33 andExp: . andExp AND_OP
   34       | . bitRelExp
   35 bitRelExp: . bitRelExp BIT_OR_OP relExp
   36          | . bitRelExp AND relExp
   37          | . bitRelExp BIT_XOR_OP relExp
   38          | . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
   86 return_val: . expression
   87           | . %empty  [SEMICOLON]
   88 return_statement: RETURN . return_val SEMICOLON

    IDENT           shift, and go to state 74
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    $default  reduce using rule 87 (return_val)

    assign       go to state 46
    expression   go to state 93
    simpleExp    go to state 48
    andExp       go to state 49
    bitRelExp    go to state 50
    relExp       go to state 51
    bitshiftExp  go to state 52
    sumExp       go to state 53
    mulExp       go to state 54
    unaryExp     go to state 55
    value        go to state 56
    return_val   go to state 94


State 39

  122 enum_statement: ENUM . IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET

    IDENT  shift, and go to state 95


State 40

   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31 simpleExp: . simpleExp OR_OP andExp
   32          | . andExp
   33 andExp: . andExp AND_OP
   34       | . bitRelExp
   35 bitRelExp: . bitRelExp BIT_OR_OP relExp
   36          | . bitRelExp AND relExp
   37          | . bitRelExp BIT_XOR_OP relExp
   38          | . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   66         | LEFT_PAREN . expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL

    IDENT           shift, and go to state 74
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    assign       go to state 46
    expression   go to state 96
    simpleExp    go to state 48
    andExp       go to state 49
    bitRelExp    go to state 50
    relExp       go to state 51
    bitshiftExp  go to state 52
    sumExp       go to state 53
    mulExp       go to state 54
    unaryExp     go to state 55
    value        go to state 56


State 41

   61 unaryExp: INC_OP . IDENT

    IDENT  shift, and go to state 97


State 42

   62 unaryExp: DEC_OP . IDENT

    IDENT  shift, and go to state 98


State 43

   63 unaryExp: NOT_OP . IDENT

    IDENT  shift, and go to state 99


State 44

    5 type: . INTEGER
    6     | . FLOAT
    7     | . DOUBLE
    8     | . VOID
    9     | . BOOLEAN
   10     | . CHAR
   11 declaration: . type IDENT SEMICOLON
   12            | . type IDENT ASSIGN_OP expression SEMICOLON
   13            | . CONST type IDENT SEMICOLON
   14            | . CONST type IDENT ASSIGN_OP expression SEMICOLON
   17 declarations: declarations . declaration
  102 statement: declarations .  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]

    INTEGER  shift, and go to state 1
    FLOAT    shift, and go to state 2
    DOUBLE   shift, and go to state 3
    VOID     shift, and go to state 4
    BOOLEAN  shift, and go to state 5
    CHAR     shift, and go to state 6
    CONST    shift, and go to state 7

    INTEGER   [reduce using rule 102 (statement)]
    FLOAT     [reduce using rule 102 (statement)]
    DOUBLE    [reduce using rule 102 (statement)]
    VOID      [reduce using rule 102 (statement)]
    BOOLEAN   [reduce using rule 102 (statement)]
    CHAR      [reduce using rule 102 (statement)]
    CONST     [reduce using rule 102 (statement)]
    $default  reduce using rule 102 (statement)

    type         go to state 11
    declaration  go to state 100


State 45

    5 type: . INTEGER
    6     | . FLOAT
    7     | . DOUBLE
    8     | . VOID
    9     | . BOOLEAN
   10     | . CHAR
   11 declaration: . type IDENT SEMICOLON
   12            | . type IDENT ASSIGN_OP expression SEMICOLON
   13            | . CONST type IDENT SEMICOLON
   14            | . CONST type IDENT ASSIGN_OP expression SEMICOLON
   16 declarations: $@1 . declaration

    INTEGER  shift, and go to state 1
    FLOAT    shift, and go to state 2
    DOUBLE   shift, and go to state 3
    VOID     shift, and go to state 4
    BOOLEAN  shift, and go to state 5
    CHAR     shift, and go to state 6
    CONST    shift, and go to state 7

    type         go to state 11
    declaration  go to state 101


State 46

   26 expression: assign .

    $default  reduce using rule 26 (expression)


State 47

   91 expression_statement: expression . SEMICOLON

    SEMICOLON  shift, and go to state 102


State 48

   29 expression: simpleExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON]
   31 simpleExp: simpleExp . OR_OP andExp

    OR_OP  shift, and go to state 103

    $default  reduce using rule 29 (expression)


State 49

   32 simpleExp: andExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP]
   33 andExp: andExp . AND_OP

    AND_OP  shift, and go to state 104

    $default  reduce using rule 32 (simpleExp)


State 50

   34 andExp: bitRelExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP]
   35 bitRelExp: bitRelExp . BIT_OR_OP relExp
   36          | bitRelExp . AND relExp
   37          | bitRelExp . BIT_XOR_OP relExp

    BIT_OR_OP   shift, and go to state 105
    AND         shift, and go to state 106
    BIT_XOR_OP  shift, and go to state 107

    $default  reduce using rule 34 (andExp)


State 51

   38 bitRelExp: relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   39 op: . EQ_OP
   40   | . NE_OP
   41   | . GT_OP
   42   | . LT_OP
   43   | . LE_OP
   44   | . GE_OP
   45   | . OR_OP
   46   | . AND_OP
   47 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 108
    AND_OP  shift, and go to state 109
    EQ_OP   shift, and go to state 110
    NE_OP   shift, and go to state 111
    GT_OP   shift, and go to state 112
    LT_OP   shift, and go to state 113
    GE_OP   shift, and go to state 114
    LE_OP   shift, and go to state 115

    OR_OP     [reduce using rule 38 (bitRelExp)]
    AND_OP    [reduce using rule 38 (bitRelExp)]
    $default  reduce using rule 38 (bitRelExp)

    op  go to state 116


State 52

   48 relExp: bitshiftExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   49 bitshiftExp: bitshiftExp . BIT_LSHIFT_OP sumExp
   50            | bitshiftExp . BIT_RSHIFT_OP sumExp

    BIT_LSHIFT_OP  shift, and go to state 117
    BIT_RSHIFT_OP  shift, and go to state 118

    $default  reduce using rule 48 (relExp)


State 53

   51 bitshiftExp: sumExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   52 pls_min: . ADD_OP
   53        | . SUB_OP
   57 sumExp: sumExp . pls_min mulExp

    ADD_OP  shift, and go to state 119
    SUB_OP  shift, and go to state 120

    $default  reduce using rule 51 (bitshiftExp)

    pls_min  go to state 121


State 54

   54 mul_div: . MUL_OP
   55        | . DIV_OP
   56        | . MOD_OP
   58 sumExp: mulExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, ADD_OP, SUB_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   59 mulExp: mulExp . mul_div unaryExp

    MUL_OP  shift, and go to state 122
    DIV_OP  shift, and go to state 123
    MOD_OP  shift, and go to state 124

    $default  reduce using rule 58 (sumExp)

    mul_div  go to state 125


State 55

   60 mulExp: unaryExp .

    $default  reduce using rule 60 (mulExp)


State 56

   65 unaryExp: value .

    $default  reduce using rule 65 (unaryExp)


State 57

   95 statement: if_statement .

    $default  reduce using rule 95 (statement)


State 58

   96 statement: while_statement .

    $default  reduce using rule 96 (statement)


State 59

   97 statement: for_statement .

    $default  reduce using rule 97 (statement)


State 60

   98 statement: do_statement .

    $default  reduce using rule 98 (statement)


State 61

   99 statement: switch_statement .

    $default  reduce using rule 99 (statement)


State 62

  100 statement: return_statement .

    $default  reduce using rule 100 (statement)


State 63

  101 statement: expression_statement .

    $default  reduce using rule 101 (statement)


State 64

   15 $@1: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@1 declaration
   17             | . declarations declaration
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31 simpleExp: . simpleExp OR_OP andExp
   32          | . andExp
   33 andExp: . andExp AND_OP
   34       | . bitRelExp
   35 bitRelExp: . bitRelExp BIT_OR_OP relExp
   36          | . bitRelExp AND relExp
   37          | . bitRelExp BIT_XOR_OP relExp
   38          | . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
   76 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   77 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   78 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   79 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   80 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   88 return_statement: . RETURN return_val SEMICOLON
   91 expression_statement: . expression SEMICOLON
   94 statements: statements . statement
   95 statement: . if_statement
   96          | . while_statement
   97          | . for_statement
   98          | . do_statement
   99          | . switch_statement
  100          | . return_statement
  101          | . expression_statement
  102          | . declarations
  103          | . enum_statement
  104          | . func_call
  117 function_tail: LEFT_CURLY_BRACKET statements . RIGHT_CURLY_BRACKET
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT                shift, and go to state 28
    CONST_INT            shift, and go to state 29
    CONST_FLOAT          shift, and go to state 30
    CONST_CHAR           shift, and go to state 31
    STRING_LITERAL       shift, and go to state 32
    IF                   shift, and go to state 33
    WHILE                shift, and go to state 34
    FOR                  shift, and go to state 35
    DO                   shift, and go to state 36
    SWITCH               shift, and go to state 37
    RETURN               shift, and go to state 38
    ENUM                 shift, and go to state 39
    LEFT_PAREN           shift, and go to state 40
    RIGHT_CURLY_BRACKET  shift, and go to state 126
    INC_OP               shift, and go to state 41
    DEC_OP               shift, and go to state 42
    NOT_OP               shift, and go to state 43

    $default  reduce using rule 15 ($@1)

    declarations          go to state 44
    $@1                   go to state 45
    assign                go to state 46
    expression            go to state 47
    simpleExp             go to state 48
    andExp                go to state 49
    bitRelExp             go to state 50
    relExp                go to state 51
    bitshiftExp           go to state 52
    sumExp                go to state 53
    mulExp                go to state 54
    unaryExp              go to state 55
    value                 go to state 56
    if_statement          go to state 57
    while_statement       go to state 58
    for_statement         go to state 59
    do_statement          go to state 60
    switch_statement      go to state 61
    return_statement      go to state 62
    expression_statement  go to state 63
    statement             go to state 127
    enum_statement        go to state 66
    func_call             go to state 67


State 65

   93 statements: statement .

    $default  reduce using rule 93 (statements)


State 66

  103 statement: enum_statement .

    $default  reduce using rule 103 (statement)


State 67

  104 statement: func_call .

    $default  reduce using rule 104 (statement)


State 68

   13 declaration: CONST type IDENT SEMICOLON .

    $default  reduce using rule 13 (declaration)


State 69

   14 declaration: CONST type IDENT ASSIGN_OP . expression SEMICOLON
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31 simpleExp: . simpleExp OR_OP andExp
   32          | . andExp
   33 andExp: . andExp AND_OP
   34       | . bitRelExp
   35 bitRelExp: . bitRelExp BIT_OR_OP relExp
   36          | . bitRelExp AND relExp
   37          | . bitRelExp BIT_XOR_OP relExp
   38          | . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL

    IDENT           shift, and go to state 74
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    assign       go to state 46
    expression   go to state 128
    simpleExp    go to state 48
    andExp       go to state 49
    bitRelExp    go to state 50
    relExp       go to state 51
    bitshiftExp  go to state 52
    sumExp       go to state 53
    mulExp       go to state 54
    unaryExp     go to state 55
    value        go to state 56


State 70

  121 parameter: type . IDENT

    IDENT  shift, and go to state 129


State 71

  116 function_head: FUNC IDENT LEFT_PAREN param_empty . RIGHT_PAREN type

    RIGHT_PAREN  shift, and go to state 130


State 72

  114 param_empty: parameters .  [RIGHT_PAREN]
  119 parameters: parameters . COMMA parameter

    COMMA  shift, and go to state 131

    $default  reduce using rule 114 (param_empty)


State 73

  118 parameters: parameter .

    $default  reduce using rule 118 (parameters)


State 74

   25 assign: IDENT . ASSIGN_OP expression
   27 expression: IDENT . INC_OP
   28           | IDENT . DEC_OP
   30           | IDENT .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON]
   64 unaryExp: IDENT .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, ADD_OP, SUB_OP, MUL_OP, DIV_OP, MOD_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]

    INC_OP     shift, and go to state 77
    DEC_OP     shift, and go to state 78
    ASSIGN_OP  shift, and go to state 132

    RIGHT_PAREN  reduce using rule 30 (expression)
    RIGHT_PAREN  [reduce using rule 64 (unaryExp)]
    SEMICOLON    reduce using rule 30 (expression)
    SEMICOLON    [reduce using rule 64 (unaryExp)]
    COMMA        reduce using rule 30 (expression)
    COMMA        [reduce using rule 64 (unaryExp)]
    COLON        reduce using rule 30 (expression)
    COLON        [reduce using rule 64 (unaryExp)]
    $default     reduce using rule 64 (unaryExp)


State 75

   12 declaration: type IDENT ASSIGN_OP expression . SEMICOLON

    SEMICOLON  shift, and go to state 133


State 76

   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31 simpleExp: . simpleExp OR_OP andExp
   32          | . andExp
   33 andExp: . andExp AND_OP
   34       | . bitRelExp
   35 bitRelExp: . bitRelExp BIT_OR_OP relExp
   36          | . bitRelExp AND relExp
   37          | . bitRelExp BIT_XOR_OP relExp
   38          | . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
  127 func_call: IDENT LEFT_PAREN . arguments RIGHT_PAREN
  129 arguments: . argument
  130          | . arguments COMMA argument
  131          | . %empty  [RIGHT_PAREN, COMMA]
  132 argument: . expression

    IDENT           shift, and go to state 74
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    $default  reduce using rule 131 (arguments)

    assign       go to state 46
    expression   go to state 134
    simpleExp    go to state 48
    andExp       go to state 49
    bitRelExp    go to state 50
    relExp       go to state 51
    bitshiftExp  go to state 52
    sumExp       go to state 53
    mulExp       go to state 54
    unaryExp     go to state 55
    value        go to state 56
    arguments    go to state 135
    argument     go to state 136


State 77

   27 expression: IDENT INC_OP .

    $default  reduce using rule 27 (expression)


State 78

   28 expression: IDENT DEC_OP .

    $default  reduce using rule 28 (expression)


State 79

   25 assign: . IDENT ASSIGN_OP expression
   25       | IDENT ASSIGN_OP . expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31 simpleExp: . simpleExp OR_OP andExp
   32          | . andExp
   33 andExp: . andExp AND_OP
   34       | . bitRelExp
   35 bitRelExp: . bitRelExp BIT_OR_OP relExp
   36          | . bitRelExp AND relExp
   37          | . bitRelExp BIT_XOR_OP relExp
   38          | . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
  128 func_call: IDENT ASSIGN_OP . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 137
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    assign       go to state 46
    expression   go to state 138
    simpleExp    go to state 48
    andExp       go to state 49
    bitRelExp    go to state 50
    relExp       go to state 51
    bitshiftExp  go to state 52
    sumExp       go to state 53
    mulExp       go to state 54
    unaryExp     go to state 55
    value        go to state 56


State 80

   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
   76 if_statement: IF LEFT_PAREN . bool_expression RIGHT_PAREN tail else_if else_part

    IDENT           shift, and go to state 139
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    TRUE_TOKEN      shift, and go to state 140
    FALSE_TOKEN     shift, and go to state 141
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    bool_expression  go to state 142
    relExp           go to state 143
    bitshiftExp      go to state 52
    sumExp           go to state 53
    mulExp           go to state 54
    unaryExp         go to state 55
    value            go to state 56


State 81

   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
   77 while_statement: WHILE LEFT_PAREN . bool_expression RIGHT_PAREN tail_inloop

    IDENT           shift, and go to state 139
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    TRUE_TOKEN      shift, and go to state 140
    FALSE_TOKEN     shift, and go to state 141
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    bool_expression  go to state 144
    relExp           go to state 143
    bitshiftExp      go to state 52
    sumExp           go to state 53
    mulExp           go to state 54
    unaryExp         go to state 55
    value            go to state 56


State 82

   25 assign: . IDENT ASSIGN_OP expression
   78 for_statement: FOR LEFT_PAREN . assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

    IDENT  shift, and go to state 145

    assign  go to state 146


State 83

   89 break_statement: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 147


State 84

   90 continue_statement: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 148


State 85

   15 $@1: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@1 declaration
   17             | . declarations declaration
   21 tail_inloop: LEFT_CURLY_BRACKET . statements_inloop RIGHT_CURLY_BRACKET
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31 simpleExp: . simpleExp OR_OP andExp
   32          | . andExp
   33 andExp: . andExp AND_OP
   34       | . bitRelExp
   35 bitRelExp: . bitRelExp BIT_OR_OP relExp
   36          | . bitRelExp AND relExp
   37          | . bitRelExp BIT_XOR_OP relExp
   38          | . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
   76 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   77 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   78 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   79 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   80 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   88 return_statement: . RETURN return_val SEMICOLON
   89 break_statement: . BREAK SEMICOLON
   90 continue_statement: . CONTINUE SEMICOLON
   91 expression_statement: . expression SEMICOLON
   95 statement: . if_statement
   96          | . while_statement
   97          | . for_statement
   98          | . do_statement
   99          | . switch_statement
  100          | . return_statement
  101          | . expression_statement
  102          | . declarations
  103          | . enum_statement
  104          | . func_call
  105 statement_inloop: . statement
  106                 | . break_statement
  107                 | . continue_statement
  108 statements_inloop: . statement_inloop
  109                  | . statements_inloop statement_inloop
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 28
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    IF              shift, and go to state 33
    WHILE           shift, and go to state 34
    FOR             shift, and go to state 35
    DO              shift, and go to state 36
    SWITCH          shift, and go to state 37
    RETURN          shift, and go to state 38
    BREAK           shift, and go to state 83
    CONTINUE        shift, and go to state 84
    ENUM            shift, and go to state 39
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    $default  reduce using rule 15 ($@1)

    declarations          go to state 44
    $@1                   go to state 45
    assign                go to state 46
    expression            go to state 47
    simpleExp             go to state 48
    andExp                go to state 49
    bitRelExp             go to state 50
    relExp                go to state 51
    bitshiftExp           go to state 52
    sumExp                go to state 53
    mulExp                go to state 54
    unaryExp              go to state 55
    value                 go to state 56
    if_statement          go to state 57
    while_statement       go to state 58
    for_statement         go to state 59
    do_statement          go to state 60
    switch_statement      go to state 61
    return_statement      go to state 62
    break_statement       go to state 87
    continue_statement    go to state 88
    expression_statement  go to state 63
    statement             go to state 89
    statement_inloop      go to state 90
    statements_inloop     go to state 149
    enum_statement        go to state 66
    func_call             go to state 67


State 86

   79 do_statement: DO tail_inloop . WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON

    WHILE  shift, and go to state 150


State 87

  106 statement_inloop: break_statement .

    $default  reduce using rule 106 (statement_inloop)


State 88

  107 statement_inloop: continue_statement .

    $default  reduce using rule 107 (statement_inloop)


State 89

  105 statement_inloop: statement .

    $default  reduce using rule 105 (statement_inloop)


State 90

  108 statements_inloop: statement_inloop .

    $default  reduce using rule 108 (statements_inloop)


State 91

   15 $@1: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@1 declaration
   17             | . declarations declaration
   20 tail_inloop: statements_inloop .  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31 simpleExp: . simpleExp OR_OP andExp
   32          | . andExp
   33 andExp: . andExp AND_OP
   34       | . bitRelExp
   35 bitRelExp: . bitRelExp BIT_OR_OP relExp
   36          | . bitRelExp AND relExp
   37          | . bitRelExp BIT_XOR_OP relExp
   38          | . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
   76 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   77 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   78 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   79 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   80 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   88 return_statement: . RETURN return_val SEMICOLON
   89 break_statement: . BREAK SEMICOLON
   90 continue_statement: . CONTINUE SEMICOLON
   91 expression_statement: . expression SEMICOLON
   95 statement: . if_statement
   96          | . while_statement
   97          | . for_statement
   98          | . do_statement
   99          | . switch_statement
  100          | . return_statement
  101          | . expression_statement
  102          | . declarations
  103          | . enum_statement
  104          | . func_call
  105 statement_inloop: . statement
  106                 | . break_statement
  107                 | . continue_statement
  109 statements_inloop: statements_inloop . statement_inloop
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 28
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    IF              shift, and go to state 33
    WHILE           shift, and go to state 34
    FOR             shift, and go to state 35
    DO              shift, and go to state 36
    SWITCH          shift, and go to state 37
    RETURN          shift, and go to state 38
    BREAK           shift, and go to state 83
    CONTINUE        shift, and go to state 84
    ENUM            shift, and go to state 39
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    INTEGER              reduce using rule 15 ($@1)
    INTEGER              [reduce using rule 20 (tail_inloop)]
    FLOAT                reduce using rule 15 ($@1)
    FLOAT                [reduce using rule 20 (tail_inloop)]
    DOUBLE               reduce using rule 15 ($@1)
    DOUBLE               [reduce using rule 20 (tail_inloop)]
    VOID                 reduce using rule 15 ($@1)
    VOID                 [reduce using rule 20 (tail_inloop)]
    BOOLEAN              reduce using rule 15 ($@1)
    BOOLEAN              [reduce using rule 20 (tail_inloop)]
    CHAR                 reduce using rule 15 ($@1)
    CHAR                 [reduce using rule 20 (tail_inloop)]
    CONST                reduce using rule 15 ($@1)
    CONST                [reduce using rule 20 (tail_inloop)]
    IDENT                [reduce using rule 20 (tail_inloop)]
    CONST_INT            [reduce using rule 20 (tail_inloop)]
    CONST_FLOAT          [reduce using rule 20 (tail_inloop)]
    CONST_CHAR           [reduce using rule 20 (tail_inloop)]
    STRING_LITERAL       [reduce using rule 20 (tail_inloop)]
    IF                   [reduce using rule 20 (tail_inloop)]
    ELSE                 reduce using rule 20 (tail_inloop)
    ELIF                 reduce using rule 20 (tail_inloop)
    WHILE                [reduce using rule 20 (tail_inloop)]
    FOR                  [reduce using rule 20 (tail_inloop)]
    DO                   [reduce using rule 20 (tail_inloop)]
    SWITCH               [reduce using rule 20 (tail_inloop)]
    RETURN               [reduce using rule 20 (tail_inloop)]
    BREAK                [reduce using rule 20 (tail_inloop)]
    CONTINUE             [reduce using rule 20 (tail_inloop)]
    ENUM                 [reduce using rule 20 (tail_inloop)]
    LEFT_PAREN           [reduce using rule 20 (tail_inloop)]
    RIGHT_CURLY_BRACKET  reduce using rule 20 (tail_inloop)
    INC_OP               [reduce using rule 20 (tail_inloop)]
    DEC_OP               [reduce using rule 20 (tail_inloop)]
    NOT_OP               [reduce using rule 20 (tail_inloop)]
    $default             reduce using rule 15 ($@1)

    declarations          go to state 44
    $@1                   go to state 45
    assign                go to state 46
    expression            go to state 47
    simpleExp             go to state 48
    andExp                go to state 49
    bitRelExp             go to state 50
    relExp                go to state 51
    bitshiftExp           go to state 52
    sumExp                go to state 53
    mulExp                go to state 54
    unaryExp              go to state 55
    value                 go to state 56
    if_statement          go to state 57
    while_statement       go to state 58
    for_statement         go to state 59
    do_statement          go to state 60
    switch_statement      go to state 61
    return_statement      go to state 62
    break_statement       go to state 87
    continue_statement    go to state 88
    expression_statement  go to state 63
    statement             go to state 89
    statement_inloop      go to state 151
    enum_statement        go to state 66
    func_call             go to state 67


State 92

   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31 simpleExp: . simpleExp OR_OP andExp
   32          | . andExp
   33 andExp: . andExp AND_OP
   34       | . bitRelExp
   35 bitRelExp: . bitRelExp BIT_OR_OP relExp
   36          | . bitRelExp AND relExp
   37          | . bitRelExp BIT_XOR_OP relExp
   38          | . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
   80 switch_statement: SWITCH LEFT_PAREN . expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    IDENT           shift, and go to state 74
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    assign       go to state 46
    expression   go to state 152
    simpleExp    go to state 48
    andExp       go to state 49
    bitRelExp    go to state 50
    relExp       go to state 51
    bitshiftExp  go to state 52
    sumExp       go to state 53
    mulExp       go to state 54
    unaryExp     go to state 55
    value        go to state 56


State 93

   86 return_val: expression .

    $default  reduce using rule 86 (return_val)


State 94

   88 return_statement: RETURN return_val . SEMICOLON

    SEMICOLON  shift, and go to state 153


State 95

  122 enum_statement: ENUM IDENT . LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 154


State 96

   66 unaryExp: LEFT_PAREN expression . RIGHT_PAREN

    RIGHT_PAREN  shift, and go to state 155


State 97

   61 unaryExp: INC_OP IDENT .

    $default  reduce using rule 61 (unaryExp)


State 98

   62 unaryExp: DEC_OP IDENT .

    $default  reduce using rule 62 (unaryExp)


State 99

   63 unaryExp: NOT_OP IDENT .

    $default  reduce using rule 63 (unaryExp)


State 100

   17 declarations: declarations declaration .

    $default  reduce using rule 17 (declarations)


State 101

   16 declarations: $@1 declaration .

    $default  reduce using rule 16 (declarations)


State 102

   91 expression_statement: expression SEMICOLON .

    $default  reduce using rule 91 (expression_statement)


State 103

   31 simpleExp: simpleExp OR_OP . andExp
   33 andExp: . andExp AND_OP
   34       | . bitRelExp
   35 bitRelExp: . bitRelExp BIT_OR_OP relExp
   36          | . bitRelExp AND relExp
   37          | . bitRelExp BIT_XOR_OP relExp
   38          | . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL

    IDENT           shift, and go to state 139
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    andExp       go to state 156
    bitRelExp    go to state 50
    relExp       go to state 51
    bitshiftExp  go to state 52
    sumExp       go to state 53
    mulExp       go to state 54
    unaryExp     go to state 55
    value        go to state 56


State 104

   33 andExp: andExp AND_OP .

    $default  reduce using rule 33 (andExp)


State 105

   35 bitRelExp: bitRelExp BIT_OR_OP . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL

    IDENT           shift, and go to state 139
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    relExp       go to state 157
    bitshiftExp  go to state 52
    sumExp       go to state 53
    mulExp       go to state 54
    unaryExp     go to state 55
    value        go to state 56


State 106

   36 bitRelExp: bitRelExp AND . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL

    IDENT           shift, and go to state 139
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    relExp       go to state 158
    bitshiftExp  go to state 52
    sumExp       go to state 53
    mulExp       go to state 54
    unaryExp     go to state 55
    value        go to state 56


State 107

   37 bitRelExp: bitRelExp BIT_XOR_OP . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL

    IDENT           shift, and go to state 139
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    relExp       go to state 159
    bitshiftExp  go to state 52
    sumExp       go to state 53
    mulExp       go to state 54
    unaryExp     go to state 55
    value        go to state 56


State 108

   45 op: OR_OP .

    $default  reduce using rule 45 (op)


State 109

   46 op: AND_OP .

    $default  reduce using rule 46 (op)


State 110

   39 op: EQ_OP .

    $default  reduce using rule 39 (op)


State 111

   40 op: NE_OP .

    $default  reduce using rule 40 (op)


State 112

   41 op: GT_OP .

    $default  reduce using rule 41 (op)


State 113

   42 op: LT_OP .

    $default  reduce using rule 42 (op)


State 114

   44 op: GE_OP .

    $default  reduce using rule 44 (op)


State 115

   43 op: LE_OP .

    $default  reduce using rule 43 (op)


State 116

   47 relExp: relExp op . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL

    IDENT           shift, and go to state 139
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    bitshiftExp  go to state 160
    sumExp       go to state 53
    mulExp       go to state 54
    unaryExp     go to state 55
    value        go to state 56


State 117

   49 bitshiftExp: bitshiftExp BIT_LSHIFT_OP . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL

    IDENT           shift, and go to state 139
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    sumExp    go to state 161
    mulExp    go to state 54
    unaryExp  go to state 55
    value     go to state 56


State 118

   50 bitshiftExp: bitshiftExp BIT_RSHIFT_OP . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL

    IDENT           shift, and go to state 139
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    sumExp    go to state 162
    mulExp    go to state 54
    unaryExp  go to state 55
    value     go to state 56


State 119

   52 pls_min: ADD_OP .

    $default  reduce using rule 52 (pls_min)


State 120

   53 pls_min: SUB_OP .

    $default  reduce using rule 53 (pls_min)


State 121

   57 sumExp: sumExp pls_min . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL

    IDENT           shift, and go to state 139
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    mulExp    go to state 163
    unaryExp  go to state 55
    value     go to state 56


State 122

   54 mul_div: MUL_OP .

    $default  reduce using rule 54 (mul_div)


State 123

   55 mul_div: DIV_OP .

    $default  reduce using rule 55 (mul_div)


State 124

   56 mul_div: MOD_OP .

    $default  reduce using rule 56 (mul_div)


State 125

   59 mulExp: mulExp mul_div . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL

    IDENT           shift, and go to state 139
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    unaryExp  go to state 164
    value     go to state 56


State 126

  117 function_tail: LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET .

    $default  reduce using rule 117 (function_tail)


State 127

   94 statements: statements statement .

    $default  reduce using rule 94 (statements)


State 128

   14 declaration: CONST type IDENT ASSIGN_OP expression . SEMICOLON

    SEMICOLON  shift, and go to state 165


State 129

  121 parameter: type IDENT .

    $default  reduce using rule 121 (parameter)


State 130

    5 type: . INTEGER
    6     | . FLOAT
    7     | . DOUBLE
    8     | . VOID
    9     | . BOOLEAN
   10     | . CHAR
  116 function_head: FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN . type

    INTEGER  shift, and go to state 1
    FLOAT    shift, and go to state 2
    DOUBLE   shift, and go to state 3
    VOID     shift, and go to state 4
    BOOLEAN  shift, and go to state 5
    CHAR     shift, and go to state 6

    type  go to state 166


State 131

    5 type: . INTEGER
    6     | . FLOAT
    7     | . DOUBLE
    8     | . VOID
    9     | . BOOLEAN
   10     | . CHAR
  119 parameters: parameters COMMA . parameter
  121 parameter: . type IDENT

    INTEGER  shift, and go to state 1
    FLOAT    shift, and go to state 2
    DOUBLE   shift, and go to state 3
    VOID     shift, and go to state 4
    BOOLEAN  shift, and go to state 5
    CHAR     shift, and go to state 6

    type       go to state 70
    parameter  go to state 167


State 132

   25 assign: . IDENT ASSIGN_OP expression
   25       | IDENT ASSIGN_OP . expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31 simpleExp: . simpleExp OR_OP andExp
   32          | . andExp
   33 andExp: . andExp AND_OP
   34       | . bitRelExp
   35 bitRelExp: . bitRelExp BIT_OR_OP relExp
   36          | . bitRelExp AND relExp
   37          | . bitRelExp BIT_XOR_OP relExp
   38          | . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL

    IDENT           shift, and go to state 74
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    assign       go to state 46
    expression   go to state 138
    simpleExp    go to state 48
    andExp       go to state 49
    bitRelExp    go to state 50
    relExp       go to state 51
    bitshiftExp  go to state 52
    sumExp       go to state 53
    mulExp       go to state 54
    unaryExp     go to state 55
    value        go to state 56


State 133

   12 declaration: type IDENT ASSIGN_OP expression SEMICOLON .

    $default  reduce using rule 12 (declaration)


State 134

  132 argument: expression .

    $default  reduce using rule 132 (argument)


State 135

  127 func_call: IDENT LEFT_PAREN arguments . RIGHT_PAREN
  130 arguments: arguments . COMMA argument

    RIGHT_PAREN  shift, and go to state 168
    COMMA        shift, and go to state 169


State 136

  129 arguments: argument .

    $default  reduce using rule 129 (arguments)


State 137

   25 assign: IDENT . ASSIGN_OP expression
   27 expression: IDENT . INC_OP
   28           | IDENT . DEC_OP
   30           | IDENT .  [SEMICOLON]
   64 unaryExp: IDENT .  [SEMICOLON, ADD_OP, SUB_OP, MUL_OP, DIV_OP, MOD_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
  128 func_call: IDENT ASSIGN_OP IDENT . LEFT_PAREN arguments RIGHT_PAREN

    LEFT_PAREN  shift, and go to state 170
    INC_OP      shift, and go to state 77
    DEC_OP      shift, and go to state 78
    ASSIGN_OP   shift, and go to state 132

    SEMICOLON  reduce using rule 30 (expression)
    SEMICOLON  [reduce using rule 64 (unaryExp)]
    $default   reduce using rule 64 (unaryExp)


State 138

   25 assign: IDENT ASSIGN_OP expression .

    $default  reduce using rule 25 (assign)


State 139

   64 unaryExp: IDENT .

    $default  reduce using rule 64 (unaryExp)


State 140

   23 bool_expression: TRUE_TOKEN .

    $default  reduce using rule 23 (bool_expression)


State 141

   24 bool_expression: FALSE_TOKEN .

    $default  reduce using rule 24 (bool_expression)


State 142

   76 if_statement: IF LEFT_PAREN bool_expression . RIGHT_PAREN tail else_if else_part

    RIGHT_PAREN  shift, and go to state 171


State 143

   22 bool_expression: relExp .  [RIGHT_PAREN, SEMICOLON]
   39 op: . EQ_OP
   40   | . NE_OP
   41   | . GT_OP
   42   | . LT_OP
   43   | . LE_OP
   44   | . GE_OP
   45   | . OR_OP
   46   | . AND_OP
   47 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 108
    AND_OP  shift, and go to state 109
    EQ_OP   shift, and go to state 110
    NE_OP   shift, and go to state 111
    GT_OP   shift, and go to state 112
    LT_OP   shift, and go to state 113
    GE_OP   shift, and go to state 114
    LE_OP   shift, and go to state 115

    $default  reduce using rule 22 (bool_expression)

    op  go to state 116


State 144

   77 while_statement: WHILE LEFT_PAREN bool_expression . RIGHT_PAREN tail_inloop

    RIGHT_PAREN  shift, and go to state 172


State 145

   25 assign: IDENT . ASSIGN_OP expression

    ASSIGN_OP  shift, and go to state 132


State 146

   78 for_statement: FOR LEFT_PAREN assign . SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

    SEMICOLON  shift, and go to state 173


State 147

   89 break_statement: BREAK SEMICOLON .

    $default  reduce using rule 89 (break_statement)


State 148

   90 continue_statement: CONTINUE SEMICOLON .

    $default  reduce using rule 90 (continue_statement)


State 149

   15 $@1: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@1 declaration
   17             | . declarations declaration
   21 tail_inloop: LEFT_CURLY_BRACKET statements_inloop . RIGHT_CURLY_BRACKET
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31 simpleExp: . simpleExp OR_OP andExp
   32          | . andExp
   33 andExp: . andExp AND_OP
   34       | . bitRelExp
   35 bitRelExp: . bitRelExp BIT_OR_OP relExp
   36          | . bitRelExp AND relExp
   37          | . bitRelExp BIT_XOR_OP relExp
   38          | . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
   76 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   77 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   78 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   79 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   80 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   88 return_statement: . RETURN return_val SEMICOLON
   89 break_statement: . BREAK SEMICOLON
   90 continue_statement: . CONTINUE SEMICOLON
   91 expression_statement: . expression SEMICOLON
   95 statement: . if_statement
   96          | . while_statement
   97          | . for_statement
   98          | . do_statement
   99          | . switch_statement
  100          | . return_statement
  101          | . expression_statement
  102          | . declarations
  103          | . enum_statement
  104          | . func_call
  105 statement_inloop: . statement
  106                 | . break_statement
  107                 | . continue_statement
  109 statements_inloop: statements_inloop . statement_inloop
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT                shift, and go to state 28
    CONST_INT            shift, and go to state 29
    CONST_FLOAT          shift, and go to state 30
    CONST_CHAR           shift, and go to state 31
    STRING_LITERAL       shift, and go to state 32
    IF                   shift, and go to state 33
    WHILE                shift, and go to state 34
    FOR                  shift, and go to state 35
    DO                   shift, and go to state 36
    SWITCH               shift, and go to state 37
    RETURN               shift, and go to state 38
    BREAK                shift, and go to state 83
    CONTINUE             shift, and go to state 84
    ENUM                 shift, and go to state 39
    LEFT_PAREN           shift, and go to state 40
    RIGHT_CURLY_BRACKET  shift, and go to state 174
    INC_OP               shift, and go to state 41
    DEC_OP               shift, and go to state 42
    NOT_OP               shift, and go to state 43

    $default  reduce using rule 15 ($@1)

    declarations          go to state 44
    $@1                   go to state 45
    assign                go to state 46
    expression            go to state 47
    simpleExp             go to state 48
    andExp                go to state 49
    bitRelExp             go to state 50
    relExp                go to state 51
    bitshiftExp           go to state 52
    sumExp                go to state 53
    mulExp                go to state 54
    unaryExp              go to state 55
    value                 go to state 56
    if_statement          go to state 57
    while_statement       go to state 58
    for_statement         go to state 59
    do_statement          go to state 60
    switch_statement      go to state 61
    return_statement      go to state 62
    break_statement       go to state 87
    continue_statement    go to state 88
    expression_statement  go to state 63
    statement             go to state 89
    statement_inloop      go to state 151
    enum_statement        go to state 66
    func_call             go to state 67


State 150

   79 do_statement: DO tail_inloop WHILE . LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON

    LEFT_PAREN  shift, and go to state 175


State 151

  109 statements_inloop: statements_inloop statement_inloop .

    $default  reduce using rule 109 (statements_inloop)


State 152

   80 switch_statement: SWITCH LEFT_PAREN expression . RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    RIGHT_PAREN  shift, and go to state 176


State 153

   88 return_statement: RETURN return_val SEMICOLON .

    $default  reduce using rule 88 (return_statement)


State 154

  122 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET . enum_list RIGHT_CURLY_BRACKET
  123 enum_list: . one_val
  124          | . enum_list COMMA one_val
  125 one_val: . IDENT
  126        | . IDENT ASSIGN_OP value

    IDENT  shift, and go to state 177

    enum_list  go to state 178
    one_val    go to state 179


State 155

   66 unaryExp: LEFT_PAREN expression RIGHT_PAREN .

    $default  reduce using rule 66 (unaryExp)


State 156

   31 simpleExp: simpleExp OR_OP andExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP]
   33 andExp: andExp . AND_OP

    AND_OP  shift, and go to state 104

    $default  reduce using rule 31 (simpleExp)


State 157

   35 bitRelExp: bitRelExp BIT_OR_OP relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   39 op: . EQ_OP
   40   | . NE_OP
   41   | . GT_OP
   42   | . LT_OP
   43   | . LE_OP
   44   | . GE_OP
   45   | . OR_OP
   46   | . AND_OP
   47 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 108
    AND_OP  shift, and go to state 109
    EQ_OP   shift, and go to state 110
    NE_OP   shift, and go to state 111
    GT_OP   shift, and go to state 112
    LT_OP   shift, and go to state 113
    GE_OP   shift, and go to state 114
    LE_OP   shift, and go to state 115

    OR_OP     [reduce using rule 35 (bitRelExp)]
    AND_OP    [reduce using rule 35 (bitRelExp)]
    $default  reduce using rule 35 (bitRelExp)

    op  go to state 116


State 158

   36 bitRelExp: bitRelExp AND relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   39 op: . EQ_OP
   40   | . NE_OP
   41   | . GT_OP
   42   | . LT_OP
   43   | . LE_OP
   44   | . GE_OP
   45   | . OR_OP
   46   | . AND_OP
   47 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 108
    AND_OP  shift, and go to state 109
    EQ_OP   shift, and go to state 110
    NE_OP   shift, and go to state 111
    GT_OP   shift, and go to state 112
    LT_OP   shift, and go to state 113
    GE_OP   shift, and go to state 114
    LE_OP   shift, and go to state 115

    OR_OP     [reduce using rule 36 (bitRelExp)]
    AND_OP    [reduce using rule 36 (bitRelExp)]
    $default  reduce using rule 36 (bitRelExp)

    op  go to state 116


State 159

   37 bitRelExp: bitRelExp BIT_XOR_OP relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   39 op: . EQ_OP
   40   | . NE_OP
   41   | . GT_OP
   42   | . LT_OP
   43   | . LE_OP
   44   | . GE_OP
   45   | . OR_OP
   46   | . AND_OP
   47 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 108
    AND_OP  shift, and go to state 109
    EQ_OP   shift, and go to state 110
    NE_OP   shift, and go to state 111
    GT_OP   shift, and go to state 112
    LT_OP   shift, and go to state 113
    GE_OP   shift, and go to state 114
    LE_OP   shift, and go to state 115

    OR_OP     [reduce using rule 37 (bitRelExp)]
    AND_OP    [reduce using rule 37 (bitRelExp)]
    $default  reduce using rule 37 (bitRelExp)

    op  go to state 116


State 160

   47 relExp: relExp op bitshiftExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   49 bitshiftExp: bitshiftExp . BIT_LSHIFT_OP sumExp
   50            | bitshiftExp . BIT_RSHIFT_OP sumExp

    BIT_LSHIFT_OP  shift, and go to state 117
    BIT_RSHIFT_OP  shift, and go to state 118

    $default  reduce using rule 47 (relExp)


State 161

   49 bitshiftExp: bitshiftExp BIT_LSHIFT_OP sumExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   52 pls_min: . ADD_OP
   53        | . SUB_OP
   57 sumExp: sumExp . pls_min mulExp

    ADD_OP  shift, and go to state 119
    SUB_OP  shift, and go to state 120

    $default  reduce using rule 49 (bitshiftExp)

    pls_min  go to state 121


State 162

   50 bitshiftExp: bitshiftExp BIT_RSHIFT_OP sumExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   52 pls_min: . ADD_OP
   53        | . SUB_OP
   57 sumExp: sumExp . pls_min mulExp

    ADD_OP  shift, and go to state 119
    SUB_OP  shift, and go to state 120

    $default  reduce using rule 50 (bitshiftExp)

    pls_min  go to state 121


State 163

   54 mul_div: . MUL_OP
   55        | . DIV_OP
   56        | . MOD_OP
   57 sumExp: sumExp pls_min mulExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, ADD_OP, SUB_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   59 mulExp: mulExp . mul_div unaryExp

    MUL_OP  shift, and go to state 122
    DIV_OP  shift, and go to state 123
    MOD_OP  shift, and go to state 124

    $default  reduce using rule 57 (sumExp)

    mul_div  go to state 125


State 164

   59 mulExp: mulExp mul_div unaryExp .

    $default  reduce using rule 59 (mulExp)


State 165

   14 declaration: CONST type IDENT ASSIGN_OP expression SEMICOLON .

    $default  reduce using rule 14 (declaration)


State 166

  116 function_head: FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN type .

    $default  reduce using rule 116 (function_head)


State 167

  119 parameters: parameters COMMA parameter .

    $default  reduce using rule 119 (parameters)


State 168

  127 func_call: IDENT LEFT_PAREN arguments RIGHT_PAREN .

    $default  reduce using rule 127 (func_call)


State 169

   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31 simpleExp: . simpleExp OR_OP andExp
   32          | . andExp
   33 andExp: . andExp AND_OP
   34       | . bitRelExp
   35 bitRelExp: . bitRelExp BIT_OR_OP relExp
   36          | . bitRelExp AND relExp
   37          | . bitRelExp BIT_XOR_OP relExp
   38          | . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
  130 arguments: arguments COMMA . argument
  132 argument: . expression

    IDENT           shift, and go to state 74
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    assign       go to state 46
    expression   go to state 134
    simpleExp    go to state 48
    andExp       go to state 49
    bitRelExp    go to state 50
    relExp       go to state 51
    bitshiftExp  go to state 52
    sumExp       go to state 53
    mulExp       go to state 54
    unaryExp     go to state 55
    value        go to state 56
    argument     go to state 180


State 170

   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31 simpleExp: . simpleExp OR_OP andExp
   32          | . andExp
   33 andExp: . andExp AND_OP
   34       | . bitRelExp
   35 bitRelExp: . bitRelExp BIT_OR_OP relExp
   36          | . bitRelExp AND relExp
   37          | . bitRelExp BIT_XOR_OP relExp
   38          | . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
  128 func_call: IDENT ASSIGN_OP IDENT LEFT_PAREN . arguments RIGHT_PAREN
  129 arguments: . argument
  130          | . arguments COMMA argument
  131          | . %empty  [RIGHT_PAREN, COMMA]
  132 argument: . expression

    IDENT           shift, and go to state 74
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    $default  reduce using rule 131 (arguments)

    assign       go to state 46
    expression   go to state 134
    simpleExp    go to state 48
    andExp       go to state 49
    bitRelExp    go to state 50
    relExp       go to state 51
    bitshiftExp  go to state 52
    sumExp       go to state 53
    mulExp       go to state 54
    unaryExp     go to state 55
    value        go to state 56
    arguments    go to state 181
    argument     go to state 136


State 171

   15 $@1: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@1 declaration
   17             | . declarations declaration
   18 tail: . statements
   19     | . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31 simpleExp: . simpleExp OR_OP andExp
   32          | . andExp
   33 andExp: . andExp AND_OP
   34       | . bitRelExp
   35 bitRelExp: . bitRelExp BIT_OR_OP relExp
   36          | . bitRelExp AND relExp
   37          | . bitRelExp BIT_XOR_OP relExp
   38          | . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
   76 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   76             | IF LEFT_PAREN bool_expression RIGHT_PAREN . tail else_if else_part
   77 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   78 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   79 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   80 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   88 return_statement: . RETURN return_val SEMICOLON
   91 expression_statement: . expression SEMICOLON
   92 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   93           | . statement
   94           | . statements statement
   95 statement: . if_statement
   96          | . while_statement
   97          | . for_statement
   98          | . do_statement
   99          | . switch_statement
  100          | . return_statement
  101          | . expression_statement
  102          | . declarations
  103          | . enum_statement
  104          | . func_call
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT               shift, and go to state 28
    CONST_INT           shift, and go to state 29
    CONST_FLOAT         shift, and go to state 30
    CONST_CHAR          shift, and go to state 31
    STRING_LITERAL      shift, and go to state 32
    IF                  shift, and go to state 33
    WHILE               shift, and go to state 34
    FOR                 shift, and go to state 35
    DO                  shift, and go to state 36
    SWITCH              shift, and go to state 37
    RETURN              shift, and go to state 38
    ENUM                shift, and go to state 39
    LEFT_PAREN          shift, and go to state 40
    LEFT_CURLY_BRACKET  shift, and go to state 182
    INC_OP              shift, and go to state 41
    DEC_OP              shift, and go to state 42
    NOT_OP              shift, and go to state 43

    INTEGER              reduce using rule 15 ($@1)
    INTEGER              [reduce using rule 92 (statements)]
    FLOAT                reduce using rule 15 ($@1)
    FLOAT                [reduce using rule 92 (statements)]
    DOUBLE               reduce using rule 15 ($@1)
    DOUBLE               [reduce using rule 92 (statements)]
    VOID                 reduce using rule 15 ($@1)
    VOID                 [reduce using rule 92 (statements)]
    BOOLEAN              reduce using rule 15 ($@1)
    BOOLEAN              [reduce using rule 92 (statements)]
    CHAR                 reduce using rule 15 ($@1)
    CHAR                 [reduce using rule 92 (statements)]
    CONST                reduce using rule 15 ($@1)
    CONST                [reduce using rule 92 (statements)]
    IDENT                [reduce using rule 92 (statements)]
    CONST_INT            [reduce using rule 92 (statements)]
    CONST_FLOAT          [reduce using rule 92 (statements)]
    CONST_CHAR           [reduce using rule 92 (statements)]
    STRING_LITERAL       [reduce using rule 92 (statements)]
    IF                   [reduce using rule 92 (statements)]
    ELSE                 reduce using rule 92 (statements)
    ELIF                 reduce using rule 92 (statements)
    WHILE                [reduce using rule 92 (statements)]
    FOR                  [reduce using rule 92 (statements)]
    DO                   [reduce using rule 92 (statements)]
    SWITCH               [reduce using rule 92 (statements)]
    RETURN               [reduce using rule 92 (statements)]
    BREAK                reduce using rule 92 (statements)
    CONTINUE             reduce using rule 92 (statements)
    ENUM                 [reduce using rule 92 (statements)]
    LEFT_PAREN           [reduce using rule 92 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 92 (statements)
    INC_OP               [reduce using rule 92 (statements)]
    DEC_OP               [reduce using rule 92 (statements)]
    NOT_OP               [reduce using rule 92 (statements)]
    $default             reduce using rule 15 ($@1)

    declarations          go to state 44
    $@1                   go to state 45
    tail                  go to state 183
    assign                go to state 46
    expression            go to state 47
    simpleExp             go to state 48
    andExp                go to state 49
    bitRelExp             go to state 50
    relExp                go to state 51
    bitshiftExp           go to state 52
    sumExp                go to state 53
    mulExp                go to state 54
    unaryExp              go to state 55
    value                 go to state 56
    if_statement          go to state 57
    while_statement       go to state 58
    for_statement         go to state 59
    do_statement          go to state 60
    switch_statement      go to state 61
    return_statement      go to state 62
    expression_statement  go to state 63
    statements            go to state 184
    statement             go to state 65
    enum_statement        go to state 66
    func_call             go to state 67


State 172

   15 $@1: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@1 declaration
   17             | . declarations declaration
   20 tail_inloop: . statements_inloop
   21            | . LEFT_CURLY_BRACKET statements_inloop RIGHT_CURLY_BRACKET
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31 simpleExp: . simpleExp OR_OP andExp
   32          | . andExp
   33 andExp: . andExp AND_OP
   34       | . bitRelExp
   35 bitRelExp: . bitRelExp BIT_OR_OP relExp
   36          | . bitRelExp AND relExp
   37          | . bitRelExp BIT_XOR_OP relExp
   38          | . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
   76 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   77 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   77                | WHILE LEFT_PAREN bool_expression RIGHT_PAREN . tail_inloop
   78 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   79 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   80 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   88 return_statement: . RETURN return_val SEMICOLON
   89 break_statement: . BREAK SEMICOLON
   90 continue_statement: . CONTINUE SEMICOLON
   91 expression_statement: . expression SEMICOLON
   95 statement: . if_statement
   96          | . while_statement
   97          | . for_statement
   98          | . do_statement
   99          | . switch_statement
  100          | . return_statement
  101          | . expression_statement
  102          | . declarations
  103          | . enum_statement
  104          | . func_call
  105 statement_inloop: . statement
  106                 | . break_statement
  107                 | . continue_statement
  108 statements_inloop: . statement_inloop
  109                  | . statements_inloop statement_inloop
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT               shift, and go to state 28
    CONST_INT           shift, and go to state 29
    CONST_FLOAT         shift, and go to state 30
    CONST_CHAR          shift, and go to state 31
    STRING_LITERAL      shift, and go to state 32
    IF                  shift, and go to state 33
    WHILE               shift, and go to state 34
    FOR                 shift, and go to state 35
    DO                  shift, and go to state 36
    SWITCH              shift, and go to state 37
    RETURN              shift, and go to state 38
    BREAK               shift, and go to state 83
    CONTINUE            shift, and go to state 84
    ENUM                shift, and go to state 39
    LEFT_PAREN          shift, and go to state 40
    LEFT_CURLY_BRACKET  shift, and go to state 85
    INC_OP              shift, and go to state 41
    DEC_OP              shift, and go to state 42
    NOT_OP              shift, and go to state 43

    $default  reduce using rule 15 ($@1)

    declarations          go to state 44
    $@1                   go to state 45
    tail_inloop           go to state 185
    assign                go to state 46
    expression            go to state 47
    simpleExp             go to state 48
    andExp                go to state 49
    bitRelExp             go to state 50
    relExp                go to state 51
    bitshiftExp           go to state 52
    sumExp                go to state 53
    mulExp                go to state 54
    unaryExp              go to state 55
    value                 go to state 56
    if_statement          go to state 57
    while_statement       go to state 58
    for_statement         go to state 59
    do_statement          go to state 60
    switch_statement      go to state 61
    return_statement      go to state 62
    break_statement       go to state 87
    continue_statement    go to state 88
    expression_statement  go to state 63
    statement             go to state 89
    statement_inloop      go to state 90
    statements_inloop     go to state 91
    enum_statement        go to state 66
    func_call             go to state 67


State 173

   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
   78 for_statement: FOR LEFT_PAREN assign SEMICOLON . bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

    IDENT           shift, and go to state 139
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    TRUE_TOKEN      shift, and go to state 140
    FALSE_TOKEN     shift, and go to state 141
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    bool_expression  go to state 186
    relExp           go to state 143
    bitshiftExp      go to state 52
    sumExp           go to state 53
    mulExp           go to state 54
    unaryExp         go to state 55
    value            go to state 56


State 174

   21 tail_inloop: LEFT_CURLY_BRACKET statements_inloop RIGHT_CURLY_BRACKET .

    $default  reduce using rule 21 (tail_inloop)


State 175

   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
   79 do_statement: DO tail_inloop WHILE LEFT_PAREN . bool_expression RIGHT_PAREN SEMICOLON

    IDENT           shift, and go to state 139
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    TRUE_TOKEN      shift, and go to state 140
    FALSE_TOKEN     shift, and go to state 141
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    bool_expression  go to state 187
    relExp           go to state 143
    bitshiftExp      go to state 52
    sumExp           go to state 53
    mulExp           go to state 54
    unaryExp         go to state 55
    value            go to state 56


State 176

   80 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN . LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 188


State 177

  125 one_val: IDENT .  [RIGHT_CURLY_BRACKET, COMMA]
  126        | IDENT . ASSIGN_OP value

    ASSIGN_OP  shift, and go to state 189

    $default  reduce using rule 125 (one_val)


State 178

  122 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET enum_list . RIGHT_CURLY_BRACKET
  124 enum_list: enum_list . COMMA one_val

    RIGHT_CURLY_BRACKET  shift, and go to state 190
    COMMA                shift, and go to state 191


State 179

  123 enum_list: one_val .

    $default  reduce using rule 123 (enum_list)


State 180

  130 arguments: arguments COMMA argument .

    $default  reduce using rule 130 (arguments)


State 181

  128 func_call: IDENT ASSIGN_OP IDENT LEFT_PAREN arguments . RIGHT_PAREN
  130 arguments: arguments . COMMA argument

    RIGHT_PAREN  shift, and go to state 192
    COMMA        shift, and go to state 169


State 182

   15 $@1: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@1 declaration
   17             | . declarations declaration
   19 tail: LEFT_CURLY_BRACKET . statements RIGHT_CURLY_BRACKET
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31 simpleExp: . simpleExp OR_OP andExp
   32          | . andExp
   33 andExp: . andExp AND_OP
   34       | . bitRelExp
   35 bitRelExp: . bitRelExp BIT_OR_OP relExp
   36          | . bitRelExp AND relExp
   37          | . bitRelExp BIT_XOR_OP relExp
   38          | . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
   76 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   77 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   78 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   79 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   80 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   88 return_statement: . RETURN return_val SEMICOLON
   91 expression_statement: . expression SEMICOLON
   92 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   93           | . statement
   94           | . statements statement
   95 statement: . if_statement
   96          | . while_statement
   97          | . for_statement
   98          | . do_statement
   99          | . switch_statement
  100          | . return_statement
  101          | . expression_statement
  102          | . declarations
  103          | . enum_statement
  104          | . func_call
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 28
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    IF              shift, and go to state 33
    WHILE           shift, and go to state 34
    FOR             shift, and go to state 35
    DO              shift, and go to state 36
    SWITCH          shift, and go to state 37
    RETURN          shift, and go to state 38
    ENUM            shift, and go to state 39
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    INTEGER              reduce using rule 15 ($@1)
    INTEGER              [reduce using rule 92 (statements)]
    FLOAT                reduce using rule 15 ($@1)
    FLOAT                [reduce using rule 92 (statements)]
    DOUBLE               reduce using rule 15 ($@1)
    DOUBLE               [reduce using rule 92 (statements)]
    VOID                 reduce using rule 15 ($@1)
    VOID                 [reduce using rule 92 (statements)]
    BOOLEAN              reduce using rule 15 ($@1)
    BOOLEAN              [reduce using rule 92 (statements)]
    CHAR                 reduce using rule 15 ($@1)
    CHAR                 [reduce using rule 92 (statements)]
    CONST                reduce using rule 15 ($@1)
    CONST                [reduce using rule 92 (statements)]
    IDENT                [reduce using rule 92 (statements)]
    CONST_INT            [reduce using rule 92 (statements)]
    CONST_FLOAT          [reduce using rule 92 (statements)]
    CONST_CHAR           [reduce using rule 92 (statements)]
    STRING_LITERAL       [reduce using rule 92 (statements)]
    IF                   [reduce using rule 92 (statements)]
    WHILE                [reduce using rule 92 (statements)]
    FOR                  [reduce using rule 92 (statements)]
    DO                   [reduce using rule 92 (statements)]
    SWITCH               [reduce using rule 92 (statements)]
    RETURN               [reduce using rule 92 (statements)]
    ENUM                 [reduce using rule 92 (statements)]
    LEFT_PAREN           [reduce using rule 92 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 92 (statements)
    INC_OP               [reduce using rule 92 (statements)]
    DEC_OP               [reduce using rule 92 (statements)]
    NOT_OP               [reduce using rule 92 (statements)]
    $default             reduce using rule 15 ($@1)

    declarations          go to state 44
    $@1                   go to state 45
    assign                go to state 46
    expression            go to state 47
    simpleExp             go to state 48
    andExp                go to state 49
    bitRelExp             go to state 50
    relExp                go to state 51
    bitshiftExp           go to state 52
    sumExp                go to state 53
    mulExp                go to state 54
    unaryExp              go to state 55
    value                 go to state 56
    if_statement          go to state 57
    while_statement       go to state 58
    for_statement         go to state 59
    do_statement          go to state 60
    switch_statement      go to state 61
    return_statement      go to state 62
    expression_statement  go to state 63
    statements            go to state 193
    statement             go to state 65
    enum_statement        go to state 66
    func_call             go to state 67


State 183

   71 else_if: . ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   72        | . else_if ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   73        | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   76 if_statement: IF LEFT_PAREN bool_expression RIGHT_PAREN tail . else_if else_part

    ELIF  shift, and go to state 194

    ELIF      [reduce using rule 73 (else_if)]
    $default  reduce using rule 73 (else_if)

    else_if  go to state 195


State 184

   15 $@1: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@1 declaration
   17             | . declarations declaration
   18 tail: statements .  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31 simpleExp: . simpleExp OR_OP andExp
   32          | . andExp
   33 andExp: . andExp AND_OP
   34       | . bitRelExp
   35 bitRelExp: . bitRelExp BIT_OR_OP relExp
   36          | . bitRelExp AND relExp
   37          | . bitRelExp BIT_XOR_OP relExp
   38          | . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
   76 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   77 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   78 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   79 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   80 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   88 return_statement: . RETURN return_val SEMICOLON
   91 expression_statement: . expression SEMICOLON
   94 statements: statements . statement
   95 statement: . if_statement
   96          | . while_statement
   97          | . for_statement
   98          | . do_statement
   99          | . switch_statement
  100          | . return_statement
  101          | . expression_statement
  102          | . declarations
  103          | . enum_statement
  104          | . func_call
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 28
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    IF              shift, and go to state 33
    WHILE           shift, and go to state 34
    FOR             shift, and go to state 35
    DO              shift, and go to state 36
    SWITCH          shift, and go to state 37
    RETURN          shift, and go to state 38
    ENUM            shift, and go to state 39
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    INTEGER              reduce using rule 15 ($@1)
    INTEGER              [reduce using rule 18 (tail)]
    FLOAT                reduce using rule 15 ($@1)
    FLOAT                [reduce using rule 18 (tail)]
    DOUBLE               reduce using rule 15 ($@1)
    DOUBLE               [reduce using rule 18 (tail)]
    VOID                 reduce using rule 15 ($@1)
    VOID                 [reduce using rule 18 (tail)]
    BOOLEAN              reduce using rule 15 ($@1)
    BOOLEAN              [reduce using rule 18 (tail)]
    CHAR                 reduce using rule 15 ($@1)
    CHAR                 [reduce using rule 18 (tail)]
    CONST                reduce using rule 15 ($@1)
    CONST                [reduce using rule 18 (tail)]
    IDENT                [reduce using rule 18 (tail)]
    CONST_INT            [reduce using rule 18 (tail)]
    CONST_FLOAT          [reduce using rule 18 (tail)]
    CONST_CHAR           [reduce using rule 18 (tail)]
    STRING_LITERAL       [reduce using rule 18 (tail)]
    IF                   [reduce using rule 18 (tail)]
    ELSE                 reduce using rule 18 (tail)
    ELIF                 reduce using rule 18 (tail)
    WHILE                [reduce using rule 18 (tail)]
    FOR                  [reduce using rule 18 (tail)]
    DO                   [reduce using rule 18 (tail)]
    SWITCH               [reduce using rule 18 (tail)]
    RETURN               [reduce using rule 18 (tail)]
    BREAK                reduce using rule 18 (tail)
    CONTINUE             reduce using rule 18 (tail)
    ENUM                 [reduce using rule 18 (tail)]
    LEFT_PAREN           [reduce using rule 18 (tail)]
    RIGHT_CURLY_BRACKET  reduce using rule 18 (tail)
    INC_OP               [reduce using rule 18 (tail)]
    DEC_OP               [reduce using rule 18 (tail)]
    NOT_OP               [reduce using rule 18 (tail)]
    $default             reduce using rule 15 ($@1)

    declarations          go to state 44
    $@1                   go to state 45
    assign                go to state 46
    expression            go to state 47
    simpleExp             go to state 48
    andExp                go to state 49
    bitRelExp             go to state 50
    relExp                go to state 51
    bitshiftExp           go to state 52
    sumExp                go to state 53
    mulExp                go to state 54
    unaryExp              go to state 55
    value                 go to state 56
    if_statement          go to state 57
    while_statement       go to state 58
    for_statement         go to state 59
    do_statement          go to state 60
    switch_statement      go to state 61
    return_statement      go to state 62
    expression_statement  go to state 63
    statement             go to state 127
    enum_statement        go to state 66
    func_call             go to state 67


State 185

   77 while_statement: WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop .

    $default  reduce using rule 77 (while_statement)


State 186

   78 for_statement: FOR LEFT_PAREN assign SEMICOLON bool_expression . SEMICOLON expression RIGHT_PAREN tail_inloop

    SEMICOLON  shift, and go to state 196


State 187

   79 do_statement: DO tail_inloop WHILE LEFT_PAREN bool_expression . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN  shift, and go to state 197


State 188

   80 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET . cases RIGHT_CURLY_BRACKET
   81 cases: . case
   82      | . cases case
   83      | . cases default
   85 case: . CASE expression COLON statements BREAK SEMICOLON

    CASE  shift, and go to state 198

    cases  go to state 199
    case   go to state 200


State 189

   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
  126 one_val: IDENT ASSIGN_OP . value

    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32

    value  go to state 201


State 190

  122 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET .

    $default  reduce using rule 122 (enum_statement)


State 191

  124 enum_list: enum_list COMMA . one_val
  125 one_val: . IDENT
  126        | . IDENT ASSIGN_OP value

    IDENT  shift, and go to state 177

    one_val  go to state 202


State 192

  128 func_call: IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN .

    $default  reduce using rule 128 (func_call)


State 193

   15 $@1: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@1 declaration
   17             | . declarations declaration
   19 tail: LEFT_CURLY_BRACKET statements . RIGHT_CURLY_BRACKET
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31 simpleExp: . simpleExp OR_OP andExp
   32          | . andExp
   33 andExp: . andExp AND_OP
   34       | . bitRelExp
   35 bitRelExp: . bitRelExp BIT_OR_OP relExp
   36          | . bitRelExp AND relExp
   37          | . bitRelExp BIT_XOR_OP relExp
   38          | . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
   76 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   77 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   78 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   79 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   80 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   88 return_statement: . RETURN return_val SEMICOLON
   91 expression_statement: . expression SEMICOLON
   94 statements: statements . statement
   95 statement: . if_statement
   96          | . while_statement
   97          | . for_statement
   98          | . do_statement
   99          | . switch_statement
  100          | . return_statement
  101          | . expression_statement
  102          | . declarations
  103          | . enum_statement
  104          | . func_call
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT                shift, and go to state 28
    CONST_INT            shift, and go to state 29
    CONST_FLOAT          shift, and go to state 30
    CONST_CHAR           shift, and go to state 31
    STRING_LITERAL       shift, and go to state 32
    IF                   shift, and go to state 33
    WHILE                shift, and go to state 34
    FOR                  shift, and go to state 35
    DO                   shift, and go to state 36
    SWITCH               shift, and go to state 37
    RETURN               shift, and go to state 38
    ENUM                 shift, and go to state 39
    LEFT_PAREN           shift, and go to state 40
    RIGHT_CURLY_BRACKET  shift, and go to state 203
    INC_OP               shift, and go to state 41
    DEC_OP               shift, and go to state 42
    NOT_OP               shift, and go to state 43

    $default  reduce using rule 15 ($@1)

    declarations          go to state 44
    $@1                   go to state 45
    assign                go to state 46
    expression            go to state 47
    simpleExp             go to state 48
    andExp                go to state 49
    bitRelExp             go to state 50
    relExp                go to state 51
    bitshiftExp           go to state 52
    sumExp                go to state 53
    mulExp                go to state 54
    unaryExp              go to state 55
    value                 go to state 56
    if_statement          go to state 57
    while_statement       go to state 58
    for_statement         go to state 59
    do_statement          go to state 60
    switch_statement      go to state 61
    return_statement      go to state 62
    expression_statement  go to state 63
    statement             go to state 127
    enum_statement        go to state 66
    func_call             go to state 67


State 194

   71 else_if: ELIF . LEFT_PAREN bool_expression RIGHT_PAREN tail

    LEFT_PAREN  shift, and go to state 204


State 195

   72 else_if: else_if . ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   74 else_part: . ELSE tail
   75          | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   76 if_statement: IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if . else_part

    ELSE  shift, and go to state 205
    ELIF  shift, and go to state 206

    ELSE      [reduce using rule 75 (else_part)]
    ELIF      [reduce using rule 75 (else_part)]
    $default  reduce using rule 75 (else_part)

    else_part  go to state 207


State 196

   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31 simpleExp: . simpleExp OR_OP andExp
   32          | . andExp
   33 andExp: . andExp AND_OP
   34       | . bitRelExp
   35 bitRelExp: . bitRelExp BIT_OR_OP relExp
   36          | . bitRelExp AND relExp
   37          | . bitRelExp BIT_XOR_OP relExp
   38          | . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
   78 for_statement: FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON . expression RIGHT_PAREN tail_inloop

    IDENT           shift, and go to state 74
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    assign       go to state 46
    expression   go to state 208
    simpleExp    go to state 48
    andExp       go to state 49
    bitRelExp    go to state 50
    relExp       go to state 51
    bitshiftExp  go to state 52
    sumExp       go to state 53
    mulExp       go to state 54
    unaryExp     go to state 55
    value        go to state 56


State 197

   79 do_statement: DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN . SEMICOLON

    SEMICOLON  shift, and go to state 209


State 198

   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31 simpleExp: . simpleExp OR_OP andExp
   32          | . andExp
   33 andExp: . andExp AND_OP
   34       | . bitRelExp
   35 bitRelExp: . bitRelExp BIT_OR_OP relExp
   36          | . bitRelExp AND relExp
   37          | . bitRelExp BIT_XOR_OP relExp
   38          | . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
   85 case: CASE . expression COLON statements BREAK SEMICOLON

    IDENT           shift, and go to state 74
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    assign       go to state 46
    expression   go to state 210
    simpleExp    go to state 48
    andExp       go to state 49
    bitRelExp    go to state 50
    relExp       go to state 51
    bitshiftExp  go to state 52
    sumExp       go to state 53
    mulExp       go to state 54
    unaryExp     go to state 55
    value        go to state 56


State 199

   80 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases . RIGHT_CURLY_BRACKET
   82 cases: cases . case
   83      | cases . default
   84 default: . DEFAULT COLON statements BREAK SEMICOLON
   85 case: . CASE expression COLON statements BREAK SEMICOLON

    CASE                 shift, and go to state 198
    DEFAULT              shift, and go to state 211
    RIGHT_CURLY_BRACKET  shift, and go to state 212

    default  go to state 213
    case     go to state 214


State 200

   81 cases: case .

    $default  reduce using rule 81 (cases)


State 201

  126 one_val: IDENT ASSIGN_OP value .

    $default  reduce using rule 126 (one_val)


State 202

  124 enum_list: enum_list COMMA one_val .

    $default  reduce using rule 124 (enum_list)


State 203

   19 tail: LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET .

    $default  reduce using rule 19 (tail)


State 204

   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
   71 else_if: ELIF LEFT_PAREN . bool_expression RIGHT_PAREN tail

    IDENT           shift, and go to state 139
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    TRUE_TOKEN      shift, and go to state 140
    FALSE_TOKEN     shift, and go to state 141
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    bool_expression  go to state 215
    relExp           go to state 143
    bitshiftExp      go to state 52
    sumExp           go to state 53
    mulExp           go to state 54
    unaryExp         go to state 55
    value            go to state 56


State 205

   15 $@1: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@1 declaration
   17             | . declarations declaration
   18 tail: . statements
   19     | . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31 simpleExp: . simpleExp OR_OP andExp
   32          | . andExp
   33 andExp: . andExp AND_OP
   34       | . bitRelExp
   35 bitRelExp: . bitRelExp BIT_OR_OP relExp
   36          | . bitRelExp AND relExp
   37          | . bitRelExp BIT_XOR_OP relExp
   38          | . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
   74 else_part: ELSE . tail
   76 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   77 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   78 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   79 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   80 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   88 return_statement: . RETURN return_val SEMICOLON
   91 expression_statement: . expression SEMICOLON
   92 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   93           | . statement
   94           | . statements statement
   95 statement: . if_statement
   96          | . while_statement
   97          | . for_statement
   98          | . do_statement
   99          | . switch_statement
  100          | . return_statement
  101          | . expression_statement
  102          | . declarations
  103          | . enum_statement
  104          | . func_call
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT               shift, and go to state 28
    CONST_INT           shift, and go to state 29
    CONST_FLOAT         shift, and go to state 30
    CONST_CHAR          shift, and go to state 31
    STRING_LITERAL      shift, and go to state 32
    IF                  shift, and go to state 33
    WHILE               shift, and go to state 34
    FOR                 shift, and go to state 35
    DO                  shift, and go to state 36
    SWITCH              shift, and go to state 37
    RETURN              shift, and go to state 38
    ENUM                shift, and go to state 39
    LEFT_PAREN          shift, and go to state 40
    LEFT_CURLY_BRACKET  shift, and go to state 182
    INC_OP              shift, and go to state 41
    DEC_OP              shift, and go to state 42
    NOT_OP              shift, and go to state 43

    INTEGER              reduce using rule 15 ($@1)
    INTEGER              [reduce using rule 92 (statements)]
    FLOAT                reduce using rule 15 ($@1)
    FLOAT                [reduce using rule 92 (statements)]
    DOUBLE               reduce using rule 15 ($@1)
    DOUBLE               [reduce using rule 92 (statements)]
    VOID                 reduce using rule 15 ($@1)
    VOID                 [reduce using rule 92 (statements)]
    BOOLEAN              reduce using rule 15 ($@1)
    BOOLEAN              [reduce using rule 92 (statements)]
    CHAR                 reduce using rule 15 ($@1)
    CHAR                 [reduce using rule 92 (statements)]
    CONST                reduce using rule 15 ($@1)
    CONST                [reduce using rule 92 (statements)]
    IDENT                [reduce using rule 92 (statements)]
    CONST_INT            [reduce using rule 92 (statements)]
    CONST_FLOAT          [reduce using rule 92 (statements)]
    CONST_CHAR           [reduce using rule 92 (statements)]
    STRING_LITERAL       [reduce using rule 92 (statements)]
    IF                   [reduce using rule 92 (statements)]
    ELSE                 reduce using rule 92 (statements)
    ELIF                 reduce using rule 92 (statements)
    WHILE                [reduce using rule 92 (statements)]
    FOR                  [reduce using rule 92 (statements)]
    DO                   [reduce using rule 92 (statements)]
    SWITCH               [reduce using rule 92 (statements)]
    RETURN               [reduce using rule 92 (statements)]
    BREAK                reduce using rule 92 (statements)
    CONTINUE             reduce using rule 92 (statements)
    ENUM                 [reduce using rule 92 (statements)]
    LEFT_PAREN           [reduce using rule 92 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 92 (statements)
    INC_OP               [reduce using rule 92 (statements)]
    DEC_OP               [reduce using rule 92 (statements)]
    NOT_OP               [reduce using rule 92 (statements)]
    $default             reduce using rule 15 ($@1)

    declarations          go to state 44
    $@1                   go to state 45
    tail                  go to state 216
    assign                go to state 46
    expression            go to state 47
    simpleExp             go to state 48
    andExp                go to state 49
    bitRelExp             go to state 50
    relExp                go to state 51
    bitshiftExp           go to state 52
    sumExp                go to state 53
    mulExp                go to state 54
    unaryExp              go to state 55
    value                 go to state 56
    if_statement          go to state 57
    while_statement       go to state 58
    for_statement         go to state 59
    do_statement          go to state 60
    switch_statement      go to state 61
    return_statement      go to state 62
    expression_statement  go to state 63
    statements            go to state 184
    statement             go to state 65
    enum_statement        go to state 66
    func_call             go to state 67


State 206

   72 else_if: else_if ELIF . LEFT_PAREN bool_expression RIGHT_PAREN tail

    LEFT_PAREN  shift, and go to state 217


State 207

   76 if_statement: IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part .

    $default  reduce using rule 76 (if_statement)


State 208

   78 for_statement: FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression . RIGHT_PAREN tail_inloop

    RIGHT_PAREN  shift, and go to state 218


State 209

   79 do_statement: DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON .

    $default  reduce using rule 79 (do_statement)


State 210

   85 case: CASE expression . COLON statements BREAK SEMICOLON

    COLON  shift, and go to state 219


State 211

   84 default: DEFAULT . COLON statements BREAK SEMICOLON

    COLON  shift, and go to state 220


State 212

   80 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .

    $default  reduce using rule 80 (switch_statement)


State 213

   83 cases: cases default .

    $default  reduce using rule 83 (cases)


State 214

   82 cases: cases case .

    $default  reduce using rule 82 (cases)


State 215

   71 else_if: ELIF LEFT_PAREN bool_expression . RIGHT_PAREN tail

    RIGHT_PAREN  shift, and go to state 221


State 216

   74 else_part: ELSE tail .

    $default  reduce using rule 74 (else_part)


State 217

   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
   72 else_if: else_if ELIF LEFT_PAREN . bool_expression RIGHT_PAREN tail

    IDENT           shift, and go to state 139
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    TRUE_TOKEN      shift, and go to state 140
    FALSE_TOKEN     shift, and go to state 141
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    bool_expression  go to state 222
    relExp           go to state 143
    bitshiftExp      go to state 52
    sumExp           go to state 53
    mulExp           go to state 54
    unaryExp         go to state 55
    value            go to state 56


State 218

   15 $@1: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@1 declaration
   17             | . declarations declaration
   20 tail_inloop: . statements_inloop
   21            | . LEFT_CURLY_BRACKET statements_inloop RIGHT_CURLY_BRACKET
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31 simpleExp: . simpleExp OR_OP andExp
   32          | . andExp
   33 andExp: . andExp AND_OP
   34       | . bitRelExp
   35 bitRelExp: . bitRelExp BIT_OR_OP relExp
   36          | . bitRelExp AND relExp
   37          | . bitRelExp BIT_XOR_OP relExp
   38          | . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
   76 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   77 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   78 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   78              | FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN . tail_inloop
   79 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   80 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   88 return_statement: . RETURN return_val SEMICOLON
   89 break_statement: . BREAK SEMICOLON
   90 continue_statement: . CONTINUE SEMICOLON
   91 expression_statement: . expression SEMICOLON
   95 statement: . if_statement
   96          | . while_statement
   97          | . for_statement
   98          | . do_statement
   99          | . switch_statement
  100          | . return_statement
  101          | . expression_statement
  102          | . declarations
  103          | . enum_statement
  104          | . func_call
  105 statement_inloop: . statement
  106                 | . break_statement
  107                 | . continue_statement
  108 statements_inloop: . statement_inloop
  109                  | . statements_inloop statement_inloop
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT               shift, and go to state 28
    CONST_INT           shift, and go to state 29
    CONST_FLOAT         shift, and go to state 30
    CONST_CHAR          shift, and go to state 31
    STRING_LITERAL      shift, and go to state 32
    IF                  shift, and go to state 33
    WHILE               shift, and go to state 34
    FOR                 shift, and go to state 35
    DO                  shift, and go to state 36
    SWITCH              shift, and go to state 37
    RETURN              shift, and go to state 38
    BREAK               shift, and go to state 83
    CONTINUE            shift, and go to state 84
    ENUM                shift, and go to state 39
    LEFT_PAREN          shift, and go to state 40
    LEFT_CURLY_BRACKET  shift, and go to state 85
    INC_OP              shift, and go to state 41
    DEC_OP              shift, and go to state 42
    NOT_OP              shift, and go to state 43

    $default  reduce using rule 15 ($@1)

    declarations          go to state 44
    $@1                   go to state 45
    tail_inloop           go to state 223
    assign                go to state 46
    expression            go to state 47
    simpleExp             go to state 48
    andExp                go to state 49
    bitRelExp             go to state 50
    relExp                go to state 51
    bitshiftExp           go to state 52
    sumExp                go to state 53
    mulExp                go to state 54
    unaryExp              go to state 55
    value                 go to state 56
    if_statement          go to state 57
    while_statement       go to state 58
    for_statement         go to state 59
    do_statement          go to state 60
    switch_statement      go to state 61
    return_statement      go to state 62
    break_statement       go to state 87
    continue_statement    go to state 88
    expression_statement  go to state 63
    statement             go to state 89
    statement_inloop      go to state 90
    statements_inloop     go to state 91
    enum_statement        go to state 66
    func_call             go to state 67


State 219

   15 $@1: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@1 declaration
   17             | . declarations declaration
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31 simpleExp: . simpleExp OR_OP andExp
   32          | . andExp
   33 andExp: . andExp AND_OP
   34       | . bitRelExp
   35 bitRelExp: . bitRelExp BIT_OR_OP relExp
   36          | . bitRelExp AND relExp
   37          | . bitRelExp BIT_XOR_OP relExp
   38          | . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
   76 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   77 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   78 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   79 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   80 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   85 case: CASE expression COLON . statements BREAK SEMICOLON
   88 return_statement: . RETURN return_val SEMICOLON
   91 expression_statement: . expression SEMICOLON
   92 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, ENUM, LEFT_PAREN, INC_OP, DEC_OP, NOT_OP]
   93           | . statement
   94           | . statements statement
   95 statement: . if_statement
   96          | . while_statement
   97          | . for_statement
   98          | . do_statement
   99          | . switch_statement
  100          | . return_statement
  101          | . expression_statement
  102          | . declarations
  103          | . enum_statement
  104          | . func_call
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 28
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    IF              shift, and go to state 33
    WHILE           shift, and go to state 34
    FOR             shift, and go to state 35
    DO              shift, and go to state 36
    SWITCH          shift, and go to state 37
    RETURN          shift, and go to state 38
    ENUM            shift, and go to state 39
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    INTEGER         reduce using rule 15 ($@1)
    INTEGER         [reduce using rule 92 (statements)]
    FLOAT           reduce using rule 15 ($@1)
    FLOAT           [reduce using rule 92 (statements)]
    DOUBLE          reduce using rule 15 ($@1)
    DOUBLE          [reduce using rule 92 (statements)]
    VOID            reduce using rule 15 ($@1)
    VOID            [reduce using rule 92 (statements)]
    BOOLEAN         reduce using rule 15 ($@1)
    BOOLEAN         [reduce using rule 92 (statements)]
    CHAR            reduce using rule 15 ($@1)
    CHAR            [reduce using rule 92 (statements)]
    CONST           reduce using rule 15 ($@1)
    CONST           [reduce using rule 92 (statements)]
    IDENT           [reduce using rule 92 (statements)]
    CONST_INT       [reduce using rule 92 (statements)]
    CONST_FLOAT     [reduce using rule 92 (statements)]
    CONST_CHAR      [reduce using rule 92 (statements)]
    STRING_LITERAL  [reduce using rule 92 (statements)]
    IF              [reduce using rule 92 (statements)]
    WHILE           [reduce using rule 92 (statements)]
    FOR             [reduce using rule 92 (statements)]
    DO              [reduce using rule 92 (statements)]
    SWITCH          [reduce using rule 92 (statements)]
    RETURN          [reduce using rule 92 (statements)]
    BREAK           reduce using rule 92 (statements)
    ENUM            [reduce using rule 92 (statements)]
    LEFT_PAREN      [reduce using rule 92 (statements)]
    INC_OP          [reduce using rule 92 (statements)]
    DEC_OP          [reduce using rule 92 (statements)]
    NOT_OP          [reduce using rule 92 (statements)]
    $default        reduce using rule 15 ($@1)

    declarations          go to state 44
    $@1                   go to state 45
    assign                go to state 46
    expression            go to state 47
    simpleExp             go to state 48
    andExp                go to state 49
    bitRelExp             go to state 50
    relExp                go to state 51
    bitshiftExp           go to state 52
    sumExp                go to state 53
    mulExp                go to state 54
    unaryExp              go to state 55
    value                 go to state 56
    if_statement          go to state 57
    while_statement       go to state 58
    for_statement         go to state 59
    do_statement          go to state 60
    switch_statement      go to state 61
    return_statement      go to state 62
    expression_statement  go to state 63
    statements            go to state 224
    statement             go to state 65
    enum_statement        go to state 66
    func_call             go to state 67


State 220

   15 $@1: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@1 declaration
   17             | . declarations declaration
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31 simpleExp: . simpleExp OR_OP andExp
   32          | . andExp
   33 andExp: . andExp AND_OP
   34       | . bitRelExp
   35 bitRelExp: . bitRelExp BIT_OR_OP relExp
   36          | . bitRelExp AND relExp
   37          | . bitRelExp BIT_XOR_OP relExp
   38          | . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
   76 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   77 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   78 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   79 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   80 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   84 default: DEFAULT COLON . statements BREAK SEMICOLON
   88 return_statement: . RETURN return_val SEMICOLON
   91 expression_statement: . expression SEMICOLON
   92 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, ENUM, LEFT_PAREN, INC_OP, DEC_OP, NOT_OP]
   93           | . statement
   94           | . statements statement
   95 statement: . if_statement
   96          | . while_statement
   97          | . for_statement
   98          | . do_statement
   99          | . switch_statement
  100          | . return_statement
  101          | . expression_statement
  102          | . declarations
  103          | . enum_statement
  104          | . func_call
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 28
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    IF              shift, and go to state 33
    WHILE           shift, and go to state 34
    FOR             shift, and go to state 35
    DO              shift, and go to state 36
    SWITCH          shift, and go to state 37
    RETURN          shift, and go to state 38
    ENUM            shift, and go to state 39
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    INTEGER         reduce using rule 15 ($@1)
    INTEGER         [reduce using rule 92 (statements)]
    FLOAT           reduce using rule 15 ($@1)
    FLOAT           [reduce using rule 92 (statements)]
    DOUBLE          reduce using rule 15 ($@1)
    DOUBLE          [reduce using rule 92 (statements)]
    VOID            reduce using rule 15 ($@1)
    VOID            [reduce using rule 92 (statements)]
    BOOLEAN         reduce using rule 15 ($@1)
    BOOLEAN         [reduce using rule 92 (statements)]
    CHAR            reduce using rule 15 ($@1)
    CHAR            [reduce using rule 92 (statements)]
    CONST           reduce using rule 15 ($@1)
    CONST           [reduce using rule 92 (statements)]
    IDENT           [reduce using rule 92 (statements)]
    CONST_INT       [reduce using rule 92 (statements)]
    CONST_FLOAT     [reduce using rule 92 (statements)]
    CONST_CHAR      [reduce using rule 92 (statements)]
    STRING_LITERAL  [reduce using rule 92 (statements)]
    IF              [reduce using rule 92 (statements)]
    WHILE           [reduce using rule 92 (statements)]
    FOR             [reduce using rule 92 (statements)]
    DO              [reduce using rule 92 (statements)]
    SWITCH          [reduce using rule 92 (statements)]
    RETURN          [reduce using rule 92 (statements)]
    BREAK           reduce using rule 92 (statements)
    ENUM            [reduce using rule 92 (statements)]
    LEFT_PAREN      [reduce using rule 92 (statements)]
    INC_OP          [reduce using rule 92 (statements)]
    DEC_OP          [reduce using rule 92 (statements)]
    NOT_OP          [reduce using rule 92 (statements)]
    $default        reduce using rule 15 ($@1)

    declarations          go to state 44
    $@1                   go to state 45
    assign                go to state 46
    expression            go to state 47
    simpleExp             go to state 48
    andExp                go to state 49
    bitRelExp             go to state 50
    relExp                go to state 51
    bitshiftExp           go to state 52
    sumExp                go to state 53
    mulExp                go to state 54
    unaryExp              go to state 55
    value                 go to state 56
    if_statement          go to state 57
    while_statement       go to state 58
    for_statement         go to state 59
    do_statement          go to state 60
    switch_statement      go to state 61
    return_statement      go to state 62
    expression_statement  go to state 63
    statements            go to state 225
    statement             go to state 65
    enum_statement        go to state 66
    func_call             go to state 67


State 221

   15 $@1: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@1 declaration
   17             | . declarations declaration
   18 tail: . statements
   19     | . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31 simpleExp: . simpleExp OR_OP andExp
   32          | . andExp
   33 andExp: . andExp AND_OP
   34       | . bitRelExp
   35 bitRelExp: . bitRelExp BIT_OR_OP relExp
   36          | . bitRelExp AND relExp
   37          | . bitRelExp BIT_XOR_OP relExp
   38          | . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
   71 else_if: ELIF LEFT_PAREN bool_expression RIGHT_PAREN . tail
   76 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   77 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   78 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   79 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   80 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   88 return_statement: . RETURN return_val SEMICOLON
   91 expression_statement: . expression SEMICOLON
   92 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   93           | . statement
   94           | . statements statement
   95 statement: . if_statement
   96          | . while_statement
   97          | . for_statement
   98          | . do_statement
   99          | . switch_statement
  100          | . return_statement
  101          | . expression_statement
  102          | . declarations
  103          | . enum_statement
  104          | . func_call
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT               shift, and go to state 28
    CONST_INT           shift, and go to state 29
    CONST_FLOAT         shift, and go to state 30
    CONST_CHAR          shift, and go to state 31
    STRING_LITERAL      shift, and go to state 32
    IF                  shift, and go to state 33
    WHILE               shift, and go to state 34
    FOR                 shift, and go to state 35
    DO                  shift, and go to state 36
    SWITCH              shift, and go to state 37
    RETURN              shift, and go to state 38
    ENUM                shift, and go to state 39
    LEFT_PAREN          shift, and go to state 40
    LEFT_CURLY_BRACKET  shift, and go to state 182
    INC_OP              shift, and go to state 41
    DEC_OP              shift, and go to state 42
    NOT_OP              shift, and go to state 43

    INTEGER              reduce using rule 15 ($@1)
    INTEGER              [reduce using rule 92 (statements)]
    FLOAT                reduce using rule 15 ($@1)
    FLOAT                [reduce using rule 92 (statements)]
    DOUBLE               reduce using rule 15 ($@1)
    DOUBLE               [reduce using rule 92 (statements)]
    VOID                 reduce using rule 15 ($@1)
    VOID                 [reduce using rule 92 (statements)]
    BOOLEAN              reduce using rule 15 ($@1)
    BOOLEAN              [reduce using rule 92 (statements)]
    CHAR                 reduce using rule 15 ($@1)
    CHAR                 [reduce using rule 92 (statements)]
    CONST                reduce using rule 15 ($@1)
    CONST                [reduce using rule 92 (statements)]
    IDENT                [reduce using rule 92 (statements)]
    CONST_INT            [reduce using rule 92 (statements)]
    CONST_FLOAT          [reduce using rule 92 (statements)]
    CONST_CHAR           [reduce using rule 92 (statements)]
    STRING_LITERAL       [reduce using rule 92 (statements)]
    IF                   [reduce using rule 92 (statements)]
    ELSE                 reduce using rule 92 (statements)
    ELIF                 reduce using rule 92 (statements)
    WHILE                [reduce using rule 92 (statements)]
    FOR                  [reduce using rule 92 (statements)]
    DO                   [reduce using rule 92 (statements)]
    SWITCH               [reduce using rule 92 (statements)]
    RETURN               [reduce using rule 92 (statements)]
    BREAK                reduce using rule 92 (statements)
    CONTINUE             reduce using rule 92 (statements)
    ENUM                 [reduce using rule 92 (statements)]
    LEFT_PAREN           [reduce using rule 92 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 92 (statements)
    INC_OP               [reduce using rule 92 (statements)]
    DEC_OP               [reduce using rule 92 (statements)]
    NOT_OP               [reduce using rule 92 (statements)]
    $default             reduce using rule 15 ($@1)

    declarations          go to state 44
    $@1                   go to state 45
    tail                  go to state 226
    assign                go to state 46
    expression            go to state 47
    simpleExp             go to state 48
    andExp                go to state 49
    bitRelExp             go to state 50
    relExp                go to state 51
    bitshiftExp           go to state 52
    sumExp                go to state 53
    mulExp                go to state 54
    unaryExp              go to state 55
    value                 go to state 56
    if_statement          go to state 57
    while_statement       go to state 58
    for_statement         go to state 59
    do_statement          go to state 60
    switch_statement      go to state 61
    return_statement      go to state 62
    expression_statement  go to state 63
    statements            go to state 184
    statement             go to state 65
    enum_statement        go to state 66
    func_call             go to state 67


State 222

   72 else_if: else_if ELIF LEFT_PAREN bool_expression . RIGHT_PAREN tail

    RIGHT_PAREN  shift, and go to state 227


State 223

   78 for_statement: FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop .

    $default  reduce using rule 78 (for_statement)


State 224

   15 $@1: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@1 declaration
   17             | . declarations declaration
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31 simpleExp: . simpleExp OR_OP andExp
   32          | . andExp
   33 andExp: . andExp AND_OP
   34       | . bitRelExp
   35 bitRelExp: . bitRelExp BIT_OR_OP relExp
   36          | . bitRelExp AND relExp
   37          | . bitRelExp BIT_XOR_OP relExp
   38          | . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
   76 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   77 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   78 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   79 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   80 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   85 case: CASE expression COLON statements . BREAK SEMICOLON
   88 return_statement: . RETURN return_val SEMICOLON
   91 expression_statement: . expression SEMICOLON
   94 statements: statements . statement
   95 statement: . if_statement
   96          | . while_statement
   97          | . for_statement
   98          | . do_statement
   99          | . switch_statement
  100          | . return_statement
  101          | . expression_statement
  102          | . declarations
  103          | . enum_statement
  104          | . func_call
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 28
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    IF              shift, and go to state 33
    WHILE           shift, and go to state 34
    FOR             shift, and go to state 35
    DO              shift, and go to state 36
    SWITCH          shift, and go to state 37
    RETURN          shift, and go to state 38
    BREAK           shift, and go to state 228
    ENUM            shift, and go to state 39
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    $default  reduce using rule 15 ($@1)

    declarations          go to state 44
    $@1                   go to state 45
    assign                go to state 46
    expression            go to state 47
    simpleExp             go to state 48
    andExp                go to state 49
    bitRelExp             go to state 50
    relExp                go to state 51
    bitshiftExp           go to state 52
    sumExp                go to state 53
    mulExp                go to state 54
    unaryExp              go to state 55
    value                 go to state 56
    if_statement          go to state 57
    while_statement       go to state 58
    for_statement         go to state 59
    do_statement          go to state 60
    switch_statement      go to state 61
    return_statement      go to state 62
    expression_statement  go to state 63
    statement             go to state 127
    enum_statement        go to state 66
    func_call             go to state 67


State 225

   15 $@1: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@1 declaration
   17             | . declarations declaration
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31 simpleExp: . simpleExp OR_OP andExp
   32          | . andExp
   33 andExp: . andExp AND_OP
   34       | . bitRelExp
   35 bitRelExp: . bitRelExp BIT_OR_OP relExp
   36          | . bitRelExp AND relExp
   37          | . bitRelExp BIT_XOR_OP relExp
   38          | . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
   76 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   77 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   78 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   79 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   80 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   84 default: DEFAULT COLON statements . BREAK SEMICOLON
   88 return_statement: . RETURN return_val SEMICOLON
   91 expression_statement: . expression SEMICOLON
   94 statements: statements . statement
   95 statement: . if_statement
   96          | . while_statement
   97          | . for_statement
   98          | . do_statement
   99          | . switch_statement
  100          | . return_statement
  101          | . expression_statement
  102          | . declarations
  103          | . enum_statement
  104          | . func_call
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 28
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    IF              shift, and go to state 33
    WHILE           shift, and go to state 34
    FOR             shift, and go to state 35
    DO              shift, and go to state 36
    SWITCH          shift, and go to state 37
    RETURN          shift, and go to state 38
    BREAK           shift, and go to state 229
    ENUM            shift, and go to state 39
    LEFT_PAREN      shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    NOT_OP          shift, and go to state 43

    $default  reduce using rule 15 ($@1)

    declarations          go to state 44
    $@1                   go to state 45
    assign                go to state 46
    expression            go to state 47
    simpleExp             go to state 48
    andExp                go to state 49
    bitRelExp             go to state 50
    relExp                go to state 51
    bitshiftExp           go to state 52
    sumExp                go to state 53
    mulExp                go to state 54
    unaryExp              go to state 55
    value                 go to state 56
    if_statement          go to state 57
    while_statement       go to state 58
    for_statement         go to state 59
    do_statement          go to state 60
    switch_statement      go to state 61
    return_statement      go to state 62
    expression_statement  go to state 63
    statement             go to state 127
    enum_statement        go to state 66
    func_call             go to state 67


State 226

   71 else_if: ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail .

    $default  reduce using rule 71 (else_if)


State 227

   15 $@1: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@1 declaration
   17             | . declarations declaration
   18 tail: . statements
   19     | . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31 simpleExp: . simpleExp OR_OP andExp
   32          | . andExp
   33 andExp: . andExp AND_OP
   34       | . bitRelExp
   35 bitRelExp: . bitRelExp BIT_OR_OP relExp
   36          | . bitRelExp AND relExp
   37          | . bitRelExp BIT_XOR_OP relExp
   38          | . relExp
   47 relExp: . relExp op bitshiftExp
   48       | . bitshiftExp
   49 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   50            | . bitshiftExp BIT_RSHIFT_OP sumExp
   51            | . sumExp
   57 sumExp: . sumExp pls_min mulExp
   58       | . mulExp
   59 mulExp: . mulExp mul_div unaryExp
   60       | . unaryExp
   61 unaryExp: . INC_OP IDENT
   62         | . DEC_OP IDENT
   63         | . NOT_OP IDENT
   64         | . IDENT
   65         | . value
   66         | . LEFT_PAREN expression RIGHT_PAREN
   67 value: . CONST_INT
   68      | . CONST_FLOAT
   69      | . CONST_CHAR
   70      | . STRING_LITERAL
   72 else_if: else_if ELIF LEFT_PAREN bool_expression RIGHT_PAREN . tail
   76 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   77 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   78 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   79 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   80 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   88 return_statement: . RETURN return_val SEMICOLON
   91 expression_statement: . expression SEMICOLON
   92 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   93           | . statement
   94           | . statements statement
   95 statement: . if_statement
   96          | . while_statement
   97          | . for_statement
   98          | . do_statement
   99          | . switch_statement
  100          | . return_statement
  101          | . expression_statement
  102          | . declarations
  103          | . enum_statement
  104          | . func_call
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT               shift, and go to state 28
    CONST_INT           shift, and go to state 29
    CONST_FLOAT         shift, and go to state 30
    CONST_CHAR          shift, and go to state 31
    STRING_LITERAL      shift, and go to state 32
    IF                  shift, and go to state 33
    WHILE               shift, and go to state 34
    FOR                 shift, and go to state 35
    DO                  shift, and go to state 36
    SWITCH              shift, and go to state 37
    RETURN              shift, and go to state 38
    ENUM                shift, and go to state 39
    LEFT_PAREN          shift, and go to state 40
    LEFT_CURLY_BRACKET  shift, and go to state 182
    INC_OP              shift, and go to state 41
    DEC_OP              shift, and go to state 42
    NOT_OP              shift, and go to state 43

    INTEGER              reduce using rule 15 ($@1)
    INTEGER              [reduce using rule 92 (statements)]
    FLOAT                reduce using rule 15 ($@1)
    FLOAT                [reduce using rule 92 (statements)]
    DOUBLE               reduce using rule 15 ($@1)
    DOUBLE               [reduce using rule 92 (statements)]
    VOID                 reduce using rule 15 ($@1)
    VOID                 [reduce using rule 92 (statements)]
    BOOLEAN              reduce using rule 15 ($@1)
    BOOLEAN              [reduce using rule 92 (statements)]
    CHAR                 reduce using rule 15 ($@1)
    CHAR                 [reduce using rule 92 (statements)]
    CONST                reduce using rule 15 ($@1)
    CONST                [reduce using rule 92 (statements)]
    IDENT                [reduce using rule 92 (statements)]
    CONST_INT            [reduce using rule 92 (statements)]
    CONST_FLOAT          [reduce using rule 92 (statements)]
    CONST_CHAR           [reduce using rule 92 (statements)]
    STRING_LITERAL       [reduce using rule 92 (statements)]
    IF                   [reduce using rule 92 (statements)]
    ELSE                 reduce using rule 92 (statements)
    ELIF                 reduce using rule 92 (statements)
    WHILE                [reduce using rule 92 (statements)]
    FOR                  [reduce using rule 92 (statements)]
    DO                   [reduce using rule 92 (statements)]
    SWITCH               [reduce using rule 92 (statements)]
    RETURN               [reduce using rule 92 (statements)]
    BREAK                reduce using rule 92 (statements)
    CONTINUE             reduce using rule 92 (statements)
    ENUM                 [reduce using rule 92 (statements)]
    LEFT_PAREN           [reduce using rule 92 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 92 (statements)
    INC_OP               [reduce using rule 92 (statements)]
    DEC_OP               [reduce using rule 92 (statements)]
    NOT_OP               [reduce using rule 92 (statements)]
    $default             reduce using rule 15 ($@1)

    declarations          go to state 44
    $@1                   go to state 45
    tail                  go to state 230
    assign                go to state 46
    expression            go to state 47
    simpleExp             go to state 48
    andExp                go to state 49
    bitRelExp             go to state 50
    relExp                go to state 51
    bitshiftExp           go to state 52
    sumExp                go to state 53
    mulExp                go to state 54
    unaryExp              go to state 55
    value                 go to state 56
    if_statement          go to state 57
    while_statement       go to state 58
    for_statement         go to state 59
    do_statement          go to state 60
    switch_statement      go to state 61
    return_statement      go to state 62
    expression_statement  go to state 63
    statements            go to state 184
    statement             go to state 65
    enum_statement        go to state 66
    func_call             go to state 67


State 228

   85 case: CASE expression COLON statements BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 231


State 229

   84 default: DEFAULT COLON statements BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 232


State 230

   72 else_if: else_if ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail .

    $default  reduce using rule 72 (else_if)


State 231

   85 case: CASE expression COLON statements BREAK SEMICOLON .

    $default  reduce using rule 85 (case)


State 232

   84 default: DEFAULT COLON statements BREAK SEMICOLON .

    $default  reduce using rule 84 (default)
