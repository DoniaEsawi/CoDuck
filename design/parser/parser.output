Terminals unused in grammar

    UNTIL
    LEFT_SQ_BRACKET
    RIGHT_SQ_BRACKET
    QUESTION_MARK
    DOT
    BIT_NOT_OP


Rules useless in parser due to conflicts

  127 func_call: IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN


State 6 conflicts: 19 shift/reduce, 7 reduce/reduce
State 7 conflicts: 1 shift/reduce
State 21 conflicts: 4 reduce/reduce
State 39 conflicts: 28 reduce/reduce
State 40 conflicts: 1 shift/reduce, 7 reduce/reduce
State 47 conflicts: 2 shift/reduce, 4 reduce/reduce
State 65 conflicts: 19 shift/reduce, 7 reduce/reduce
State 67 conflicts: 1 reduce/reduce
State 84 conflicts: 21 shift/reduce, 7 reduce/reduce
State 129 conflicts: 4 reduce/reduce
State 147 conflicts: 2 shift/reduce
State 148 conflicts: 2 shift/reduce
State 149 conflicts: 2 shift/reduce
State 150 conflicts: 2 shift/reduce
State 164 conflicts: 19 shift/reduce, 7 reduce/reduce
State 179 conflicts: 19 shift/reduce, 7 reduce/reduce
State 180 conflicts: 1 shift/reduce
State 181 conflicts: 19 shift/reduce, 7 reduce/reduce
State 189 conflicts: 4 reduce/reduce
State 192 conflicts: 2 shift/reduce
State 202 conflicts: 19 shift/reduce, 7 reduce/reduce
State 216 conflicts: 19 shift/reduce, 7 reduce/reduce
State 217 conflicts: 19 shift/reduce, 7 reduce/reduce
State 218 conflicts: 19 shift/reduce, 7 reduce/reduce
State 224 conflicts: 19 shift/reduce, 7 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: program function
    2        | functions
    3        | declarations statements

    4 type: INTEGER
    5     | FLOAT
    6     | DOUBLE
    7     | VOID
    8     | BOOLEAN
    9     | CHAR
   10     | STRING

   11 beforedecl: CONST
   12           | %empty

   13 declaration: beforedecl type IDENT SEMICOLON
   14            | beforedecl type IDENT ASSIGN_OP expression SEMICOLON

   15 declarations: declaration
   16             | declarations declaration

   17 tail: statements
   18     | LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET

   19 tail_inloop: statements_inloop
   20            | LEFT_CURLY_BRACKET statements_inloop RIGHT_CURLY_BRACKET

   21 bool_expression: relExp
   22                | TRUE_TOKEN
   23                | FALSE_TOKEN

   24 assign: IDENT ASSIGN_OP expression

   25 expression: assign
   26           | IDENT INC_OP
   27           | IDENT DEC_OP
   28           | simpleExp
   29           | IDENT
   30           | bool_expression
   31           | func_call

   32 simpleExp: simpleExp OR_OP andExp
   33          | andExp

   34 andExp: andExp AND_OP
   35       | bitRelExp

   36 bitRelExp: bitRelExp BIT_OR_OP relExp
   37          | bitRelExp AND relExp
   38          | bitRelExp BIT_XOR_OP relExp
   39          | relExp

   40 op: EQ_OP
   41   | NE_OP
   42   | GT_OP
   43   | LT_OP
   44   | LE_OP
   45   | GE_OP
   46   | OR_OP
   47   | AND_OP

   48 relExp: relExp op bitshiftExp
   49       | bitshiftExp

   50 bitshiftExp: bitshiftExp BIT_LSHIFT_OP sumExp
   51            | bitshiftExp BIT_RSHIFT_OP sumExp
   52            | sumExp

   53 pls_min: ADD_OP
   54        | SUB_OP

   55 mul_div: MUL_OP
   56        | DIV_OP
   57        | MOD_OP

   58 sumExp: sumExp pls_min mulExp
   59       | mulExp

   60 mulExp: mulExp mul_div unaryExp
   61       | unaryExp

   62 unaryExp: INC_OP IDENT
   63         | DEC_OP IDENT
   64         | NOT_OP IDENT
   65         | IDENT
   66         | value
   67         | LEFT_PAREN expression RIGHT_PAREN

   68 value: CONST_INT
   69      | CONST_FLOAT
   70      | CONST_CHAR
   71      | STRING_LITERAL

   72 else_if: ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   73        | else_if ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   74        | %empty

   75 else_part: ELSE tail
   76          | %empty

   77 if_statement: IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part

   78 while_statement: WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop

   79 for_statement: FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

   80 do_statement: DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON

   81 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

   82 cases: case
   83      | cases case
   84      | cases default

   85 default: DEFAULT COLON statements BREAK SEMICOLON

   86 case: CASE expression COLON statements BREAK SEMICOLON

   87 return_val: expression
   88           | %empty

   89 return_statement: RETURN return_val SEMICOLON

   90 break_statement: BREAK SEMICOLON

   91 continue_statement: CONTINUE SEMICOLON

   92 expression_statement: expression SEMICOLON

   93 statements: %empty
   94           | statement
   95           | statements statement

   96 statement: if_statement
   97          | while_statement
   98          | for_statement
   99          | do_statement
  100          | switch_statement
  101          | return_statement
  102          | expression_statement
  103          | declarations
  104          | enum_statement

  105 statement_inloop: statement
  106                 | break_statement
  107                 | continue_statement

  108 statements_inloop: statement_inloop
  109                  | statements_inloop statement_inloop

  110 functions: functions function
  111          | function

  112 function: function_head function_tail

  113 param_empty: parameters
  114            | %empty

  115 function_head: FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN type

  116 function_tail: LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET

  117 parameters: parameter
  118           | parameters COMMA parameter
  119           | %empty

  120 parameter: type IDENT

  121 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET

  122 enum_list: one_val
  123          | enum_list COMMA one_val

  124 one_val: IDENT
  125        | IDENT ASSIGN_OP value

  126 func_call: IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

  128 arguments: argument
  129          | arguments COMMA argument
  130          | %empty

  131 argument: expression


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INTEGER <int_val> (258) 4
    FLOAT <int_val> (259) 5
    DOUBLE <int_val> (260) 6
    VOID <int_val> (261) 7
    BOOLEAN <int_val> (262) 8
    CHAR <int_val> (263) 9
    CONST <int_val> (264) 11
    STRING <int_val> (265) 10
    IDENT <symbol_table_item> (266) 13 14 24 26 27 29 62 63 64 65 115 120 121 124 125 126 127
    CONST_INT <int_val> (267) 68
    CONST_FLOAT <double_val> (268) 69
    CONST_CHAR <char_val> (269) 70
    STRING_LITERAL <str_val> (270) 71
    IF <int_val> (271) 77
    ELSE <int_val> (272) 75
    ELIF <int_val> (273) 72 73
    WHILE <int_val> (274) 78 80
    FOR <int_val> (275) 79
    DO <int_val> (276) 80
    SWITCH <int_val> (277) 81
    CASE <int_val> (278) 86
    DEFAULT <int_val> (279) 85
    RETURN <int_val> (280) 89
    BREAK <int_val> (281) 85 86 90
    CONTINUE <int_val> (282) 91
    TRUE_TOKEN <int_val> (283) 22
    FALSE_TOKEN <int_val> (284) 23
    ENUM <int_val> (285) 121
    FUNC <int_val> (286) 115
    UNTIL <int_val> (287)
    LEFT_PAREN <int_val> (288) 67 72 73 77 78 79 80 81 115 126 127
    RIGHT_PAREN <int_val> (289) 67 72 73 77 78 79 80 81 115 126 127
    LEFT_CURLY_BRACKET <int_val> (290) 18 20 81 116 121
    RIGHT_CURLY_BRACKET <int_val> (291) 18 20 81 116 121
    LEFT_SQ_BRACKET <int_val> (292)
    RIGHT_SQ_BRACKET <int_val> (293)
    SEMICOLON <int_val> (294) 13 14 79 80 85 86 89 90 91 92
    COMMA <int_val> (295) 118 123 129
    COLON <int_val> (296) 85 86
    QUESTION_MARK <int_val> (297)
    DOT <int_val> (298)
    ADD_OP <int_val> (299) 53
    SUB_OP <int_val> (300) 54
    MUL_OP <int_val> (301) 55
    DIV_OP <int_val> (302) 56
    MOD_OP <int_val> (303) 57
    INC_OP <int_val> (304) 26 62
    DEC_OP <int_val> (305) 27 63
    OR_OP <int_val> (306) 32 46
    AND_OP <int_val> (307) 34 47
    NOT_OP <int_val> (308) 64
    BIT_OR_OP <int_val> (309) 36
    AND <int_val> (310) 37
    BIT_XOR_OP <int_val> (311) 38
    BIT_NOT_OP <int_val> (312)
    BIT_LSHIFT_OP <int_val> (313) 50
    BIT_RSHIFT_OP <int_val> (314) 51
    EQ_OP <int_val> (315) 40
    NE_OP <int_val> (316) 41
    GT_OP <int_val> (317) 42
    LT_OP <int_val> (318) 43
    GE_OP <int_val> (319) 45
    LE_OP <int_val> (320) 44
    ASSIGN_OP <int_val> (321) 14 24 125 127


Nonterminals, with rules where they appear

    $accept (67)
        on left: 0
    program (68)
        on left: 1 2 3
        on right: 0 1
    type (69)
        on left: 4 5 6 7 8 9 10
        on right: 13 14 115 120
    beforedecl (70)
        on left: 11 12
        on right: 13 14
    declaration (71)
        on left: 13 14
        on right: 15 16
    declarations (72)
        on left: 15 16
        on right: 3 16 103
    tail (73)
        on left: 17 18
        on right: 72 73 75 77
    tail_inloop (74)
        on left: 19 20
        on right: 78 79 80
    bool_expression (75)
        on left: 21 22 23
        on right: 30 72 73 77 78 79 80
    assign (76)
        on left: 24
        on right: 25 79
    expression (77)
        on left: 25 26 27 28 29 30 31
        on right: 14 24 67 79 81 86 87 92 131
    simpleExp (78)
        on left: 32 33
        on right: 28 32
    andExp (79)
        on left: 34 35
        on right: 32 33 34
    bitRelExp (80)
        on left: 36 37 38 39
        on right: 35 36 37 38
    op (81)
        on left: 40 41 42 43 44 45 46 47
        on right: 48
    relExp (82)
        on left: 48 49
        on right: 21 36 37 38 39 48
    bitshiftExp (83)
        on left: 50 51 52
        on right: 48 49 50 51
    pls_min (84)
        on left: 53 54
        on right: 58
    mul_div (85)
        on left: 55 56 57
        on right: 60
    sumExp (86)
        on left: 58 59
        on right: 50 51 52 58
    mulExp (87)
        on left: 60 61
        on right: 58 59 60
    unaryExp (88)
        on left: 62 63 64 65 66 67
        on right: 60 61
    value (89)
        on left: 68 69 70 71
        on right: 66 125
    else_if (90)
        on left: 72 73 74
        on right: 73 77
    else_part (91)
        on left: 75 76
        on right: 77
    if_statement (92)
        on left: 77
        on right: 96
    while_statement (93)
        on left: 78
        on right: 97
    for_statement (94)
        on left: 79
        on right: 98
    do_statement (95)
        on left: 80
        on right: 99
    switch_statement (96)
        on left: 81
        on right: 100
    cases (97)
        on left: 82 83 84
        on right: 81 83 84
    default (98)
        on left: 85
        on right: 84
    case (99)
        on left: 86
        on right: 82 83
    return_val (100)
        on left: 87 88
        on right: 89
    return_statement (101)
        on left: 89
        on right: 101
    break_statement (102)
        on left: 90
        on right: 106
    continue_statement (103)
        on left: 91
        on right: 107
    expression_statement (104)
        on left: 92
        on right: 102
    statements (105)
        on left: 93 94 95
        on right: 3 17 18 85 86 95 116
    statement (106)
        on left: 96 97 98 99 100 101 102 103 104
        on right: 94 95 105
    statement_inloop (107)
        on left: 105 106 107
        on right: 108 109
    statements_inloop (108)
        on left: 108 109
        on right: 19 20 109
    functions (109)
        on left: 110 111
        on right: 2 110
    function (110)
        on left: 112
        on right: 1 110 111
    param_empty (111)
        on left: 113 114
        on right: 115
    function_head (112)
        on left: 115
        on right: 112
    function_tail (113)
        on left: 116
        on right: 112
    parameters (114)
        on left: 117 118 119
        on right: 113 118
    parameter (115)
        on left: 120
        on right: 117 118
    enum_statement (116)
        on left: 121
        on right: 104
    enum_list (117)
        on left: 122 123
        on right: 121 123
    one_val (118)
        on left: 124 125
        on right: 122 123
    func_call (119)
        on left: 126 127
        on right: 31
    arguments (120)
        on left: 128 129 130
        on right: 126 127 129
    argument (121)
        on left: 131
        on right: 128 129


State 0

    0 $accept: . program $end
    1 program: . program function
    2        | . functions
    3        | . declarations statements
   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STRING]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
  110 functions: . functions function
  111          | . function
  112 function: . function_head function_tail
  115 function_head: . FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN type

    CONST  shift, and go to state 1
    FUNC   shift, and go to state 2

    $default  reduce using rule 12 (beforedecl)

    program        go to state 3
    beforedecl     go to state 4
    declaration    go to state 5
    declarations   go to state 6
    functions      go to state 7
    function       go to state 8
    function_head  go to state 9


State 1

   11 beforedecl: CONST .

    $default  reduce using rule 11 (beforedecl)


State 2

  115 function_head: FUNC . IDENT LEFT_PAREN param_empty RIGHT_PAREN type

    IDENT  shift, and go to state 10


State 3

    0 $accept: program . $end
    1 program: program . function
  112 function: . function_head function_tail
  115 function_head: . FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN type

    $end  shift, and go to state 11
    FUNC  shift, and go to state 2

    function       go to state 12
    function_head  go to state 9


State 4

    4 type: . INTEGER
    5     | . FLOAT
    6     | . DOUBLE
    7     | . VOID
    8     | . BOOLEAN
    9     | . CHAR
   10     | . STRING
   13 declaration: beforedecl . type IDENT SEMICOLON
   14            | beforedecl . type IDENT ASSIGN_OP expression SEMICOLON

    INTEGER  shift, and go to state 13
    FLOAT    shift, and go to state 14
    DOUBLE   shift, and go to state 15
    VOID     shift, and go to state 16
    BOOLEAN  shift, and go to state 17
    CHAR     shift, and go to state 18
    STRING   shift, and go to state 19

    type  go to state 20


State 5

   15 declarations: declaration .

    $default  reduce using rule 15 (declarations)


State 6

    3 program: declarations . statements
   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STRING]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   16             | declarations . declaration
   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30           | . bool_expression
   31           | . func_call
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   92 expression_statement: . expression SEMICOLON
   93 statements: . %empty  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, TRUE_TOKEN, FALSE_TOKEN, ENUM, FUNC, LEFT_PAREN, INC_OP, DEC_OP, NOT_OP]
   94           | . statement
   95           | . statements statement
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  121 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  126 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 21
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    IF              shift, and go to state 26
    WHILE           shift, and go to state 27
    FOR             shift, and go to state 28
    DO              shift, and go to state 29
    SWITCH          shift, and go to state 30
    RETURN          shift, and go to state 31
    TRUE_TOKEN      shift, and go to state 32
    FALSE_TOKEN     shift, and go to state 33
    ENUM            shift, and go to state 34
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    $end            reduce using rule 93 (statements)
    INTEGER         reduce using rule 12 (beforedecl)
    INTEGER         [reduce using rule 93 (statements)]
    FLOAT           reduce using rule 12 (beforedecl)
    FLOAT           [reduce using rule 93 (statements)]
    DOUBLE          reduce using rule 12 (beforedecl)
    DOUBLE          [reduce using rule 93 (statements)]
    VOID            reduce using rule 12 (beforedecl)
    VOID            [reduce using rule 93 (statements)]
    BOOLEAN         reduce using rule 12 (beforedecl)
    BOOLEAN         [reduce using rule 93 (statements)]
    CHAR            reduce using rule 12 (beforedecl)
    CHAR            [reduce using rule 93 (statements)]
    CONST           [reduce using rule 93 (statements)]
    STRING          reduce using rule 12 (beforedecl)
    STRING          [reduce using rule 93 (statements)]
    IDENT           [reduce using rule 93 (statements)]
    CONST_INT       [reduce using rule 93 (statements)]
    CONST_FLOAT     [reduce using rule 93 (statements)]
    CONST_CHAR      [reduce using rule 93 (statements)]
    STRING_LITERAL  [reduce using rule 93 (statements)]
    IF              [reduce using rule 93 (statements)]
    WHILE           [reduce using rule 93 (statements)]
    FOR             [reduce using rule 93 (statements)]
    DO              [reduce using rule 93 (statements)]
    SWITCH          [reduce using rule 93 (statements)]
    RETURN          [reduce using rule 93 (statements)]
    TRUE_TOKEN      [reduce using rule 93 (statements)]
    FALSE_TOKEN     [reduce using rule 93 (statements)]
    ENUM            [reduce using rule 93 (statements)]
    FUNC            reduce using rule 93 (statements)
    LEFT_PAREN      [reduce using rule 93 (statements)]
    INC_OP          [reduce using rule 93 (statements)]
    DEC_OP          [reduce using rule 93 (statements)]
    NOT_OP          [reduce using rule 93 (statements)]
    $default        reduce using rule 12 (beforedecl)

    beforedecl            go to state 4
    declaration           go to state 39
    declarations          go to state 40
    bool_expression       go to state 41
    assign                go to state 42
    expression            go to state 43
    simpleExp             go to state 44
    andExp                go to state 45
    bitRelExp             go to state 46
    relExp                go to state 47
    bitshiftExp           go to state 48
    sumExp                go to state 49
    mulExp                go to state 50
    unaryExp              go to state 51
    value                 go to state 52
    if_statement          go to state 53
    while_statement       go to state 54
    for_statement         go to state 55
    do_statement          go to state 56
    switch_statement      go to state 57
    return_statement      go to state 58
    expression_statement  go to state 59
    statements            go to state 60
    statement             go to state 61
    enum_statement        go to state 62
    func_call             go to state 63


State 7

    2 program: functions .  [$end, FUNC]
  110 functions: functions . function
  112 function: . function_head function_tail
  115 function_head: . FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN type

    FUNC  shift, and go to state 2

    FUNC      [reduce using rule 2 (program)]
    $default  reduce using rule 2 (program)

    function       go to state 64
    function_head  go to state 9


State 8

  111 functions: function .

    $default  reduce using rule 111 (functions)


State 9

  112 function: function_head . function_tail
  116 function_tail: . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 65

    function_tail  go to state 66


State 10

  115 function_head: FUNC IDENT . LEFT_PAREN param_empty RIGHT_PAREN type

    LEFT_PAREN  shift, and go to state 67


State 11

    0 $accept: program $end .

    $default  accept


State 12

    1 program: program function .

    $default  reduce using rule 1 (program)


State 13

    4 type: INTEGER .

    $default  reduce using rule 4 (type)


State 14

    5 type: FLOAT .

    $default  reduce using rule 5 (type)


State 15

    6 type: DOUBLE .

    $default  reduce using rule 6 (type)


State 16

    7 type: VOID .

    $default  reduce using rule 7 (type)


State 17

    8 type: BOOLEAN .

    $default  reduce using rule 8 (type)


State 18

    9 type: CHAR .

    $default  reduce using rule 9 (type)


State 19

   10 type: STRING .

    $default  reduce using rule 10 (type)


State 20

   13 declaration: beforedecl type . IDENT SEMICOLON
   14            | beforedecl type . IDENT ASSIGN_OP expression SEMICOLON

    IDENT  shift, and go to state 68


State 21

   24 assign: IDENT . ASSIGN_OP expression
   26 expression: IDENT . INC_OP
   27           | IDENT . DEC_OP
   29           | IDENT .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON]
   65 unaryExp: IDENT .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, ADD_OP, SUB_OP, MUL_OP, DIV_OP, MOD_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
  126 func_call: IDENT . LEFT_PAREN arguments RIGHT_PAREN
  127          | IDENT . ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    LEFT_PAREN  shift, and go to state 69
    INC_OP      shift, and go to state 70
    DEC_OP      shift, and go to state 71
    ASSIGN_OP   shift, and go to state 72

    RIGHT_PAREN  reduce using rule 29 (expression)
    RIGHT_PAREN  [reduce using rule 65 (unaryExp)]
    SEMICOLON    reduce using rule 29 (expression)
    SEMICOLON    [reduce using rule 65 (unaryExp)]
    COMMA        reduce using rule 29 (expression)
    COMMA        [reduce using rule 65 (unaryExp)]
    COLON        reduce using rule 29 (expression)
    COLON        [reduce using rule 65 (unaryExp)]
    $default     reduce using rule 65 (unaryExp)


State 22

   68 value: CONST_INT .

    $default  reduce using rule 68 (value)


State 23

   69 value: CONST_FLOAT .

    $default  reduce using rule 69 (value)


State 24

   70 value: CONST_CHAR .

    $default  reduce using rule 70 (value)


State 25

   71 value: STRING_LITERAL .

    $default  reduce using rule 71 (value)


State 26

   77 if_statement: IF . LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part

    LEFT_PAREN  shift, and go to state 73


State 27

   78 while_statement: WHILE . LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop

    LEFT_PAREN  shift, and go to state 74


State 28

   79 for_statement: FOR . LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

    LEFT_PAREN  shift, and go to state 75


State 29

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STRING]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   19 tail_inloop: . statements_inloop
   20            | . LEFT_CURLY_BRACKET statements_inloop RIGHT_CURLY_BRACKET
   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30           | . bool_expression
   31           | . func_call
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   80             | DO . tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   90 break_statement: . BREAK SEMICOLON
   91 continue_statement: . CONTINUE SEMICOLON
   92 expression_statement: . expression SEMICOLON
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  105 statement_inloop: . statement
  106                 | . break_statement
  107                 | . continue_statement
  108 statements_inloop: . statement_inloop
  109                  | . statements_inloop statement_inloop
  121 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  126 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST               shift, and go to state 1
    IDENT               shift, and go to state 21
    CONST_INT           shift, and go to state 22
    CONST_FLOAT         shift, and go to state 23
    CONST_CHAR          shift, and go to state 24
    STRING_LITERAL      shift, and go to state 25
    IF                  shift, and go to state 26
    WHILE               shift, and go to state 27
    FOR                 shift, and go to state 28
    DO                  shift, and go to state 29
    SWITCH              shift, and go to state 30
    RETURN              shift, and go to state 31
    BREAK               shift, and go to state 76
    CONTINUE            shift, and go to state 77
    TRUE_TOKEN          shift, and go to state 32
    FALSE_TOKEN         shift, and go to state 33
    ENUM                shift, and go to state 34
    LEFT_PAREN          shift, and go to state 35
    LEFT_CURLY_BRACKET  shift, and go to state 78
    INC_OP              shift, and go to state 36
    DEC_OP              shift, and go to state 37
    NOT_OP              shift, and go to state 38

    $default  reduce using rule 12 (beforedecl)

    beforedecl            go to state 4
    declaration           go to state 5
    declarations          go to state 40
    tail_inloop           go to state 79
    bool_expression       go to state 41
    assign                go to state 42
    expression            go to state 43
    simpleExp             go to state 44
    andExp                go to state 45
    bitRelExp             go to state 46
    relExp                go to state 47
    bitshiftExp           go to state 48
    sumExp                go to state 49
    mulExp                go to state 50
    unaryExp              go to state 51
    value                 go to state 52
    if_statement          go to state 53
    while_statement       go to state 54
    for_statement         go to state 55
    do_statement          go to state 56
    switch_statement      go to state 57
    return_statement      go to state 58
    break_statement       go to state 80
    continue_statement    go to state 81
    expression_statement  go to state 59
    statement             go to state 82
    statement_inloop      go to state 83
    statements_inloop     go to state 84
    enum_statement        go to state 62
    func_call             go to state 63


State 30

   81 switch_statement: SWITCH . LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    LEFT_PAREN  shift, and go to state 85


State 31

   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30           | . bool_expression
   31           | . func_call
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   87 return_val: . expression
   88           | . %empty  [SEMICOLON]
   89 return_statement: RETURN . return_val SEMICOLON
  126 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 21
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    TRUE_TOKEN      shift, and go to state 32
    FALSE_TOKEN     shift, and go to state 33
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    $default  reduce using rule 88 (return_val)

    bool_expression  go to state 41
    assign           go to state 42
    expression       go to state 86
    simpleExp        go to state 44
    andExp           go to state 45
    bitRelExp        go to state 46
    relExp           go to state 47
    bitshiftExp      go to state 48
    sumExp           go to state 49
    mulExp           go to state 50
    unaryExp         go to state 51
    value            go to state 52
    return_val       go to state 87
    func_call        go to state 63


State 32

   22 bool_expression: TRUE_TOKEN .

    $default  reduce using rule 22 (bool_expression)


State 33

   23 bool_expression: FALSE_TOKEN .

    $default  reduce using rule 23 (bool_expression)


State 34

  121 enum_statement: ENUM . IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET

    IDENT  shift, and go to state 88


State 35

   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30           | . bool_expression
   31           | . func_call
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   67         | LEFT_PAREN . expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
  126 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 21
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    TRUE_TOKEN      shift, and go to state 32
    FALSE_TOKEN     shift, and go to state 33
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    bool_expression  go to state 41
    assign           go to state 42
    expression       go to state 89
    simpleExp        go to state 44
    andExp           go to state 45
    bitRelExp        go to state 46
    relExp           go to state 47
    bitshiftExp      go to state 48
    sumExp           go to state 49
    mulExp           go to state 50
    unaryExp         go to state 51
    value            go to state 52
    func_call        go to state 63


State 36

   62 unaryExp: INC_OP . IDENT

    IDENT  shift, and go to state 90


State 37

   63 unaryExp: DEC_OP . IDENT

    IDENT  shift, and go to state 91


State 38

   64 unaryExp: NOT_OP . IDENT

    IDENT  shift, and go to state 92


State 39

   15 declarations: declaration .  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, TRUE_TOKEN, FALSE_TOKEN, ENUM, FUNC, LEFT_PAREN, INC_OP, DEC_OP, NOT_OP]
   16             | declarations declaration .  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, TRUE_TOKEN, FALSE_TOKEN, ENUM, FUNC, LEFT_PAREN, INC_OP, DEC_OP, NOT_OP]

    $end            reduce using rule 15 (declarations)
    $end            [reduce using rule 16 (declarations)]
    INTEGER         reduce using rule 15 (declarations)
    INTEGER         [reduce using rule 16 (declarations)]
    FLOAT           reduce using rule 15 (declarations)
    FLOAT           [reduce using rule 16 (declarations)]
    DOUBLE          reduce using rule 15 (declarations)
    DOUBLE          [reduce using rule 16 (declarations)]
    VOID            reduce using rule 15 (declarations)
    VOID            [reduce using rule 16 (declarations)]
    BOOLEAN         reduce using rule 15 (declarations)
    BOOLEAN         [reduce using rule 16 (declarations)]
    CHAR            reduce using rule 15 (declarations)
    CHAR            [reduce using rule 16 (declarations)]
    CONST           reduce using rule 15 (declarations)
    CONST           [reduce using rule 16 (declarations)]
    STRING          reduce using rule 15 (declarations)
    STRING          [reduce using rule 16 (declarations)]
    IDENT           reduce using rule 15 (declarations)
    IDENT           [reduce using rule 16 (declarations)]
    CONST_INT       reduce using rule 15 (declarations)
    CONST_INT       [reduce using rule 16 (declarations)]
    CONST_FLOAT     reduce using rule 15 (declarations)
    CONST_FLOAT     [reduce using rule 16 (declarations)]
    CONST_CHAR      reduce using rule 15 (declarations)
    CONST_CHAR      [reduce using rule 16 (declarations)]
    STRING_LITERAL  reduce using rule 15 (declarations)
    STRING_LITERAL  [reduce using rule 16 (declarations)]
    IF              reduce using rule 15 (declarations)
    IF              [reduce using rule 16 (declarations)]
    WHILE           reduce using rule 15 (declarations)
    WHILE           [reduce using rule 16 (declarations)]
    FOR             reduce using rule 15 (declarations)
    FOR             [reduce using rule 16 (declarations)]
    DO              reduce using rule 15 (declarations)
    DO              [reduce using rule 16 (declarations)]
    SWITCH          reduce using rule 15 (declarations)
    SWITCH          [reduce using rule 16 (declarations)]
    RETURN          reduce using rule 15 (declarations)
    RETURN          [reduce using rule 16 (declarations)]
    TRUE_TOKEN      reduce using rule 15 (declarations)
    TRUE_TOKEN      [reduce using rule 16 (declarations)]
    FALSE_TOKEN     reduce using rule 15 (declarations)
    FALSE_TOKEN     [reduce using rule 16 (declarations)]
    ENUM            reduce using rule 15 (declarations)
    ENUM            [reduce using rule 16 (declarations)]
    FUNC            reduce using rule 15 (declarations)
    FUNC            [reduce using rule 16 (declarations)]
    LEFT_PAREN      reduce using rule 15 (declarations)
    LEFT_PAREN      [reduce using rule 16 (declarations)]
    INC_OP          reduce using rule 15 (declarations)
    INC_OP          [reduce using rule 16 (declarations)]
    DEC_OP          reduce using rule 15 (declarations)
    DEC_OP          [reduce using rule 16 (declarations)]
    NOT_OP          reduce using rule 15 (declarations)
    NOT_OP          [reduce using rule 16 (declarations)]
    $default        reduce using rule 15 (declarations)


State 40

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STRING]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   16 declarations: declarations . declaration
  103 statement: declarations .  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, FUNC, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]

    CONST  shift, and go to state 1

    INTEGER   reduce using rule 12 (beforedecl)
    INTEGER   [reduce using rule 103 (statement)]
    FLOAT     reduce using rule 12 (beforedecl)
    FLOAT     [reduce using rule 103 (statement)]
    DOUBLE    reduce using rule 12 (beforedecl)
    DOUBLE    [reduce using rule 103 (statement)]
    VOID      reduce using rule 12 (beforedecl)
    VOID      [reduce using rule 103 (statement)]
    BOOLEAN   reduce using rule 12 (beforedecl)
    BOOLEAN   [reduce using rule 103 (statement)]
    CHAR      reduce using rule 12 (beforedecl)
    CHAR      [reduce using rule 103 (statement)]
    CONST     [reduce using rule 103 (statement)]
    STRING    reduce using rule 12 (beforedecl)
    STRING    [reduce using rule 103 (statement)]
    $default  reduce using rule 103 (statement)

    beforedecl   go to state 4
    declaration  go to state 93


State 41

   30 expression: bool_expression .

    $default  reduce using rule 30 (expression)


State 42

   25 expression: assign .

    $default  reduce using rule 25 (expression)


State 43

   92 expression_statement: expression . SEMICOLON

    SEMICOLON  shift, and go to state 94


State 44

   28 expression: simpleExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON]
   32 simpleExp: simpleExp . OR_OP andExp

    OR_OP  shift, and go to state 95

    $default  reduce using rule 28 (expression)


State 45

   33 simpleExp: andExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP]
   34 andExp: andExp . AND_OP

    AND_OP  shift, and go to state 96

    $default  reduce using rule 33 (simpleExp)


State 46

   35 andExp: bitRelExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP]
   36 bitRelExp: bitRelExp . BIT_OR_OP relExp
   37          | bitRelExp . AND relExp
   38          | bitRelExp . BIT_XOR_OP relExp

    BIT_OR_OP   shift, and go to state 97
    AND         shift, and go to state 98
    BIT_XOR_OP  shift, and go to state 99

    $default  reduce using rule 35 (andExp)


State 47

   21 bool_expression: relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON]
   39 bitRelExp: relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   40 op: . EQ_OP
   41   | . NE_OP
   42   | . GT_OP
   43   | . LT_OP
   44   | . LE_OP
   45   | . GE_OP
   46   | . OR_OP
   47   | . AND_OP
   48 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 100
    AND_OP  shift, and go to state 101
    EQ_OP   shift, and go to state 102
    NE_OP   shift, and go to state 103
    GT_OP   shift, and go to state 104
    LT_OP   shift, and go to state 105
    GE_OP   shift, and go to state 106
    LE_OP   shift, and go to state 107

    RIGHT_PAREN  reduce using rule 21 (bool_expression)
    RIGHT_PAREN  [reduce using rule 39 (bitRelExp)]
    SEMICOLON    reduce using rule 21 (bool_expression)
    SEMICOLON    [reduce using rule 39 (bitRelExp)]
    COMMA        reduce using rule 21 (bool_expression)
    COMMA        [reduce using rule 39 (bitRelExp)]
    COLON        reduce using rule 21 (bool_expression)
    COLON        [reduce using rule 39 (bitRelExp)]
    OR_OP        [reduce using rule 39 (bitRelExp)]
    AND_OP       [reduce using rule 39 (bitRelExp)]
    BIT_OR_OP    reduce using rule 39 (bitRelExp)
    AND          reduce using rule 39 (bitRelExp)
    BIT_XOR_OP   reduce using rule 39 (bitRelExp)
    $default     reduce using rule 21 (bool_expression)

    op  go to state 108


State 48

   49 relExp: bitshiftExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   50 bitshiftExp: bitshiftExp . BIT_LSHIFT_OP sumExp
   51            | bitshiftExp . BIT_RSHIFT_OP sumExp

    BIT_LSHIFT_OP  shift, and go to state 109
    BIT_RSHIFT_OP  shift, and go to state 110

    $default  reduce using rule 49 (relExp)


State 49

   52 bitshiftExp: sumExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   53 pls_min: . ADD_OP
   54        | . SUB_OP
   58 sumExp: sumExp . pls_min mulExp

    ADD_OP  shift, and go to state 111
    SUB_OP  shift, and go to state 112

    $default  reduce using rule 52 (bitshiftExp)

    pls_min  go to state 113


State 50

   55 mul_div: . MUL_OP
   56        | . DIV_OP
   57        | . MOD_OP
   59 sumExp: mulExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, ADD_OP, SUB_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   60 mulExp: mulExp . mul_div unaryExp

    MUL_OP  shift, and go to state 114
    DIV_OP  shift, and go to state 115
    MOD_OP  shift, and go to state 116

    $default  reduce using rule 59 (sumExp)

    mul_div  go to state 117


State 51

   61 mulExp: unaryExp .

    $default  reduce using rule 61 (mulExp)


State 52

   66 unaryExp: value .

    $default  reduce using rule 66 (unaryExp)


State 53

   96 statement: if_statement .

    $default  reduce using rule 96 (statement)


State 54

   97 statement: while_statement .

    $default  reduce using rule 97 (statement)


State 55

   98 statement: for_statement .

    $default  reduce using rule 98 (statement)


State 56

   99 statement: do_statement .

    $default  reduce using rule 99 (statement)


State 57

  100 statement: switch_statement .

    $default  reduce using rule 100 (statement)


State 58

  101 statement: return_statement .

    $default  reduce using rule 101 (statement)


State 59

  102 statement: expression_statement .

    $default  reduce using rule 102 (statement)


State 60

    3 program: declarations statements .  [$end, FUNC]
   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STRING]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30           | . bool_expression
   31           | . func_call
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   92 expression_statement: . expression SEMICOLON
   95 statements: statements . statement
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  121 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  126 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 21
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    IF              shift, and go to state 26
    WHILE           shift, and go to state 27
    FOR             shift, and go to state 28
    DO              shift, and go to state 29
    SWITCH          shift, and go to state 30
    RETURN          shift, and go to state 31
    TRUE_TOKEN      shift, and go to state 32
    FALSE_TOKEN     shift, and go to state 33
    ENUM            shift, and go to state 34
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    $end      reduce using rule 3 (program)
    FUNC      reduce using rule 3 (program)
    $default  reduce using rule 12 (beforedecl)

    beforedecl            go to state 4
    declaration           go to state 5
    declarations          go to state 40
    bool_expression       go to state 41
    assign                go to state 42
    expression            go to state 43
    simpleExp             go to state 44
    andExp                go to state 45
    bitRelExp             go to state 46
    relExp                go to state 47
    bitshiftExp           go to state 48
    sumExp                go to state 49
    mulExp                go to state 50
    unaryExp              go to state 51
    value                 go to state 52
    if_statement          go to state 53
    while_statement       go to state 54
    for_statement         go to state 55
    do_statement          go to state 56
    switch_statement      go to state 57
    return_statement      go to state 58
    expression_statement  go to state 59
    statement             go to state 118
    enum_statement        go to state 62
    func_call             go to state 63


State 61

   94 statements: statement .

    $default  reduce using rule 94 (statements)


State 62

  104 statement: enum_statement .

    $default  reduce using rule 104 (statement)


State 63

   31 expression: func_call .

    $default  reduce using rule 31 (expression)


State 64

  110 functions: functions function .

    $default  reduce using rule 110 (functions)


State 65

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STRING]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30           | . bool_expression
   31           | . func_call
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   92 expression_statement: . expression SEMICOLON
   93 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, TRUE_TOKEN, FALSE_TOKEN, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   94           | . statement
   95           | . statements statement
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  116 function_tail: LEFT_CURLY_BRACKET . statements RIGHT_CURLY_BRACKET
  121 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  126 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 21
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    IF              shift, and go to state 26
    WHILE           shift, and go to state 27
    FOR             shift, and go to state 28
    DO              shift, and go to state 29
    SWITCH          shift, and go to state 30
    RETURN          shift, and go to state 31
    TRUE_TOKEN      shift, and go to state 32
    FALSE_TOKEN     shift, and go to state 33
    ENUM            shift, and go to state 34
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    INTEGER              reduce using rule 12 (beforedecl)
    INTEGER              [reduce using rule 93 (statements)]
    FLOAT                reduce using rule 12 (beforedecl)
    FLOAT                [reduce using rule 93 (statements)]
    DOUBLE               reduce using rule 12 (beforedecl)
    DOUBLE               [reduce using rule 93 (statements)]
    VOID                 reduce using rule 12 (beforedecl)
    VOID                 [reduce using rule 93 (statements)]
    BOOLEAN              reduce using rule 12 (beforedecl)
    BOOLEAN              [reduce using rule 93 (statements)]
    CHAR                 reduce using rule 12 (beforedecl)
    CHAR                 [reduce using rule 93 (statements)]
    CONST                [reduce using rule 93 (statements)]
    STRING               reduce using rule 12 (beforedecl)
    STRING               [reduce using rule 93 (statements)]
    IDENT                [reduce using rule 93 (statements)]
    CONST_INT            [reduce using rule 93 (statements)]
    CONST_FLOAT          [reduce using rule 93 (statements)]
    CONST_CHAR           [reduce using rule 93 (statements)]
    STRING_LITERAL       [reduce using rule 93 (statements)]
    IF                   [reduce using rule 93 (statements)]
    WHILE                [reduce using rule 93 (statements)]
    FOR                  [reduce using rule 93 (statements)]
    DO                   [reduce using rule 93 (statements)]
    SWITCH               [reduce using rule 93 (statements)]
    RETURN               [reduce using rule 93 (statements)]
    TRUE_TOKEN           [reduce using rule 93 (statements)]
    FALSE_TOKEN          [reduce using rule 93 (statements)]
    ENUM                 [reduce using rule 93 (statements)]
    LEFT_PAREN           [reduce using rule 93 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 93 (statements)
    INC_OP               [reduce using rule 93 (statements)]
    DEC_OP               [reduce using rule 93 (statements)]
    NOT_OP               [reduce using rule 93 (statements)]
    $default             reduce using rule 12 (beforedecl)

    beforedecl            go to state 4
    declaration           go to state 5
    declarations          go to state 40
    bool_expression       go to state 41
    assign                go to state 42
    expression            go to state 43
    simpleExp             go to state 44
    andExp                go to state 45
    bitRelExp             go to state 46
    relExp                go to state 47
    bitshiftExp           go to state 48
    sumExp                go to state 49
    mulExp                go to state 50
    unaryExp              go to state 51
    value                 go to state 52
    if_statement          go to state 53
    while_statement       go to state 54
    for_statement         go to state 55
    do_statement          go to state 56
    switch_statement      go to state 57
    return_statement      go to state 58
    expression_statement  go to state 59
    statements            go to state 119
    statement             go to state 61
    enum_statement        go to state 62
    func_call             go to state 63


State 66

  112 function: function_head function_tail .

    $default  reduce using rule 112 (function)


State 67

    4 type: . INTEGER
    5     | . FLOAT
    6     | . DOUBLE
    7     | . VOID
    8     | . BOOLEAN
    9     | . CHAR
   10     | . STRING
  113 param_empty: . parameters
  114            | . %empty  [RIGHT_PAREN]
  115 function_head: FUNC IDENT LEFT_PAREN . param_empty RIGHT_PAREN type
  117 parameters: . parameter
  118           | . parameters COMMA parameter
  119           | . %empty  [RIGHT_PAREN, COMMA]
  120 parameter: . type IDENT

    INTEGER  shift, and go to state 13
    FLOAT    shift, and go to state 14
    DOUBLE   shift, and go to state 15
    VOID     shift, and go to state 16
    BOOLEAN  shift, and go to state 17
    CHAR     shift, and go to state 18
    STRING   shift, and go to state 19

    RIGHT_PAREN  reduce using rule 114 (param_empty)
    RIGHT_PAREN  [reduce using rule 119 (parameters)]
    COMMA        reduce using rule 119 (parameters)
    $default     reduce using rule 114 (param_empty)

    type         go to state 120
    param_empty  go to state 121
    parameters   go to state 122
    parameter    go to state 123


State 68

   13 declaration: beforedecl type IDENT . SEMICOLON
   14            | beforedecl type IDENT . ASSIGN_OP expression SEMICOLON

    SEMICOLON  shift, and go to state 124
    ASSIGN_OP  shift, and go to state 125


State 69

   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30           | . bool_expression
   31           | . func_call
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
  126 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  126          | IDENT LEFT_PAREN . arguments RIGHT_PAREN
  127          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN
  128 arguments: . argument
  129          | . arguments COMMA argument
  130          | . %empty  [RIGHT_PAREN, COMMA]
  131 argument: . expression

    IDENT           shift, and go to state 21
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    TRUE_TOKEN      shift, and go to state 32
    FALSE_TOKEN     shift, and go to state 33
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    $default  reduce using rule 130 (arguments)

    bool_expression  go to state 41
    assign           go to state 42
    expression       go to state 126
    simpleExp        go to state 44
    andExp           go to state 45
    bitRelExp        go to state 46
    relExp           go to state 47
    bitshiftExp      go to state 48
    sumExp           go to state 49
    mulExp           go to state 50
    unaryExp         go to state 51
    value            go to state 52
    func_call        go to state 63
    arguments        go to state 127
    argument         go to state 128


State 70

   26 expression: IDENT INC_OP .

    $default  reduce using rule 26 (expression)


State 71

   27 expression: IDENT DEC_OP .

    $default  reduce using rule 27 (expression)


State 72

   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   24 assign: . IDENT ASSIGN_OP expression
   24       | IDENT ASSIGN_OP . expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30           | . bool_expression
   31           | . func_call
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
  126 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | IDENT ASSIGN_OP . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 129
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    TRUE_TOKEN      shift, and go to state 32
    FALSE_TOKEN     shift, and go to state 33
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    bool_expression  go to state 41
    assign           go to state 42
    expression       go to state 130
    simpleExp        go to state 44
    andExp           go to state 45
    bitRelExp        go to state 46
    relExp           go to state 47
    bitshiftExp      go to state 48
    sumExp           go to state 49
    mulExp           go to state 50
    unaryExp         go to state 51
    value            go to state 52
    func_call        go to state 63


State 73

   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: IF LEFT_PAREN . bool_expression RIGHT_PAREN tail else_if else_part

    IDENT           shift, and go to state 131
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    TRUE_TOKEN      shift, and go to state 32
    FALSE_TOKEN     shift, and go to state 33
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    bool_expression  go to state 132
    relExp           go to state 133
    bitshiftExp      go to state 48
    sumExp           go to state 49
    mulExp           go to state 50
    unaryExp         go to state 51
    value            go to state 52


State 74

   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   78 while_statement: WHILE LEFT_PAREN . bool_expression RIGHT_PAREN tail_inloop

    IDENT           shift, and go to state 131
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    TRUE_TOKEN      shift, and go to state 32
    FALSE_TOKEN     shift, and go to state 33
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    bool_expression  go to state 134
    relExp           go to state 133
    bitshiftExp      go to state 48
    sumExp           go to state 49
    mulExp           go to state 50
    unaryExp         go to state 51
    value            go to state 52


State 75

   24 assign: . IDENT ASSIGN_OP expression
   79 for_statement: FOR LEFT_PAREN . assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

    IDENT  shift, and go to state 135

    assign  go to state 136


State 76

   90 break_statement: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 137


State 77

   91 continue_statement: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 138


State 78

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STRING]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   20 tail_inloop: LEFT_CURLY_BRACKET . statements_inloop RIGHT_CURLY_BRACKET
   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30           | . bool_expression
   31           | . func_call
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   90 break_statement: . BREAK SEMICOLON
   91 continue_statement: . CONTINUE SEMICOLON
   92 expression_statement: . expression SEMICOLON
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  105 statement_inloop: . statement
  106                 | . break_statement
  107                 | . continue_statement
  108 statements_inloop: . statement_inloop
  109                  | . statements_inloop statement_inloop
  121 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  126 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 21
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    IF              shift, and go to state 26
    WHILE           shift, and go to state 27
    FOR             shift, and go to state 28
    DO              shift, and go to state 29
    SWITCH          shift, and go to state 30
    RETURN          shift, and go to state 31
    BREAK           shift, and go to state 76
    CONTINUE        shift, and go to state 77
    TRUE_TOKEN      shift, and go to state 32
    FALSE_TOKEN     shift, and go to state 33
    ENUM            shift, and go to state 34
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    $default  reduce using rule 12 (beforedecl)

    beforedecl            go to state 4
    declaration           go to state 5
    declarations          go to state 40
    bool_expression       go to state 41
    assign                go to state 42
    expression            go to state 43
    simpleExp             go to state 44
    andExp                go to state 45
    bitRelExp             go to state 46
    relExp                go to state 47
    bitshiftExp           go to state 48
    sumExp                go to state 49
    mulExp                go to state 50
    unaryExp              go to state 51
    value                 go to state 52
    if_statement          go to state 53
    while_statement       go to state 54
    for_statement         go to state 55
    do_statement          go to state 56
    switch_statement      go to state 57
    return_statement      go to state 58
    break_statement       go to state 80
    continue_statement    go to state 81
    expression_statement  go to state 59
    statement             go to state 82
    statement_inloop      go to state 83
    statements_inloop     go to state 139
    enum_statement        go to state 62
    func_call             go to state 63


State 79

   80 do_statement: DO tail_inloop . WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON

    WHILE  shift, and go to state 140


State 80

  106 statement_inloop: break_statement .

    $default  reduce using rule 106 (statement_inloop)


State 81

  107 statement_inloop: continue_statement .

    $default  reduce using rule 107 (statement_inloop)


State 82

  105 statement_inloop: statement .

    $default  reduce using rule 105 (statement_inloop)


State 83

  108 statements_inloop: statement_inloop .

    $default  reduce using rule 108 (statements_inloop)


State 84

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STRING]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   19 tail_inloop: statements_inloop .  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, FUNC, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30           | . bool_expression
   31           | . func_call
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   90 break_statement: . BREAK SEMICOLON
   91 continue_statement: . CONTINUE SEMICOLON
   92 expression_statement: . expression SEMICOLON
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  105 statement_inloop: . statement
  106                 | . break_statement
  107                 | . continue_statement
  109 statements_inloop: statements_inloop . statement_inloop
  121 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  126 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 21
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    IF              shift, and go to state 26
    WHILE           shift, and go to state 27
    FOR             shift, and go to state 28
    DO              shift, and go to state 29
    SWITCH          shift, and go to state 30
    RETURN          shift, and go to state 31
    BREAK           shift, and go to state 76
    CONTINUE        shift, and go to state 77
    TRUE_TOKEN      shift, and go to state 32
    FALSE_TOKEN     shift, and go to state 33
    ENUM            shift, and go to state 34
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    $end                 reduce using rule 19 (tail_inloop)
    INTEGER              reduce using rule 12 (beforedecl)
    INTEGER              [reduce using rule 19 (tail_inloop)]
    FLOAT                reduce using rule 12 (beforedecl)
    FLOAT                [reduce using rule 19 (tail_inloop)]
    DOUBLE               reduce using rule 12 (beforedecl)
    DOUBLE               [reduce using rule 19 (tail_inloop)]
    VOID                 reduce using rule 12 (beforedecl)
    VOID                 [reduce using rule 19 (tail_inloop)]
    BOOLEAN              reduce using rule 12 (beforedecl)
    BOOLEAN              [reduce using rule 19 (tail_inloop)]
    CHAR                 reduce using rule 12 (beforedecl)
    CHAR                 [reduce using rule 19 (tail_inloop)]
    CONST                [reduce using rule 19 (tail_inloop)]
    STRING               reduce using rule 12 (beforedecl)
    STRING               [reduce using rule 19 (tail_inloop)]
    IDENT                [reduce using rule 19 (tail_inloop)]
    CONST_INT            [reduce using rule 19 (tail_inloop)]
    CONST_FLOAT          [reduce using rule 19 (tail_inloop)]
    CONST_CHAR           [reduce using rule 19 (tail_inloop)]
    STRING_LITERAL       [reduce using rule 19 (tail_inloop)]
    IF                   [reduce using rule 19 (tail_inloop)]
    ELSE                 reduce using rule 19 (tail_inloop)
    ELIF                 reduce using rule 19 (tail_inloop)
    WHILE                [reduce using rule 19 (tail_inloop)]
    FOR                  [reduce using rule 19 (tail_inloop)]
    DO                   [reduce using rule 19 (tail_inloop)]
    SWITCH               [reduce using rule 19 (tail_inloop)]
    RETURN               [reduce using rule 19 (tail_inloop)]
    BREAK                [reduce using rule 19 (tail_inloop)]
    CONTINUE             [reduce using rule 19 (tail_inloop)]
    TRUE_TOKEN           [reduce using rule 19 (tail_inloop)]
    FALSE_TOKEN          [reduce using rule 19 (tail_inloop)]
    ENUM                 [reduce using rule 19 (tail_inloop)]
    FUNC                 reduce using rule 19 (tail_inloop)
    LEFT_PAREN           [reduce using rule 19 (tail_inloop)]
    RIGHT_CURLY_BRACKET  reduce using rule 19 (tail_inloop)
    INC_OP               [reduce using rule 19 (tail_inloop)]
    DEC_OP               [reduce using rule 19 (tail_inloop)]
    NOT_OP               [reduce using rule 19 (tail_inloop)]
    $default             reduce using rule 12 (beforedecl)

    beforedecl            go to state 4
    declaration           go to state 5
    declarations          go to state 40
    bool_expression       go to state 41
    assign                go to state 42
    expression            go to state 43
    simpleExp             go to state 44
    andExp                go to state 45
    bitRelExp             go to state 46
    relExp                go to state 47
    bitshiftExp           go to state 48
    sumExp                go to state 49
    mulExp                go to state 50
    unaryExp              go to state 51
    value                 go to state 52
    if_statement          go to state 53
    while_statement       go to state 54
    for_statement         go to state 55
    do_statement          go to state 56
    switch_statement      go to state 57
    return_statement      go to state 58
    break_statement       go to state 80
    continue_statement    go to state 81
    expression_statement  go to state 59
    statement             go to state 82
    statement_inloop      go to state 141
    enum_statement        go to state 62
    func_call             go to state 63


State 85

   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30           | . bool_expression
   31           | . func_call
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   81 switch_statement: SWITCH LEFT_PAREN . expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
  126 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 21
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    TRUE_TOKEN      shift, and go to state 32
    FALSE_TOKEN     shift, and go to state 33
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    bool_expression  go to state 41
    assign           go to state 42
    expression       go to state 142
    simpleExp        go to state 44
    andExp           go to state 45
    bitRelExp        go to state 46
    relExp           go to state 47
    bitshiftExp      go to state 48
    sumExp           go to state 49
    mulExp           go to state 50
    unaryExp         go to state 51
    value            go to state 52
    func_call        go to state 63


State 86

   87 return_val: expression .

    $default  reduce using rule 87 (return_val)


State 87

   89 return_statement: RETURN return_val . SEMICOLON

    SEMICOLON  shift, and go to state 143


State 88

  121 enum_statement: ENUM IDENT . LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 144


State 89

   67 unaryExp: LEFT_PAREN expression . RIGHT_PAREN

    RIGHT_PAREN  shift, and go to state 145


State 90

   62 unaryExp: INC_OP IDENT .

    $default  reduce using rule 62 (unaryExp)


State 91

   63 unaryExp: DEC_OP IDENT .

    $default  reduce using rule 63 (unaryExp)


State 92

   64 unaryExp: NOT_OP IDENT .

    $default  reduce using rule 64 (unaryExp)


State 93

   16 declarations: declarations declaration .

    $default  reduce using rule 16 (declarations)


State 94

   92 expression_statement: expression SEMICOLON .

    $default  reduce using rule 92 (expression_statement)


State 95

   32 simpleExp: simpleExp OR_OP . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL

    IDENT           shift, and go to state 131
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    andExp       go to state 146
    bitRelExp    go to state 46
    relExp       go to state 147
    bitshiftExp  go to state 48
    sumExp       go to state 49
    mulExp       go to state 50
    unaryExp     go to state 51
    value        go to state 52


State 96

   34 andExp: andExp AND_OP .

    $default  reduce using rule 34 (andExp)


State 97

   36 bitRelExp: bitRelExp BIT_OR_OP . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL

    IDENT           shift, and go to state 131
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    relExp       go to state 148
    bitshiftExp  go to state 48
    sumExp       go to state 49
    mulExp       go to state 50
    unaryExp     go to state 51
    value        go to state 52


State 98

   37 bitRelExp: bitRelExp AND . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL

    IDENT           shift, and go to state 131
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    relExp       go to state 149
    bitshiftExp  go to state 48
    sumExp       go to state 49
    mulExp       go to state 50
    unaryExp     go to state 51
    value        go to state 52


State 99

   38 bitRelExp: bitRelExp BIT_XOR_OP . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL

    IDENT           shift, and go to state 131
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    relExp       go to state 150
    bitshiftExp  go to state 48
    sumExp       go to state 49
    mulExp       go to state 50
    unaryExp     go to state 51
    value        go to state 52


State 100

   46 op: OR_OP .

    $default  reduce using rule 46 (op)


State 101

   47 op: AND_OP .

    $default  reduce using rule 47 (op)


State 102

   40 op: EQ_OP .

    $default  reduce using rule 40 (op)


State 103

   41 op: NE_OP .

    $default  reduce using rule 41 (op)


State 104

   42 op: GT_OP .

    $default  reduce using rule 42 (op)


State 105

   43 op: LT_OP .

    $default  reduce using rule 43 (op)


State 106

   45 op: GE_OP .

    $default  reduce using rule 45 (op)


State 107

   44 op: LE_OP .

    $default  reduce using rule 44 (op)


State 108

   48 relExp: relExp op . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL

    IDENT           shift, and go to state 131
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    bitshiftExp  go to state 151
    sumExp       go to state 49
    mulExp       go to state 50
    unaryExp     go to state 51
    value        go to state 52


State 109

   50 bitshiftExp: bitshiftExp BIT_LSHIFT_OP . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL

    IDENT           shift, and go to state 131
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    sumExp    go to state 152
    mulExp    go to state 50
    unaryExp  go to state 51
    value     go to state 52


State 110

   51 bitshiftExp: bitshiftExp BIT_RSHIFT_OP . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL

    IDENT           shift, and go to state 131
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    sumExp    go to state 153
    mulExp    go to state 50
    unaryExp  go to state 51
    value     go to state 52


State 111

   53 pls_min: ADD_OP .

    $default  reduce using rule 53 (pls_min)


State 112

   54 pls_min: SUB_OP .

    $default  reduce using rule 54 (pls_min)


State 113

   58 sumExp: sumExp pls_min . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL

    IDENT           shift, and go to state 131
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    mulExp    go to state 154
    unaryExp  go to state 51
    value     go to state 52


State 114

   55 mul_div: MUL_OP .

    $default  reduce using rule 55 (mul_div)


State 115

   56 mul_div: DIV_OP .

    $default  reduce using rule 56 (mul_div)


State 116

   57 mul_div: MOD_OP .

    $default  reduce using rule 57 (mul_div)


State 117

   60 mulExp: mulExp mul_div . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL

    IDENT           shift, and go to state 131
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    unaryExp  go to state 155
    value     go to state 52


State 118

   95 statements: statements statement .

    $default  reduce using rule 95 (statements)


State 119

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STRING]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30           | . bool_expression
   31           | . func_call
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   92 expression_statement: . expression SEMICOLON
   95 statements: statements . statement
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  116 function_tail: LEFT_CURLY_BRACKET statements . RIGHT_CURLY_BRACKET
  121 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  126 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST                shift, and go to state 1
    IDENT                shift, and go to state 21
    CONST_INT            shift, and go to state 22
    CONST_FLOAT          shift, and go to state 23
    CONST_CHAR           shift, and go to state 24
    STRING_LITERAL       shift, and go to state 25
    IF                   shift, and go to state 26
    WHILE                shift, and go to state 27
    FOR                  shift, and go to state 28
    DO                   shift, and go to state 29
    SWITCH               shift, and go to state 30
    RETURN               shift, and go to state 31
    TRUE_TOKEN           shift, and go to state 32
    FALSE_TOKEN          shift, and go to state 33
    ENUM                 shift, and go to state 34
    LEFT_PAREN           shift, and go to state 35
    RIGHT_CURLY_BRACKET  shift, and go to state 156
    INC_OP               shift, and go to state 36
    DEC_OP               shift, and go to state 37
    NOT_OP               shift, and go to state 38

    $default  reduce using rule 12 (beforedecl)

    beforedecl            go to state 4
    declaration           go to state 5
    declarations          go to state 40
    bool_expression       go to state 41
    assign                go to state 42
    expression            go to state 43
    simpleExp             go to state 44
    andExp                go to state 45
    bitRelExp             go to state 46
    relExp                go to state 47
    bitshiftExp           go to state 48
    sumExp                go to state 49
    mulExp                go to state 50
    unaryExp              go to state 51
    value                 go to state 52
    if_statement          go to state 53
    while_statement       go to state 54
    for_statement         go to state 55
    do_statement          go to state 56
    switch_statement      go to state 57
    return_statement      go to state 58
    expression_statement  go to state 59
    statement             go to state 118
    enum_statement        go to state 62
    func_call             go to state 63


State 120

  120 parameter: type . IDENT

    IDENT  shift, and go to state 157


State 121

  115 function_head: FUNC IDENT LEFT_PAREN param_empty . RIGHT_PAREN type

    RIGHT_PAREN  shift, and go to state 158


State 122

  113 param_empty: parameters .  [RIGHT_PAREN]
  118 parameters: parameters . COMMA parameter

    COMMA  shift, and go to state 159

    $default  reduce using rule 113 (param_empty)


State 123

  117 parameters: parameter .

    $default  reduce using rule 117 (parameters)


State 124

   13 declaration: beforedecl type IDENT SEMICOLON .

    $default  reduce using rule 13 (declaration)


State 125

   14 declaration: beforedecl type IDENT ASSIGN_OP . expression SEMICOLON
   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30           | . bool_expression
   31           | . func_call
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
  126 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 21
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    TRUE_TOKEN      shift, and go to state 32
    FALSE_TOKEN     shift, and go to state 33
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    bool_expression  go to state 41
    assign           go to state 42
    expression       go to state 160
    simpleExp        go to state 44
    andExp           go to state 45
    bitRelExp        go to state 46
    relExp           go to state 47
    bitshiftExp      go to state 48
    sumExp           go to state 49
    mulExp           go to state 50
    unaryExp         go to state 51
    value            go to state 52
    func_call        go to state 63


State 126

  131 argument: expression .

    $default  reduce using rule 131 (argument)


State 127

  126 func_call: IDENT LEFT_PAREN arguments . RIGHT_PAREN
  129 arguments: arguments . COMMA argument

    RIGHT_PAREN  shift, and go to state 161
    COMMA        shift, and go to state 162


State 128

  128 arguments: argument .

    $default  reduce using rule 128 (arguments)


State 129

   24 assign: IDENT . ASSIGN_OP expression
   26 expression: IDENT . INC_OP
   27           | IDENT . DEC_OP
   29           | IDENT .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON]
   65 unaryExp: IDENT .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, ADD_OP, SUB_OP, MUL_OP, DIV_OP, MOD_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
  126 func_call: IDENT . LEFT_PAREN arguments RIGHT_PAREN
  127          | IDENT . ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | IDENT ASSIGN_OP IDENT . LEFT_PAREN arguments RIGHT_PAREN

    LEFT_PAREN  shift, and go to state 163
    INC_OP      shift, and go to state 70
    DEC_OP      shift, and go to state 71
    ASSIGN_OP   shift, and go to state 72

    RIGHT_PAREN  reduce using rule 29 (expression)
    RIGHT_PAREN  [reduce using rule 65 (unaryExp)]
    SEMICOLON    reduce using rule 29 (expression)
    SEMICOLON    [reduce using rule 65 (unaryExp)]
    COMMA        reduce using rule 29 (expression)
    COMMA        [reduce using rule 65 (unaryExp)]
    COLON        reduce using rule 29 (expression)
    COLON        [reduce using rule 65 (unaryExp)]
    $default     reduce using rule 65 (unaryExp)


State 130

   24 assign: IDENT ASSIGN_OP expression .

    $default  reduce using rule 24 (assign)


State 131

   65 unaryExp: IDENT .

    $default  reduce using rule 65 (unaryExp)


State 132

   77 if_statement: IF LEFT_PAREN bool_expression . RIGHT_PAREN tail else_if else_part

    RIGHT_PAREN  shift, and go to state 164


State 133

   21 bool_expression: relExp .  [RIGHT_PAREN, SEMICOLON]
   40 op: . EQ_OP
   41   | . NE_OP
   42   | . GT_OP
   43   | . LT_OP
   44   | . LE_OP
   45   | . GE_OP
   46   | . OR_OP
   47   | . AND_OP
   48 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 100
    AND_OP  shift, and go to state 101
    EQ_OP   shift, and go to state 102
    NE_OP   shift, and go to state 103
    GT_OP   shift, and go to state 104
    LT_OP   shift, and go to state 105
    GE_OP   shift, and go to state 106
    LE_OP   shift, and go to state 107

    $default  reduce using rule 21 (bool_expression)

    op  go to state 108


State 134

   78 while_statement: WHILE LEFT_PAREN bool_expression . RIGHT_PAREN tail_inloop

    RIGHT_PAREN  shift, and go to state 165


State 135

   24 assign: IDENT . ASSIGN_OP expression

    ASSIGN_OP  shift, and go to state 166


State 136

   79 for_statement: FOR LEFT_PAREN assign . SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

    SEMICOLON  shift, and go to state 167


State 137

   90 break_statement: BREAK SEMICOLON .

    $default  reduce using rule 90 (break_statement)


State 138

   91 continue_statement: CONTINUE SEMICOLON .

    $default  reduce using rule 91 (continue_statement)


State 139

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STRING]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   20 tail_inloop: LEFT_CURLY_BRACKET statements_inloop . RIGHT_CURLY_BRACKET
   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30           | . bool_expression
   31           | . func_call
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   90 break_statement: . BREAK SEMICOLON
   91 continue_statement: . CONTINUE SEMICOLON
   92 expression_statement: . expression SEMICOLON
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  105 statement_inloop: . statement
  106                 | . break_statement
  107                 | . continue_statement
  109 statements_inloop: statements_inloop . statement_inloop
  121 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  126 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST                shift, and go to state 1
    IDENT                shift, and go to state 21
    CONST_INT            shift, and go to state 22
    CONST_FLOAT          shift, and go to state 23
    CONST_CHAR           shift, and go to state 24
    STRING_LITERAL       shift, and go to state 25
    IF                   shift, and go to state 26
    WHILE                shift, and go to state 27
    FOR                  shift, and go to state 28
    DO                   shift, and go to state 29
    SWITCH               shift, and go to state 30
    RETURN               shift, and go to state 31
    BREAK                shift, and go to state 76
    CONTINUE             shift, and go to state 77
    TRUE_TOKEN           shift, and go to state 32
    FALSE_TOKEN          shift, and go to state 33
    ENUM                 shift, and go to state 34
    LEFT_PAREN           shift, and go to state 35
    RIGHT_CURLY_BRACKET  shift, and go to state 168
    INC_OP               shift, and go to state 36
    DEC_OP               shift, and go to state 37
    NOT_OP               shift, and go to state 38

    $default  reduce using rule 12 (beforedecl)

    beforedecl            go to state 4
    declaration           go to state 5
    declarations          go to state 40
    bool_expression       go to state 41
    assign                go to state 42
    expression            go to state 43
    simpleExp             go to state 44
    andExp                go to state 45
    bitRelExp             go to state 46
    relExp                go to state 47
    bitshiftExp           go to state 48
    sumExp                go to state 49
    mulExp                go to state 50
    unaryExp              go to state 51
    value                 go to state 52
    if_statement          go to state 53
    while_statement       go to state 54
    for_statement         go to state 55
    do_statement          go to state 56
    switch_statement      go to state 57
    return_statement      go to state 58
    break_statement       go to state 80
    continue_statement    go to state 81
    expression_statement  go to state 59
    statement             go to state 82
    statement_inloop      go to state 141
    enum_statement        go to state 62
    func_call             go to state 63


State 140

   80 do_statement: DO tail_inloop WHILE . LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON

    LEFT_PAREN  shift, and go to state 169


State 141

  109 statements_inloop: statements_inloop statement_inloop .

    $default  reduce using rule 109 (statements_inloop)


State 142

   81 switch_statement: SWITCH LEFT_PAREN expression . RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    RIGHT_PAREN  shift, and go to state 170


State 143

   89 return_statement: RETURN return_val SEMICOLON .

    $default  reduce using rule 89 (return_statement)


State 144

  121 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET . enum_list RIGHT_CURLY_BRACKET
  122 enum_list: . one_val
  123          | . enum_list COMMA one_val
  124 one_val: . IDENT
  125        | . IDENT ASSIGN_OP value

    IDENT  shift, and go to state 171

    enum_list  go to state 172
    one_val    go to state 173


State 145

   67 unaryExp: LEFT_PAREN expression RIGHT_PAREN .

    $default  reduce using rule 67 (unaryExp)


State 146

   32 simpleExp: simpleExp OR_OP andExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP]
   34 andExp: andExp . AND_OP

    AND_OP  shift, and go to state 96

    $default  reduce using rule 32 (simpleExp)


State 147

   39 bitRelExp: relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   40 op: . EQ_OP
   41   | . NE_OP
   42   | . GT_OP
   43   | . LT_OP
   44   | . LE_OP
   45   | . GE_OP
   46   | . OR_OP
   47   | . AND_OP
   48 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 100
    AND_OP  shift, and go to state 101
    EQ_OP   shift, and go to state 102
    NE_OP   shift, and go to state 103
    GT_OP   shift, and go to state 104
    LT_OP   shift, and go to state 105
    GE_OP   shift, and go to state 106
    LE_OP   shift, and go to state 107

    OR_OP     [reduce using rule 39 (bitRelExp)]
    AND_OP    [reduce using rule 39 (bitRelExp)]
    $default  reduce using rule 39 (bitRelExp)

    op  go to state 108


State 148

   36 bitRelExp: bitRelExp BIT_OR_OP relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   40 op: . EQ_OP
   41   | . NE_OP
   42   | . GT_OP
   43   | . LT_OP
   44   | . LE_OP
   45   | . GE_OP
   46   | . OR_OP
   47   | . AND_OP
   48 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 100
    AND_OP  shift, and go to state 101
    EQ_OP   shift, and go to state 102
    NE_OP   shift, and go to state 103
    GT_OP   shift, and go to state 104
    LT_OP   shift, and go to state 105
    GE_OP   shift, and go to state 106
    LE_OP   shift, and go to state 107

    OR_OP     [reduce using rule 36 (bitRelExp)]
    AND_OP    [reduce using rule 36 (bitRelExp)]
    $default  reduce using rule 36 (bitRelExp)

    op  go to state 108


State 149

   37 bitRelExp: bitRelExp AND relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   40 op: . EQ_OP
   41   | . NE_OP
   42   | . GT_OP
   43   | . LT_OP
   44   | . LE_OP
   45   | . GE_OP
   46   | . OR_OP
   47   | . AND_OP
   48 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 100
    AND_OP  shift, and go to state 101
    EQ_OP   shift, and go to state 102
    NE_OP   shift, and go to state 103
    GT_OP   shift, and go to state 104
    LT_OP   shift, and go to state 105
    GE_OP   shift, and go to state 106
    LE_OP   shift, and go to state 107

    OR_OP     [reduce using rule 37 (bitRelExp)]
    AND_OP    [reduce using rule 37 (bitRelExp)]
    $default  reduce using rule 37 (bitRelExp)

    op  go to state 108


State 150

   38 bitRelExp: bitRelExp BIT_XOR_OP relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   40 op: . EQ_OP
   41   | . NE_OP
   42   | . GT_OP
   43   | . LT_OP
   44   | . LE_OP
   45   | . GE_OP
   46   | . OR_OP
   47   | . AND_OP
   48 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 100
    AND_OP  shift, and go to state 101
    EQ_OP   shift, and go to state 102
    NE_OP   shift, and go to state 103
    GT_OP   shift, and go to state 104
    LT_OP   shift, and go to state 105
    GE_OP   shift, and go to state 106
    LE_OP   shift, and go to state 107

    OR_OP     [reduce using rule 38 (bitRelExp)]
    AND_OP    [reduce using rule 38 (bitRelExp)]
    $default  reduce using rule 38 (bitRelExp)

    op  go to state 108


State 151

   48 relExp: relExp op bitshiftExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   50 bitshiftExp: bitshiftExp . BIT_LSHIFT_OP sumExp
   51            | bitshiftExp . BIT_RSHIFT_OP sumExp

    BIT_LSHIFT_OP  shift, and go to state 109
    BIT_RSHIFT_OP  shift, and go to state 110

    $default  reduce using rule 48 (relExp)


State 152

   50 bitshiftExp: bitshiftExp BIT_LSHIFT_OP sumExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   53 pls_min: . ADD_OP
   54        | . SUB_OP
   58 sumExp: sumExp . pls_min mulExp

    ADD_OP  shift, and go to state 111
    SUB_OP  shift, and go to state 112

    $default  reduce using rule 50 (bitshiftExp)

    pls_min  go to state 113


State 153

   51 bitshiftExp: bitshiftExp BIT_RSHIFT_OP sumExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   53 pls_min: . ADD_OP
   54        | . SUB_OP
   58 sumExp: sumExp . pls_min mulExp

    ADD_OP  shift, and go to state 111
    SUB_OP  shift, and go to state 112

    $default  reduce using rule 51 (bitshiftExp)

    pls_min  go to state 113


State 154

   55 mul_div: . MUL_OP
   56        | . DIV_OP
   57        | . MOD_OP
   58 sumExp: sumExp pls_min mulExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, ADD_OP, SUB_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   60 mulExp: mulExp . mul_div unaryExp

    MUL_OP  shift, and go to state 114
    DIV_OP  shift, and go to state 115
    MOD_OP  shift, and go to state 116

    $default  reduce using rule 58 (sumExp)

    mul_div  go to state 117


State 155

   60 mulExp: mulExp mul_div unaryExp .

    $default  reduce using rule 60 (mulExp)


State 156

  116 function_tail: LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET .

    $default  reduce using rule 116 (function_tail)


State 157

  120 parameter: type IDENT .

    $default  reduce using rule 120 (parameter)


State 158

    4 type: . INTEGER
    5     | . FLOAT
    6     | . DOUBLE
    7     | . VOID
    8     | . BOOLEAN
    9     | . CHAR
   10     | . STRING
  115 function_head: FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN . type

    INTEGER  shift, and go to state 13
    FLOAT    shift, and go to state 14
    DOUBLE   shift, and go to state 15
    VOID     shift, and go to state 16
    BOOLEAN  shift, and go to state 17
    CHAR     shift, and go to state 18
    STRING   shift, and go to state 19

    type  go to state 174


State 159

    4 type: . INTEGER
    5     | . FLOAT
    6     | . DOUBLE
    7     | . VOID
    8     | . BOOLEAN
    9     | . CHAR
   10     | . STRING
  118 parameters: parameters COMMA . parameter
  120 parameter: . type IDENT

    INTEGER  shift, and go to state 13
    FLOAT    shift, and go to state 14
    DOUBLE   shift, and go to state 15
    VOID     shift, and go to state 16
    BOOLEAN  shift, and go to state 17
    CHAR     shift, and go to state 18
    STRING   shift, and go to state 19

    type       go to state 120
    parameter  go to state 175


State 160

   14 declaration: beforedecl type IDENT ASSIGN_OP expression . SEMICOLON

    SEMICOLON  shift, and go to state 176


State 161

  126 func_call: IDENT LEFT_PAREN arguments RIGHT_PAREN .

    $default  reduce using rule 126 (func_call)


State 162

   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30           | . bool_expression
   31           | . func_call
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
  126 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN
  129 arguments: arguments COMMA . argument
  131 argument: . expression

    IDENT           shift, and go to state 21
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    TRUE_TOKEN      shift, and go to state 32
    FALSE_TOKEN     shift, and go to state 33
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    bool_expression  go to state 41
    assign           go to state 42
    expression       go to state 126
    simpleExp        go to state 44
    andExp           go to state 45
    bitRelExp        go to state 46
    relExp           go to state 47
    bitshiftExp      go to state 48
    sumExp           go to state 49
    mulExp           go to state 50
    unaryExp         go to state 51
    value            go to state 52
    func_call        go to state 63
    argument         go to state 177


State 163

   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30           | . bool_expression
   31           | . func_call
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
  126 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  126          | IDENT LEFT_PAREN . arguments RIGHT_PAREN
  127          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | IDENT ASSIGN_OP IDENT LEFT_PAREN . arguments RIGHT_PAREN
  128 arguments: . argument
  129          | . arguments COMMA argument
  130          | . %empty  [RIGHT_PAREN, COMMA]
  131 argument: . expression

    IDENT           shift, and go to state 21
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    TRUE_TOKEN      shift, and go to state 32
    FALSE_TOKEN     shift, and go to state 33
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    $default  reduce using rule 130 (arguments)

    bool_expression  go to state 41
    assign           go to state 42
    expression       go to state 126
    simpleExp        go to state 44
    andExp           go to state 45
    bitRelExp        go to state 46
    relExp           go to state 47
    bitshiftExp      go to state 48
    sumExp           go to state 49
    mulExp           go to state 50
    unaryExp         go to state 51
    value            go to state 52
    func_call        go to state 63
    arguments        go to state 178
    argument         go to state 128


State 164

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STRING]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   17 tail: . statements
   18     | . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30           | . bool_expression
   31           | . func_call
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   77             | IF LEFT_PAREN bool_expression RIGHT_PAREN . tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   92 expression_statement: . expression SEMICOLON
   93 statements: . %empty  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, FUNC, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   94           | . statement
   95           | . statements statement
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  121 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  126 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST               shift, and go to state 1
    IDENT               shift, and go to state 21
    CONST_INT           shift, and go to state 22
    CONST_FLOAT         shift, and go to state 23
    CONST_CHAR          shift, and go to state 24
    STRING_LITERAL      shift, and go to state 25
    IF                  shift, and go to state 26
    WHILE               shift, and go to state 27
    FOR                 shift, and go to state 28
    DO                  shift, and go to state 29
    SWITCH              shift, and go to state 30
    RETURN              shift, and go to state 31
    TRUE_TOKEN          shift, and go to state 32
    FALSE_TOKEN         shift, and go to state 33
    ENUM                shift, and go to state 34
    LEFT_PAREN          shift, and go to state 35
    LEFT_CURLY_BRACKET  shift, and go to state 179
    INC_OP              shift, and go to state 36
    DEC_OP              shift, and go to state 37
    NOT_OP              shift, and go to state 38

    $end                 reduce using rule 93 (statements)
    INTEGER              reduce using rule 12 (beforedecl)
    INTEGER              [reduce using rule 93 (statements)]
    FLOAT                reduce using rule 12 (beforedecl)
    FLOAT                [reduce using rule 93 (statements)]
    DOUBLE               reduce using rule 12 (beforedecl)
    DOUBLE               [reduce using rule 93 (statements)]
    VOID                 reduce using rule 12 (beforedecl)
    VOID                 [reduce using rule 93 (statements)]
    BOOLEAN              reduce using rule 12 (beforedecl)
    BOOLEAN              [reduce using rule 93 (statements)]
    CHAR                 reduce using rule 12 (beforedecl)
    CHAR                 [reduce using rule 93 (statements)]
    CONST                [reduce using rule 93 (statements)]
    STRING               reduce using rule 12 (beforedecl)
    STRING               [reduce using rule 93 (statements)]
    IDENT                [reduce using rule 93 (statements)]
    CONST_INT            [reduce using rule 93 (statements)]
    CONST_FLOAT          [reduce using rule 93 (statements)]
    CONST_CHAR           [reduce using rule 93 (statements)]
    STRING_LITERAL       [reduce using rule 93 (statements)]
    IF                   [reduce using rule 93 (statements)]
    ELSE                 reduce using rule 93 (statements)
    ELIF                 reduce using rule 93 (statements)
    WHILE                [reduce using rule 93 (statements)]
    FOR                  [reduce using rule 93 (statements)]
    DO                   [reduce using rule 93 (statements)]
    SWITCH               [reduce using rule 93 (statements)]
    RETURN               [reduce using rule 93 (statements)]
    BREAK                reduce using rule 93 (statements)
    CONTINUE             reduce using rule 93 (statements)
    TRUE_TOKEN           [reduce using rule 93 (statements)]
    FALSE_TOKEN          [reduce using rule 93 (statements)]
    ENUM                 [reduce using rule 93 (statements)]
    FUNC                 reduce using rule 93 (statements)
    LEFT_PAREN           [reduce using rule 93 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 93 (statements)
    INC_OP               [reduce using rule 93 (statements)]
    DEC_OP               [reduce using rule 93 (statements)]
    NOT_OP               [reduce using rule 93 (statements)]
    $default             reduce using rule 12 (beforedecl)

    beforedecl            go to state 4
    declaration           go to state 5
    declarations          go to state 40
    tail                  go to state 180
    bool_expression       go to state 41
    assign                go to state 42
    expression            go to state 43
    simpleExp             go to state 44
    andExp                go to state 45
    bitRelExp             go to state 46
    relExp                go to state 47
    bitshiftExp           go to state 48
    sumExp                go to state 49
    mulExp                go to state 50
    unaryExp              go to state 51
    value                 go to state 52
    if_statement          go to state 53
    while_statement       go to state 54
    for_statement         go to state 55
    do_statement          go to state 56
    switch_statement      go to state 57
    return_statement      go to state 58
    expression_statement  go to state 59
    statements            go to state 181
    statement             go to state 61
    enum_statement        go to state 62
    func_call             go to state 63


State 165

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STRING]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   19 tail_inloop: . statements_inloop
   20            | . LEFT_CURLY_BRACKET statements_inloop RIGHT_CURLY_BRACKET
   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30           | . bool_expression
   31           | . func_call
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   78                | WHILE LEFT_PAREN bool_expression RIGHT_PAREN . tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   90 break_statement: . BREAK SEMICOLON
   91 continue_statement: . CONTINUE SEMICOLON
   92 expression_statement: . expression SEMICOLON
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  105 statement_inloop: . statement
  106                 | . break_statement
  107                 | . continue_statement
  108 statements_inloop: . statement_inloop
  109                  | . statements_inloop statement_inloop
  121 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  126 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST               shift, and go to state 1
    IDENT               shift, and go to state 21
    CONST_INT           shift, and go to state 22
    CONST_FLOAT         shift, and go to state 23
    CONST_CHAR          shift, and go to state 24
    STRING_LITERAL      shift, and go to state 25
    IF                  shift, and go to state 26
    WHILE               shift, and go to state 27
    FOR                 shift, and go to state 28
    DO                  shift, and go to state 29
    SWITCH              shift, and go to state 30
    RETURN              shift, and go to state 31
    BREAK               shift, and go to state 76
    CONTINUE            shift, and go to state 77
    TRUE_TOKEN          shift, and go to state 32
    FALSE_TOKEN         shift, and go to state 33
    ENUM                shift, and go to state 34
    LEFT_PAREN          shift, and go to state 35
    LEFT_CURLY_BRACKET  shift, and go to state 78
    INC_OP              shift, and go to state 36
    DEC_OP              shift, and go to state 37
    NOT_OP              shift, and go to state 38

    $default  reduce using rule 12 (beforedecl)

    beforedecl            go to state 4
    declaration           go to state 5
    declarations          go to state 40
    tail_inloop           go to state 182
    bool_expression       go to state 41
    assign                go to state 42
    expression            go to state 43
    simpleExp             go to state 44
    andExp                go to state 45
    bitRelExp             go to state 46
    relExp                go to state 47
    bitshiftExp           go to state 48
    sumExp                go to state 49
    mulExp                go to state 50
    unaryExp              go to state 51
    value                 go to state 52
    if_statement          go to state 53
    while_statement       go to state 54
    for_statement         go to state 55
    do_statement          go to state 56
    switch_statement      go to state 57
    return_statement      go to state 58
    break_statement       go to state 80
    continue_statement    go to state 81
    expression_statement  go to state 59
    statement             go to state 82
    statement_inloop      go to state 83
    statements_inloop     go to state 84
    enum_statement        go to state 62
    func_call             go to state 63


State 166

   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   24 assign: . IDENT ASSIGN_OP expression
   24       | IDENT ASSIGN_OP . expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30           | . bool_expression
   31           | . func_call
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
  126 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 21
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    TRUE_TOKEN      shift, and go to state 32
    FALSE_TOKEN     shift, and go to state 33
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    bool_expression  go to state 41
    assign           go to state 42
    expression       go to state 130
    simpleExp        go to state 44
    andExp           go to state 45
    bitRelExp        go to state 46
    relExp           go to state 47
    bitshiftExp      go to state 48
    sumExp           go to state 49
    mulExp           go to state 50
    unaryExp         go to state 51
    value            go to state 52
    func_call        go to state 63


State 167

   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   79 for_statement: FOR LEFT_PAREN assign SEMICOLON . bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

    IDENT           shift, and go to state 131
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    TRUE_TOKEN      shift, and go to state 32
    FALSE_TOKEN     shift, and go to state 33
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    bool_expression  go to state 183
    relExp           go to state 133
    bitshiftExp      go to state 48
    sumExp           go to state 49
    mulExp           go to state 50
    unaryExp         go to state 51
    value            go to state 52


State 168

   20 tail_inloop: LEFT_CURLY_BRACKET statements_inloop RIGHT_CURLY_BRACKET .

    $default  reduce using rule 20 (tail_inloop)


State 169

   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   80 do_statement: DO tail_inloop WHILE LEFT_PAREN . bool_expression RIGHT_PAREN SEMICOLON

    IDENT           shift, and go to state 131
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    TRUE_TOKEN      shift, and go to state 32
    FALSE_TOKEN     shift, and go to state 33
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    bool_expression  go to state 184
    relExp           go to state 133
    bitshiftExp      go to state 48
    sumExp           go to state 49
    mulExp           go to state 50
    unaryExp         go to state 51
    value            go to state 52


State 170

   81 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN . LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 185


State 171

  124 one_val: IDENT .  [RIGHT_CURLY_BRACKET, COMMA]
  125        | IDENT . ASSIGN_OP value

    ASSIGN_OP  shift, and go to state 186

    $default  reduce using rule 124 (one_val)


State 172

  121 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET enum_list . RIGHT_CURLY_BRACKET
  123 enum_list: enum_list . COMMA one_val

    RIGHT_CURLY_BRACKET  shift, and go to state 187
    COMMA                shift, and go to state 188


State 173

  122 enum_list: one_val .

    $default  reduce using rule 122 (enum_list)


State 174

  115 function_head: FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN type .

    $default  reduce using rule 115 (function_head)


State 175

  118 parameters: parameters COMMA parameter .

    $default  reduce using rule 118 (parameters)


State 176

   14 declaration: beforedecl type IDENT ASSIGN_OP expression SEMICOLON .

    $default  reduce using rule 14 (declaration)


State 177

  129 arguments: arguments COMMA argument .

    $default  reduce using rule 129 (arguments)


State 178

  126 func_call: IDENT LEFT_PAREN arguments . RIGHT_PAREN
  127          | IDENT ASSIGN_OP IDENT LEFT_PAREN arguments . RIGHT_PAREN
  129 arguments: arguments . COMMA argument

    RIGHT_PAREN  shift, and go to state 189
    COMMA        shift, and go to state 162


State 179

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STRING]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   18 tail: LEFT_CURLY_BRACKET . statements RIGHT_CURLY_BRACKET
   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30           | . bool_expression
   31           | . func_call
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   92 expression_statement: . expression SEMICOLON
   93 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, TRUE_TOKEN, FALSE_TOKEN, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   94           | . statement
   95           | . statements statement
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  121 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  126 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 21
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    IF              shift, and go to state 26
    WHILE           shift, and go to state 27
    FOR             shift, and go to state 28
    DO              shift, and go to state 29
    SWITCH          shift, and go to state 30
    RETURN          shift, and go to state 31
    TRUE_TOKEN      shift, and go to state 32
    FALSE_TOKEN     shift, and go to state 33
    ENUM            shift, and go to state 34
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    INTEGER              reduce using rule 12 (beforedecl)
    INTEGER              [reduce using rule 93 (statements)]
    FLOAT                reduce using rule 12 (beforedecl)
    FLOAT                [reduce using rule 93 (statements)]
    DOUBLE               reduce using rule 12 (beforedecl)
    DOUBLE               [reduce using rule 93 (statements)]
    VOID                 reduce using rule 12 (beforedecl)
    VOID                 [reduce using rule 93 (statements)]
    BOOLEAN              reduce using rule 12 (beforedecl)
    BOOLEAN              [reduce using rule 93 (statements)]
    CHAR                 reduce using rule 12 (beforedecl)
    CHAR                 [reduce using rule 93 (statements)]
    CONST                [reduce using rule 93 (statements)]
    STRING               reduce using rule 12 (beforedecl)
    STRING               [reduce using rule 93 (statements)]
    IDENT                [reduce using rule 93 (statements)]
    CONST_INT            [reduce using rule 93 (statements)]
    CONST_FLOAT          [reduce using rule 93 (statements)]
    CONST_CHAR           [reduce using rule 93 (statements)]
    STRING_LITERAL       [reduce using rule 93 (statements)]
    IF                   [reduce using rule 93 (statements)]
    WHILE                [reduce using rule 93 (statements)]
    FOR                  [reduce using rule 93 (statements)]
    DO                   [reduce using rule 93 (statements)]
    SWITCH               [reduce using rule 93 (statements)]
    RETURN               [reduce using rule 93 (statements)]
    TRUE_TOKEN           [reduce using rule 93 (statements)]
    FALSE_TOKEN          [reduce using rule 93 (statements)]
    ENUM                 [reduce using rule 93 (statements)]
    LEFT_PAREN           [reduce using rule 93 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 93 (statements)
    INC_OP               [reduce using rule 93 (statements)]
    DEC_OP               [reduce using rule 93 (statements)]
    NOT_OP               [reduce using rule 93 (statements)]
    $default             reduce using rule 12 (beforedecl)

    beforedecl            go to state 4
    declaration           go to state 5
    declarations          go to state 40
    bool_expression       go to state 41
    assign                go to state 42
    expression            go to state 43
    simpleExp             go to state 44
    andExp                go to state 45
    bitRelExp             go to state 46
    relExp                go to state 47
    bitshiftExp           go to state 48
    sumExp                go to state 49
    mulExp                go to state 50
    unaryExp              go to state 51
    value                 go to state 52
    if_statement          go to state 53
    while_statement       go to state 54
    for_statement         go to state 55
    do_statement          go to state 56
    switch_statement      go to state 57
    return_statement      go to state 58
    expression_statement  go to state 59
    statements            go to state 190
    statement             go to state 61
    enum_statement        go to state 62
    func_call             go to state 63


State 180

   72 else_if: . ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   73        | . else_if ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   74        | . %empty  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, FUNC, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   77 if_statement: IF LEFT_PAREN bool_expression RIGHT_PAREN tail . else_if else_part

    ELIF  shift, and go to state 191

    ELIF      [reduce using rule 74 (else_if)]
    $default  reduce using rule 74 (else_if)

    else_if  go to state 192


State 181

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STRING]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   17 tail: statements .  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, FUNC, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30           | . bool_expression
   31           | . func_call
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   92 expression_statement: . expression SEMICOLON
   95 statements: statements . statement
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  121 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  126 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 21
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    IF              shift, and go to state 26
    WHILE           shift, and go to state 27
    FOR             shift, and go to state 28
    DO              shift, and go to state 29
    SWITCH          shift, and go to state 30
    RETURN          shift, and go to state 31
    TRUE_TOKEN      shift, and go to state 32
    FALSE_TOKEN     shift, and go to state 33
    ENUM            shift, and go to state 34
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    $end                 reduce using rule 17 (tail)
    INTEGER              reduce using rule 12 (beforedecl)
    INTEGER              [reduce using rule 17 (tail)]
    FLOAT                reduce using rule 12 (beforedecl)
    FLOAT                [reduce using rule 17 (tail)]
    DOUBLE               reduce using rule 12 (beforedecl)
    DOUBLE               [reduce using rule 17 (tail)]
    VOID                 reduce using rule 12 (beforedecl)
    VOID                 [reduce using rule 17 (tail)]
    BOOLEAN              reduce using rule 12 (beforedecl)
    BOOLEAN              [reduce using rule 17 (tail)]
    CHAR                 reduce using rule 12 (beforedecl)
    CHAR                 [reduce using rule 17 (tail)]
    CONST                [reduce using rule 17 (tail)]
    STRING               reduce using rule 12 (beforedecl)
    STRING               [reduce using rule 17 (tail)]
    IDENT                [reduce using rule 17 (tail)]
    CONST_INT            [reduce using rule 17 (tail)]
    CONST_FLOAT          [reduce using rule 17 (tail)]
    CONST_CHAR           [reduce using rule 17 (tail)]
    STRING_LITERAL       [reduce using rule 17 (tail)]
    IF                   [reduce using rule 17 (tail)]
    ELSE                 reduce using rule 17 (tail)
    ELIF                 reduce using rule 17 (tail)
    WHILE                [reduce using rule 17 (tail)]
    FOR                  [reduce using rule 17 (tail)]
    DO                   [reduce using rule 17 (tail)]
    SWITCH               [reduce using rule 17 (tail)]
    RETURN               [reduce using rule 17 (tail)]
    BREAK                reduce using rule 17 (tail)
    CONTINUE             reduce using rule 17 (tail)
    TRUE_TOKEN           [reduce using rule 17 (tail)]
    FALSE_TOKEN          [reduce using rule 17 (tail)]
    ENUM                 [reduce using rule 17 (tail)]
    FUNC                 reduce using rule 17 (tail)
    LEFT_PAREN           [reduce using rule 17 (tail)]
    RIGHT_CURLY_BRACKET  reduce using rule 17 (tail)
    INC_OP               [reduce using rule 17 (tail)]
    DEC_OP               [reduce using rule 17 (tail)]
    NOT_OP               [reduce using rule 17 (tail)]
    $default             reduce using rule 12 (beforedecl)

    beforedecl            go to state 4
    declaration           go to state 5
    declarations          go to state 40
    bool_expression       go to state 41
    assign                go to state 42
    expression            go to state 43
    simpleExp             go to state 44
    andExp                go to state 45
    bitRelExp             go to state 46
    relExp                go to state 47
    bitshiftExp           go to state 48
    sumExp                go to state 49
    mulExp                go to state 50
    unaryExp              go to state 51
    value                 go to state 52
    if_statement          go to state 53
    while_statement       go to state 54
    for_statement         go to state 55
    do_statement          go to state 56
    switch_statement      go to state 57
    return_statement      go to state 58
    expression_statement  go to state 59
    statement             go to state 118
    enum_statement        go to state 62
    func_call             go to state 63


State 182

   78 while_statement: WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop .

    $default  reduce using rule 78 (while_statement)


State 183

   79 for_statement: FOR LEFT_PAREN assign SEMICOLON bool_expression . SEMICOLON expression RIGHT_PAREN tail_inloop

    SEMICOLON  shift, and go to state 193


State 184

   80 do_statement: DO tail_inloop WHILE LEFT_PAREN bool_expression . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN  shift, and go to state 194


State 185

   81 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET . cases RIGHT_CURLY_BRACKET
   82 cases: . case
   83      | . cases case
   84      | . cases default
   86 case: . CASE expression COLON statements BREAK SEMICOLON

    CASE  shift, and go to state 195

    cases  go to state 196
    case   go to state 197


State 186

   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
  125 one_val: IDENT ASSIGN_OP . value

    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25

    value  go to state 198


State 187

  121 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET .

    $default  reduce using rule 121 (enum_statement)


State 188

  123 enum_list: enum_list COMMA . one_val
  124 one_val: . IDENT
  125        | . IDENT ASSIGN_OP value

    IDENT  shift, and go to state 171

    one_val  go to state 199


State 189

  126 func_call: IDENT LEFT_PAREN arguments RIGHT_PAREN .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON]
  127          | IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON]

    RIGHT_PAREN  reduce using rule 126 (func_call)
    RIGHT_PAREN  [reduce using rule 127 (func_call)]
    SEMICOLON    reduce using rule 126 (func_call)
    SEMICOLON    [reduce using rule 127 (func_call)]
    COMMA        reduce using rule 126 (func_call)
    COMMA        [reduce using rule 127 (func_call)]
    COLON        reduce using rule 126 (func_call)
    COLON        [reduce using rule 127 (func_call)]
    $default     reduce using rule 126 (func_call)


State 190

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STRING]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   18 tail: LEFT_CURLY_BRACKET statements . RIGHT_CURLY_BRACKET
   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30           | . bool_expression
   31           | . func_call
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   92 expression_statement: . expression SEMICOLON
   95 statements: statements . statement
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  121 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  126 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST                shift, and go to state 1
    IDENT                shift, and go to state 21
    CONST_INT            shift, and go to state 22
    CONST_FLOAT          shift, and go to state 23
    CONST_CHAR           shift, and go to state 24
    STRING_LITERAL       shift, and go to state 25
    IF                   shift, and go to state 26
    WHILE                shift, and go to state 27
    FOR                  shift, and go to state 28
    DO                   shift, and go to state 29
    SWITCH               shift, and go to state 30
    RETURN               shift, and go to state 31
    TRUE_TOKEN           shift, and go to state 32
    FALSE_TOKEN          shift, and go to state 33
    ENUM                 shift, and go to state 34
    LEFT_PAREN           shift, and go to state 35
    RIGHT_CURLY_BRACKET  shift, and go to state 200
    INC_OP               shift, and go to state 36
    DEC_OP               shift, and go to state 37
    NOT_OP               shift, and go to state 38

    $default  reduce using rule 12 (beforedecl)

    beforedecl            go to state 4
    declaration           go to state 5
    declarations          go to state 40
    bool_expression       go to state 41
    assign                go to state 42
    expression            go to state 43
    simpleExp             go to state 44
    andExp                go to state 45
    bitRelExp             go to state 46
    relExp                go to state 47
    bitshiftExp           go to state 48
    sumExp                go to state 49
    mulExp                go to state 50
    unaryExp              go to state 51
    value                 go to state 52
    if_statement          go to state 53
    while_statement       go to state 54
    for_statement         go to state 55
    do_statement          go to state 56
    switch_statement      go to state 57
    return_statement      go to state 58
    expression_statement  go to state 59
    statement             go to state 118
    enum_statement        go to state 62
    func_call             go to state 63


State 191

   72 else_if: ELIF . LEFT_PAREN bool_expression RIGHT_PAREN tail

    LEFT_PAREN  shift, and go to state 201


State 192

   73 else_if: else_if . ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   75 else_part: . ELSE tail
   76          | . %empty  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, FUNC, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   77 if_statement: IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if . else_part

    ELSE  shift, and go to state 202
    ELIF  shift, and go to state 203

    ELSE      [reduce using rule 76 (else_part)]
    ELIF      [reduce using rule 76 (else_part)]
    $default  reduce using rule 76 (else_part)

    else_part  go to state 204


State 193

   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30           | . bool_expression
   31           | . func_call
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   79 for_statement: FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON . expression RIGHT_PAREN tail_inloop
  126 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 21
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    TRUE_TOKEN      shift, and go to state 32
    FALSE_TOKEN     shift, and go to state 33
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    bool_expression  go to state 41
    assign           go to state 42
    expression       go to state 205
    simpleExp        go to state 44
    andExp           go to state 45
    bitRelExp        go to state 46
    relExp           go to state 47
    bitshiftExp      go to state 48
    sumExp           go to state 49
    mulExp           go to state 50
    unaryExp         go to state 51
    value            go to state 52
    func_call        go to state 63


State 194

   80 do_statement: DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN . SEMICOLON

    SEMICOLON  shift, and go to state 206


State 195

   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30           | . bool_expression
   31           | . func_call
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   86 case: CASE . expression COLON statements BREAK SEMICOLON
  126 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 21
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    TRUE_TOKEN      shift, and go to state 32
    FALSE_TOKEN     shift, and go to state 33
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    bool_expression  go to state 41
    assign           go to state 42
    expression       go to state 207
    simpleExp        go to state 44
    andExp           go to state 45
    bitRelExp        go to state 46
    relExp           go to state 47
    bitshiftExp      go to state 48
    sumExp           go to state 49
    mulExp           go to state 50
    unaryExp         go to state 51
    value            go to state 52
    func_call        go to state 63


State 196

   81 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases . RIGHT_CURLY_BRACKET
   83 cases: cases . case
   84      | cases . default
   85 default: . DEFAULT COLON statements BREAK SEMICOLON
   86 case: . CASE expression COLON statements BREAK SEMICOLON

    CASE                 shift, and go to state 195
    DEFAULT              shift, and go to state 208
    RIGHT_CURLY_BRACKET  shift, and go to state 209

    default  go to state 210
    case     go to state 211


State 197

   82 cases: case .

    $default  reduce using rule 82 (cases)


State 198

  125 one_val: IDENT ASSIGN_OP value .

    $default  reduce using rule 125 (one_val)


State 199

  123 enum_list: enum_list COMMA one_val .

    $default  reduce using rule 123 (enum_list)


State 200

   18 tail: LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET .

    $default  reduce using rule 18 (tail)


State 201

   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   72 else_if: ELIF LEFT_PAREN . bool_expression RIGHT_PAREN tail

    IDENT           shift, and go to state 131
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    TRUE_TOKEN      shift, and go to state 32
    FALSE_TOKEN     shift, and go to state 33
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    bool_expression  go to state 212
    relExp           go to state 133
    bitshiftExp      go to state 48
    sumExp           go to state 49
    mulExp           go to state 50
    unaryExp         go to state 51
    value            go to state 52


State 202

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STRING]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   17 tail: . statements
   18     | . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30           | . bool_expression
   31           | . func_call
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   75 else_part: ELSE . tail
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   92 expression_statement: . expression SEMICOLON
   93 statements: . %empty  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, FUNC, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   94           | . statement
   95           | . statements statement
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  121 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  126 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST               shift, and go to state 1
    IDENT               shift, and go to state 21
    CONST_INT           shift, and go to state 22
    CONST_FLOAT         shift, and go to state 23
    CONST_CHAR          shift, and go to state 24
    STRING_LITERAL      shift, and go to state 25
    IF                  shift, and go to state 26
    WHILE               shift, and go to state 27
    FOR                 shift, and go to state 28
    DO                  shift, and go to state 29
    SWITCH              shift, and go to state 30
    RETURN              shift, and go to state 31
    TRUE_TOKEN          shift, and go to state 32
    FALSE_TOKEN         shift, and go to state 33
    ENUM                shift, and go to state 34
    LEFT_PAREN          shift, and go to state 35
    LEFT_CURLY_BRACKET  shift, and go to state 179
    INC_OP              shift, and go to state 36
    DEC_OP              shift, and go to state 37
    NOT_OP              shift, and go to state 38

    $end                 reduce using rule 93 (statements)
    INTEGER              reduce using rule 12 (beforedecl)
    INTEGER              [reduce using rule 93 (statements)]
    FLOAT                reduce using rule 12 (beforedecl)
    FLOAT                [reduce using rule 93 (statements)]
    DOUBLE               reduce using rule 12 (beforedecl)
    DOUBLE               [reduce using rule 93 (statements)]
    VOID                 reduce using rule 12 (beforedecl)
    VOID                 [reduce using rule 93 (statements)]
    BOOLEAN              reduce using rule 12 (beforedecl)
    BOOLEAN              [reduce using rule 93 (statements)]
    CHAR                 reduce using rule 12 (beforedecl)
    CHAR                 [reduce using rule 93 (statements)]
    CONST                [reduce using rule 93 (statements)]
    STRING               reduce using rule 12 (beforedecl)
    STRING               [reduce using rule 93 (statements)]
    IDENT                [reduce using rule 93 (statements)]
    CONST_INT            [reduce using rule 93 (statements)]
    CONST_FLOAT          [reduce using rule 93 (statements)]
    CONST_CHAR           [reduce using rule 93 (statements)]
    STRING_LITERAL       [reduce using rule 93 (statements)]
    IF                   [reduce using rule 93 (statements)]
    ELSE                 reduce using rule 93 (statements)
    ELIF                 reduce using rule 93 (statements)
    WHILE                [reduce using rule 93 (statements)]
    FOR                  [reduce using rule 93 (statements)]
    DO                   [reduce using rule 93 (statements)]
    SWITCH               [reduce using rule 93 (statements)]
    RETURN               [reduce using rule 93 (statements)]
    BREAK                reduce using rule 93 (statements)
    CONTINUE             reduce using rule 93 (statements)
    TRUE_TOKEN           [reduce using rule 93 (statements)]
    FALSE_TOKEN          [reduce using rule 93 (statements)]
    ENUM                 [reduce using rule 93 (statements)]
    FUNC                 reduce using rule 93 (statements)
    LEFT_PAREN           [reduce using rule 93 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 93 (statements)
    INC_OP               [reduce using rule 93 (statements)]
    DEC_OP               [reduce using rule 93 (statements)]
    NOT_OP               [reduce using rule 93 (statements)]
    $default             reduce using rule 12 (beforedecl)

    beforedecl            go to state 4
    declaration           go to state 5
    declarations          go to state 40
    tail                  go to state 213
    bool_expression       go to state 41
    assign                go to state 42
    expression            go to state 43
    simpleExp             go to state 44
    andExp                go to state 45
    bitRelExp             go to state 46
    relExp                go to state 47
    bitshiftExp           go to state 48
    sumExp                go to state 49
    mulExp                go to state 50
    unaryExp              go to state 51
    value                 go to state 52
    if_statement          go to state 53
    while_statement       go to state 54
    for_statement         go to state 55
    do_statement          go to state 56
    switch_statement      go to state 57
    return_statement      go to state 58
    expression_statement  go to state 59
    statements            go to state 181
    statement             go to state 61
    enum_statement        go to state 62
    func_call             go to state 63


State 203

   73 else_if: else_if ELIF . LEFT_PAREN bool_expression RIGHT_PAREN tail

    LEFT_PAREN  shift, and go to state 214


State 204

   77 if_statement: IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part .

    $default  reduce using rule 77 (if_statement)


State 205

   79 for_statement: FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression . RIGHT_PAREN tail_inloop

    RIGHT_PAREN  shift, and go to state 215


State 206

   80 do_statement: DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON .

    $default  reduce using rule 80 (do_statement)


State 207

   86 case: CASE expression . COLON statements BREAK SEMICOLON

    COLON  shift, and go to state 216


State 208

   85 default: DEFAULT . COLON statements BREAK SEMICOLON

    COLON  shift, and go to state 217


State 209

   81 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .

    $default  reduce using rule 81 (switch_statement)


State 210

   84 cases: cases default .

    $default  reduce using rule 84 (cases)


State 211

   83 cases: cases case .

    $default  reduce using rule 83 (cases)


State 212

   72 else_if: ELIF LEFT_PAREN bool_expression . RIGHT_PAREN tail

    RIGHT_PAREN  shift, and go to state 218


State 213

   75 else_part: ELSE tail .

    $default  reduce using rule 75 (else_part)


State 214

   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   73 else_if: else_if ELIF LEFT_PAREN . bool_expression RIGHT_PAREN tail

    IDENT           shift, and go to state 131
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    TRUE_TOKEN      shift, and go to state 32
    FALSE_TOKEN     shift, and go to state 33
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    bool_expression  go to state 219
    relExp           go to state 133
    bitshiftExp      go to state 48
    sumExp           go to state 49
    mulExp           go to state 50
    unaryExp         go to state 51
    value            go to state 52


State 215

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STRING]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   19 tail_inloop: . statements_inloop
   20            | . LEFT_CURLY_BRACKET statements_inloop RIGHT_CURLY_BRACKET
   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30           | . bool_expression
   31           | . func_call
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   79              | FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN . tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   90 break_statement: . BREAK SEMICOLON
   91 continue_statement: . CONTINUE SEMICOLON
   92 expression_statement: . expression SEMICOLON
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  105 statement_inloop: . statement
  106                 | . break_statement
  107                 | . continue_statement
  108 statements_inloop: . statement_inloop
  109                  | . statements_inloop statement_inloop
  121 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  126 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST               shift, and go to state 1
    IDENT               shift, and go to state 21
    CONST_INT           shift, and go to state 22
    CONST_FLOAT         shift, and go to state 23
    CONST_CHAR          shift, and go to state 24
    STRING_LITERAL      shift, and go to state 25
    IF                  shift, and go to state 26
    WHILE               shift, and go to state 27
    FOR                 shift, and go to state 28
    DO                  shift, and go to state 29
    SWITCH              shift, and go to state 30
    RETURN              shift, and go to state 31
    BREAK               shift, and go to state 76
    CONTINUE            shift, and go to state 77
    TRUE_TOKEN          shift, and go to state 32
    FALSE_TOKEN         shift, and go to state 33
    ENUM                shift, and go to state 34
    LEFT_PAREN          shift, and go to state 35
    LEFT_CURLY_BRACKET  shift, and go to state 78
    INC_OP              shift, and go to state 36
    DEC_OP              shift, and go to state 37
    NOT_OP              shift, and go to state 38

    $default  reduce using rule 12 (beforedecl)

    beforedecl            go to state 4
    declaration           go to state 5
    declarations          go to state 40
    tail_inloop           go to state 220
    bool_expression       go to state 41
    assign                go to state 42
    expression            go to state 43
    simpleExp             go to state 44
    andExp                go to state 45
    bitRelExp             go to state 46
    relExp                go to state 47
    bitshiftExp           go to state 48
    sumExp                go to state 49
    mulExp                go to state 50
    unaryExp              go to state 51
    value                 go to state 52
    if_statement          go to state 53
    while_statement       go to state 54
    for_statement         go to state 55
    do_statement          go to state 56
    switch_statement      go to state 57
    return_statement      go to state 58
    break_statement       go to state 80
    continue_statement    go to state 81
    expression_statement  go to state 59
    statement             go to state 82
    statement_inloop      go to state 83
    statements_inloop     go to state 84
    enum_statement        go to state 62
    func_call             go to state 63


State 216

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STRING]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30           | . bool_expression
   31           | . func_call
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   86 case: CASE expression COLON . statements BREAK SEMICOLON
   89 return_statement: . RETURN return_val SEMICOLON
   92 expression_statement: . expression SEMICOLON
   93 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, TRUE_TOKEN, FALSE_TOKEN, ENUM, LEFT_PAREN, INC_OP, DEC_OP, NOT_OP]
   94           | . statement
   95           | . statements statement
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  121 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  126 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 21
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    IF              shift, and go to state 26
    WHILE           shift, and go to state 27
    FOR             shift, and go to state 28
    DO              shift, and go to state 29
    SWITCH          shift, and go to state 30
    RETURN          shift, and go to state 31
    TRUE_TOKEN      shift, and go to state 32
    FALSE_TOKEN     shift, and go to state 33
    ENUM            shift, and go to state 34
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    INTEGER         reduce using rule 12 (beforedecl)
    INTEGER         [reduce using rule 93 (statements)]
    FLOAT           reduce using rule 12 (beforedecl)
    FLOAT           [reduce using rule 93 (statements)]
    DOUBLE          reduce using rule 12 (beforedecl)
    DOUBLE          [reduce using rule 93 (statements)]
    VOID            reduce using rule 12 (beforedecl)
    VOID            [reduce using rule 93 (statements)]
    BOOLEAN         reduce using rule 12 (beforedecl)
    BOOLEAN         [reduce using rule 93 (statements)]
    CHAR            reduce using rule 12 (beforedecl)
    CHAR            [reduce using rule 93 (statements)]
    CONST           [reduce using rule 93 (statements)]
    STRING          reduce using rule 12 (beforedecl)
    STRING          [reduce using rule 93 (statements)]
    IDENT           [reduce using rule 93 (statements)]
    CONST_INT       [reduce using rule 93 (statements)]
    CONST_FLOAT     [reduce using rule 93 (statements)]
    CONST_CHAR      [reduce using rule 93 (statements)]
    STRING_LITERAL  [reduce using rule 93 (statements)]
    IF              [reduce using rule 93 (statements)]
    WHILE           [reduce using rule 93 (statements)]
    FOR             [reduce using rule 93 (statements)]
    DO              [reduce using rule 93 (statements)]
    SWITCH          [reduce using rule 93 (statements)]
    RETURN          [reduce using rule 93 (statements)]
    BREAK           reduce using rule 93 (statements)
    TRUE_TOKEN      [reduce using rule 93 (statements)]
    FALSE_TOKEN     [reduce using rule 93 (statements)]
    ENUM            [reduce using rule 93 (statements)]
    LEFT_PAREN      [reduce using rule 93 (statements)]
    INC_OP          [reduce using rule 93 (statements)]
    DEC_OP          [reduce using rule 93 (statements)]
    NOT_OP          [reduce using rule 93 (statements)]
    $default        reduce using rule 12 (beforedecl)

    beforedecl            go to state 4
    declaration           go to state 5
    declarations          go to state 40
    bool_expression       go to state 41
    assign                go to state 42
    expression            go to state 43
    simpleExp             go to state 44
    andExp                go to state 45
    bitRelExp             go to state 46
    relExp                go to state 47
    bitshiftExp           go to state 48
    sumExp                go to state 49
    mulExp                go to state 50
    unaryExp              go to state 51
    value                 go to state 52
    if_statement          go to state 53
    while_statement       go to state 54
    for_statement         go to state 55
    do_statement          go to state 56
    switch_statement      go to state 57
    return_statement      go to state 58
    expression_statement  go to state 59
    statements            go to state 221
    statement             go to state 61
    enum_statement        go to state 62
    func_call             go to state 63


State 217

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STRING]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30           | . bool_expression
   31           | . func_call
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   85 default: DEFAULT COLON . statements BREAK SEMICOLON
   89 return_statement: . RETURN return_val SEMICOLON
   92 expression_statement: . expression SEMICOLON
   93 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, TRUE_TOKEN, FALSE_TOKEN, ENUM, LEFT_PAREN, INC_OP, DEC_OP, NOT_OP]
   94           | . statement
   95           | . statements statement
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  121 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  126 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 21
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    IF              shift, and go to state 26
    WHILE           shift, and go to state 27
    FOR             shift, and go to state 28
    DO              shift, and go to state 29
    SWITCH          shift, and go to state 30
    RETURN          shift, and go to state 31
    TRUE_TOKEN      shift, and go to state 32
    FALSE_TOKEN     shift, and go to state 33
    ENUM            shift, and go to state 34
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    INTEGER         reduce using rule 12 (beforedecl)
    INTEGER         [reduce using rule 93 (statements)]
    FLOAT           reduce using rule 12 (beforedecl)
    FLOAT           [reduce using rule 93 (statements)]
    DOUBLE          reduce using rule 12 (beforedecl)
    DOUBLE          [reduce using rule 93 (statements)]
    VOID            reduce using rule 12 (beforedecl)
    VOID            [reduce using rule 93 (statements)]
    BOOLEAN         reduce using rule 12 (beforedecl)
    BOOLEAN         [reduce using rule 93 (statements)]
    CHAR            reduce using rule 12 (beforedecl)
    CHAR            [reduce using rule 93 (statements)]
    CONST           [reduce using rule 93 (statements)]
    STRING          reduce using rule 12 (beforedecl)
    STRING          [reduce using rule 93 (statements)]
    IDENT           [reduce using rule 93 (statements)]
    CONST_INT       [reduce using rule 93 (statements)]
    CONST_FLOAT     [reduce using rule 93 (statements)]
    CONST_CHAR      [reduce using rule 93 (statements)]
    STRING_LITERAL  [reduce using rule 93 (statements)]
    IF              [reduce using rule 93 (statements)]
    WHILE           [reduce using rule 93 (statements)]
    FOR             [reduce using rule 93 (statements)]
    DO              [reduce using rule 93 (statements)]
    SWITCH          [reduce using rule 93 (statements)]
    RETURN          [reduce using rule 93 (statements)]
    BREAK           reduce using rule 93 (statements)
    TRUE_TOKEN      [reduce using rule 93 (statements)]
    FALSE_TOKEN     [reduce using rule 93 (statements)]
    ENUM            [reduce using rule 93 (statements)]
    LEFT_PAREN      [reduce using rule 93 (statements)]
    INC_OP          [reduce using rule 93 (statements)]
    DEC_OP          [reduce using rule 93 (statements)]
    NOT_OP          [reduce using rule 93 (statements)]
    $default        reduce using rule 12 (beforedecl)

    beforedecl            go to state 4
    declaration           go to state 5
    declarations          go to state 40
    bool_expression       go to state 41
    assign                go to state 42
    expression            go to state 43
    simpleExp             go to state 44
    andExp                go to state 45
    bitRelExp             go to state 46
    relExp                go to state 47
    bitshiftExp           go to state 48
    sumExp                go to state 49
    mulExp                go to state 50
    unaryExp              go to state 51
    value                 go to state 52
    if_statement          go to state 53
    while_statement       go to state 54
    for_statement         go to state 55
    do_statement          go to state 56
    switch_statement      go to state 57
    return_statement      go to state 58
    expression_statement  go to state 59
    statements            go to state 222
    statement             go to state 61
    enum_statement        go to state 62
    func_call             go to state 63


State 218

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STRING]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   17 tail: . statements
   18     | . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30           | . bool_expression
   31           | . func_call
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   72 else_if: ELIF LEFT_PAREN bool_expression RIGHT_PAREN . tail
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   92 expression_statement: . expression SEMICOLON
   93 statements: . %empty  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, FUNC, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   94           | . statement
   95           | . statements statement
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  121 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  126 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST               shift, and go to state 1
    IDENT               shift, and go to state 21
    CONST_INT           shift, and go to state 22
    CONST_FLOAT         shift, and go to state 23
    CONST_CHAR          shift, and go to state 24
    STRING_LITERAL      shift, and go to state 25
    IF                  shift, and go to state 26
    WHILE               shift, and go to state 27
    FOR                 shift, and go to state 28
    DO                  shift, and go to state 29
    SWITCH              shift, and go to state 30
    RETURN              shift, and go to state 31
    TRUE_TOKEN          shift, and go to state 32
    FALSE_TOKEN         shift, and go to state 33
    ENUM                shift, and go to state 34
    LEFT_PAREN          shift, and go to state 35
    LEFT_CURLY_BRACKET  shift, and go to state 179
    INC_OP              shift, and go to state 36
    DEC_OP              shift, and go to state 37
    NOT_OP              shift, and go to state 38

    $end                 reduce using rule 93 (statements)
    INTEGER              reduce using rule 12 (beforedecl)
    INTEGER              [reduce using rule 93 (statements)]
    FLOAT                reduce using rule 12 (beforedecl)
    FLOAT                [reduce using rule 93 (statements)]
    DOUBLE               reduce using rule 12 (beforedecl)
    DOUBLE               [reduce using rule 93 (statements)]
    VOID                 reduce using rule 12 (beforedecl)
    VOID                 [reduce using rule 93 (statements)]
    BOOLEAN              reduce using rule 12 (beforedecl)
    BOOLEAN              [reduce using rule 93 (statements)]
    CHAR                 reduce using rule 12 (beforedecl)
    CHAR                 [reduce using rule 93 (statements)]
    CONST                [reduce using rule 93 (statements)]
    STRING               reduce using rule 12 (beforedecl)
    STRING               [reduce using rule 93 (statements)]
    IDENT                [reduce using rule 93 (statements)]
    CONST_INT            [reduce using rule 93 (statements)]
    CONST_FLOAT          [reduce using rule 93 (statements)]
    CONST_CHAR           [reduce using rule 93 (statements)]
    STRING_LITERAL       [reduce using rule 93 (statements)]
    IF                   [reduce using rule 93 (statements)]
    ELSE                 reduce using rule 93 (statements)
    ELIF                 reduce using rule 93 (statements)
    WHILE                [reduce using rule 93 (statements)]
    FOR                  [reduce using rule 93 (statements)]
    DO                   [reduce using rule 93 (statements)]
    SWITCH               [reduce using rule 93 (statements)]
    RETURN               [reduce using rule 93 (statements)]
    BREAK                reduce using rule 93 (statements)
    CONTINUE             reduce using rule 93 (statements)
    TRUE_TOKEN           [reduce using rule 93 (statements)]
    FALSE_TOKEN          [reduce using rule 93 (statements)]
    ENUM                 [reduce using rule 93 (statements)]
    FUNC                 reduce using rule 93 (statements)
    LEFT_PAREN           [reduce using rule 93 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 93 (statements)
    INC_OP               [reduce using rule 93 (statements)]
    DEC_OP               [reduce using rule 93 (statements)]
    NOT_OP               [reduce using rule 93 (statements)]
    $default             reduce using rule 12 (beforedecl)

    beforedecl            go to state 4
    declaration           go to state 5
    declarations          go to state 40
    tail                  go to state 223
    bool_expression       go to state 41
    assign                go to state 42
    expression            go to state 43
    simpleExp             go to state 44
    andExp                go to state 45
    bitRelExp             go to state 46
    relExp                go to state 47
    bitshiftExp           go to state 48
    sumExp                go to state 49
    mulExp                go to state 50
    unaryExp              go to state 51
    value                 go to state 52
    if_statement          go to state 53
    while_statement       go to state 54
    for_statement         go to state 55
    do_statement          go to state 56
    switch_statement      go to state 57
    return_statement      go to state 58
    expression_statement  go to state 59
    statements            go to state 181
    statement             go to state 61
    enum_statement        go to state 62
    func_call             go to state 63


State 219

   73 else_if: else_if ELIF LEFT_PAREN bool_expression . RIGHT_PAREN tail

    RIGHT_PAREN  shift, and go to state 224


State 220

   79 for_statement: FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop .

    $default  reduce using rule 79 (for_statement)


State 221

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STRING]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30           | . bool_expression
   31           | . func_call
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   86 case: CASE expression COLON statements . BREAK SEMICOLON
   89 return_statement: . RETURN return_val SEMICOLON
   92 expression_statement: . expression SEMICOLON
   95 statements: statements . statement
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  121 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  126 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 21
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    IF              shift, and go to state 26
    WHILE           shift, and go to state 27
    FOR             shift, and go to state 28
    DO              shift, and go to state 29
    SWITCH          shift, and go to state 30
    RETURN          shift, and go to state 31
    BREAK           shift, and go to state 225
    TRUE_TOKEN      shift, and go to state 32
    FALSE_TOKEN     shift, and go to state 33
    ENUM            shift, and go to state 34
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    $default  reduce using rule 12 (beforedecl)

    beforedecl            go to state 4
    declaration           go to state 5
    declarations          go to state 40
    bool_expression       go to state 41
    assign                go to state 42
    expression            go to state 43
    simpleExp             go to state 44
    andExp                go to state 45
    bitRelExp             go to state 46
    relExp                go to state 47
    bitshiftExp           go to state 48
    sumExp                go to state 49
    mulExp                go to state 50
    unaryExp              go to state 51
    value                 go to state 52
    if_statement          go to state 53
    while_statement       go to state 54
    for_statement         go to state 55
    do_statement          go to state 56
    switch_statement      go to state 57
    return_statement      go to state 58
    expression_statement  go to state 59
    statement             go to state 118
    enum_statement        go to state 62
    func_call             go to state 63


State 222

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STRING]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30           | . bool_expression
   31           | . func_call
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   85 default: DEFAULT COLON statements . BREAK SEMICOLON
   89 return_statement: . RETURN return_val SEMICOLON
   92 expression_statement: . expression SEMICOLON
   95 statements: statements . statement
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  121 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  126 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 21
    CONST_INT       shift, and go to state 22
    CONST_FLOAT     shift, and go to state 23
    CONST_CHAR      shift, and go to state 24
    STRING_LITERAL  shift, and go to state 25
    IF              shift, and go to state 26
    WHILE           shift, and go to state 27
    FOR             shift, and go to state 28
    DO              shift, and go to state 29
    SWITCH          shift, and go to state 30
    RETURN          shift, and go to state 31
    BREAK           shift, and go to state 226
    TRUE_TOKEN      shift, and go to state 32
    FALSE_TOKEN     shift, and go to state 33
    ENUM            shift, and go to state 34
    LEFT_PAREN      shift, and go to state 35
    INC_OP          shift, and go to state 36
    DEC_OP          shift, and go to state 37
    NOT_OP          shift, and go to state 38

    $default  reduce using rule 12 (beforedecl)

    beforedecl            go to state 4
    declaration           go to state 5
    declarations          go to state 40
    bool_expression       go to state 41
    assign                go to state 42
    expression            go to state 43
    simpleExp             go to state 44
    andExp                go to state 45
    bitRelExp             go to state 46
    relExp                go to state 47
    bitshiftExp           go to state 48
    sumExp                go to state 49
    mulExp                go to state 50
    unaryExp              go to state 51
    value                 go to state 52
    if_statement          go to state 53
    while_statement       go to state 54
    for_statement         go to state 55
    do_statement          go to state 56
    switch_statement      go to state 57
    return_statement      go to state 58
    expression_statement  go to state 59
    statement             go to state 118
    enum_statement        go to state 62
    func_call             go to state 63


State 223

   72 else_if: ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail .

    $default  reduce using rule 72 (else_if)


State 224

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STRING]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   17 tail: . statements
   18     | . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30           | . bool_expression
   31           | . func_call
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   73 else_if: else_if ELIF LEFT_PAREN bool_expression RIGHT_PAREN . tail
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   92 expression_statement: . expression SEMICOLON
   93 statements: . %empty  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, FUNC, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   94           | . statement
   95           | . statements statement
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  121 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  126 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  127          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST               shift, and go to state 1
    IDENT               shift, and go to state 21
    CONST_INT           shift, and go to state 22
    CONST_FLOAT         shift, and go to state 23
    CONST_CHAR          shift, and go to state 24
    STRING_LITERAL      shift, and go to state 25
    IF                  shift, and go to state 26
    WHILE               shift, and go to state 27
    FOR                 shift, and go to state 28
    DO                  shift, and go to state 29
    SWITCH              shift, and go to state 30
    RETURN              shift, and go to state 31
    TRUE_TOKEN          shift, and go to state 32
    FALSE_TOKEN         shift, and go to state 33
    ENUM                shift, and go to state 34
    LEFT_PAREN          shift, and go to state 35
    LEFT_CURLY_BRACKET  shift, and go to state 179
    INC_OP              shift, and go to state 36
    DEC_OP              shift, and go to state 37
    NOT_OP              shift, and go to state 38

    $end                 reduce using rule 93 (statements)
    INTEGER              reduce using rule 12 (beforedecl)
    INTEGER              [reduce using rule 93 (statements)]
    FLOAT                reduce using rule 12 (beforedecl)
    FLOAT                [reduce using rule 93 (statements)]
    DOUBLE               reduce using rule 12 (beforedecl)
    DOUBLE               [reduce using rule 93 (statements)]
    VOID                 reduce using rule 12 (beforedecl)
    VOID                 [reduce using rule 93 (statements)]
    BOOLEAN              reduce using rule 12 (beforedecl)
    BOOLEAN              [reduce using rule 93 (statements)]
    CHAR                 reduce using rule 12 (beforedecl)
    CHAR                 [reduce using rule 93 (statements)]
    CONST                [reduce using rule 93 (statements)]
    STRING               reduce using rule 12 (beforedecl)
    STRING               [reduce using rule 93 (statements)]
    IDENT                [reduce using rule 93 (statements)]
    CONST_INT            [reduce using rule 93 (statements)]
    CONST_FLOAT          [reduce using rule 93 (statements)]
    CONST_CHAR           [reduce using rule 93 (statements)]
    STRING_LITERAL       [reduce using rule 93 (statements)]
    IF                   [reduce using rule 93 (statements)]
    ELSE                 reduce using rule 93 (statements)
    ELIF                 reduce using rule 93 (statements)
    WHILE                [reduce using rule 93 (statements)]
    FOR                  [reduce using rule 93 (statements)]
    DO                   [reduce using rule 93 (statements)]
    SWITCH               [reduce using rule 93 (statements)]
    RETURN               [reduce using rule 93 (statements)]
    BREAK                reduce using rule 93 (statements)
    CONTINUE             reduce using rule 93 (statements)
    TRUE_TOKEN           [reduce using rule 93 (statements)]
    FALSE_TOKEN          [reduce using rule 93 (statements)]
    ENUM                 [reduce using rule 93 (statements)]
    FUNC                 reduce using rule 93 (statements)
    LEFT_PAREN           [reduce using rule 93 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 93 (statements)
    INC_OP               [reduce using rule 93 (statements)]
    DEC_OP               [reduce using rule 93 (statements)]
    NOT_OP               [reduce using rule 93 (statements)]
    $default             reduce using rule 12 (beforedecl)

    beforedecl            go to state 4
    declaration           go to state 5
    declarations          go to state 40
    tail                  go to state 227
    bool_expression       go to state 41
    assign                go to state 42
    expression            go to state 43
    simpleExp             go to state 44
    andExp                go to state 45
    bitRelExp             go to state 46
    relExp                go to state 47
    bitshiftExp           go to state 48
    sumExp                go to state 49
    mulExp                go to state 50
    unaryExp              go to state 51
    value                 go to state 52
    if_statement          go to state 53
    while_statement       go to state 54
    for_statement         go to state 55
    do_statement          go to state 56
    switch_statement      go to state 57
    return_statement      go to state 58
    expression_statement  go to state 59
    statements            go to state 181
    statement             go to state 61
    enum_statement        go to state 62
    func_call             go to state 63


State 225

   86 case: CASE expression COLON statements BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 228


State 226

   85 default: DEFAULT COLON statements BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 229


State 227

   73 else_if: else_if ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail .

    $default  reduce using rule 73 (else_if)


State 228

   86 case: CASE expression COLON statements BREAK SEMICOLON .

    $default  reduce using rule 86 (case)


State 229

   85 default: DEFAULT COLON statements BREAK SEMICOLON .

    $default  reduce using rule 85 (default)
