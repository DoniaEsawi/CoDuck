Terminals unused in grammar

    UNTIL
    LEFT_SQ_BRACKET
    RIGHT_SQ_BRACKET
    QUESTION_MARK
    DOT
    BIT_NOT_OP


State 4 conflicts: 1 shift/reduce
State 10 conflicts: 19 shift/reduce, 15 reduce/reduce
State 13 conflicts: 18 shift/reduce, 8 reduce/reduce
State 15 conflicts: 1 reduce/reduce
State 17 conflicts: 1 reduce/reduce
State 37 conflicts: 1 shift/reduce, 7 reduce/reduce
State 44 conflicts: 2 shift/reduce, 4 reduce/reduce
State 89 conflicts: 20 shift/reduce, 8 reduce/reduce
State 91 conflicts: 4 reduce/reduce
State 132 conflicts: 1 reduce/reduce
State 152 conflicts: 2 shift/reduce
State 153 conflicts: 2 shift/reduce
State 154 conflicts: 2 shift/reduce
State 155 conflicts: 2 shift/reduce
State 166 conflicts: 18 shift/reduce, 8 reduce/reduce
State 179 conflicts: 18 shift/reduce, 8 reduce/reduce
State 180 conflicts: 1 shift/reduce
State 181 conflicts: 18 shift/reduce, 8 reduce/reduce
State 193 conflicts: 2 shift/reduce
State 204 conflicts: 18 shift/reduce, 8 reduce/reduce
State 218 conflicts: 18 shift/reduce, 8 reduce/reduce
State 219 conflicts: 18 shift/reduce, 8 reduce/reduce
State 220 conflicts: 18 shift/reduce, 8 reduce/reduce
State 226 conflicts: 18 shift/reduce, 8 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: program function
    2        | functions

    3 $@1: %empty

    4 program: $@1 declarations statements

    5 type: INTEGER
    6     | FLOAT
    7     | DOUBLE
    8     | VOID
    9     | BOOLEAN
   10     | CHAR
   11     | STRING

   12 beforedecl: CONST
   13           | %empty

   14 declaration: beforedecl type IDENT SEMICOLON
   15            | beforedecl type IDENT ASSIGN_OP expression SEMICOLON

   16 $@2: %empty

   17 declarations: $@2 declaration
   18             | declarations declaration

   19 tail: statements
   20     | LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET

   21 tail_inloop: statements_inloop
   22            | LEFT_CURLY_BRACKET statements_inloop RIGHT_CURLY_BRACKET

   23 bool_expression: relExp
   24                | TRUE_TOKEN
   25                | FALSE_TOKEN

   26 assign: IDENT ASSIGN_OP expression

   27 expression: assign
   28           | IDENT INC_OP
   29           | IDENT DEC_OP
   30           | simpleExp
   31           | IDENT
   32           | bool_expression

   33 simpleExp: simpleExp OR_OP andExp
   34          | andExp

   35 andExp: andExp AND_OP
   36       | bitRelExp

   37 bitRelExp: bitRelExp BIT_OR_OP relExp
   38          | bitRelExp AND relExp
   39          | bitRelExp BIT_XOR_OP relExp
   40          | relExp

   41 op: EQ_OP
   42   | NE_OP
   43   | GT_OP
   44   | LT_OP
   45   | LE_OP
   46   | GE_OP
   47   | OR_OP
   48   | AND_OP

   49 relExp: relExp op bitshiftExp
   50       | bitshiftExp

   51 bitshiftExp: bitshiftExp BIT_LSHIFT_OP sumExp
   52            | bitshiftExp BIT_RSHIFT_OP sumExp
   53            | sumExp

   54 pls_min: ADD_OP
   55        | SUB_OP

   56 mul_div: MUL_OP
   57        | DIV_OP
   58        | MOD_OP

   59 sumExp: sumExp pls_min mulExp
   60       | mulExp

   61 mulExp: mulExp mul_div unaryExp
   62       | unaryExp

   63 unaryExp: INC_OP IDENT
   64         | DEC_OP IDENT
   65         | NOT_OP IDENT
   66         | IDENT
   67         | value
   68         | LEFT_PAREN expression RIGHT_PAREN

   69 value: CONST_INT
   70      | CONST_FLOAT
   71      | CONST_CHAR
   72      | STRING_LITERAL

   73 else_if: ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   74        | else_if ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   75        | %empty

   76 else_part: ELSE tail
   77          | %empty

   78 if_statement: IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part

   79 while_statement: WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop

   80 for_statement: FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

   81 do_statement: DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON

   82 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

   83 cases: case
   84      | cases case
   85      | cases default

   86 default: DEFAULT COLON statements BREAK SEMICOLON

   87 case: CASE expression COLON statements BREAK SEMICOLON

   88 return_val: expression
   89           | %empty

   90 return_statement: RETURN return_val SEMICOLON

   91 break_statement: BREAK SEMICOLON

   92 continue_statement: CONTINUE SEMICOLON

   93 expression_statement: expression SEMICOLON

   94 statements: %empty
   95           | statement
   96           | statements statement

   97 statement: if_statement
   98          | while_statement
   99          | for_statement
  100          | do_statement
  101          | switch_statement
  102          | return_statement
  103          | expression_statement
  104          | declarations
  105          | enum_statement
  106          | func_call

  107 statement_inloop: statement
  108                 | break_statement
  109                 | continue_statement

  110 statements_inloop: statement_inloop
  111                  | statements_inloop statement_inloop

  112 functions: functions function
  113          | function

  114 function: function_head function_tail

  115 param_empty: parameters
  116            | %empty

  117 function_head: FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN type

  118 function_tail: LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET

  119 parameters: parameter
  120           | parameters COMMA parameter
  121           | %empty

  122 parameter: type IDENT

  123 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET

  124 enum_list: one_val
  125          | enum_list COMMA one_val

  126 one_val: IDENT
  127        | IDENT ASSIGN_OP value

  128 func_call: IDENT LEFT_PAREN arguments RIGHT_PAREN
  129          | IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

  130 arguments: argument
  131          | arguments COMMA argument
  132          | %empty

  133 argument: expression


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INTEGER <int_val> (258) 5
    FLOAT <int_val> (259) 6
    DOUBLE <int_val> (260) 7
    VOID <int_val> (261) 8
    BOOLEAN <int_val> (262) 9
    CHAR <int_val> (263) 10
    CONST <int_val> (264) 12
    STRING <int_val> (265) 11
    IDENT <symbol_table_item> (266) 14 15 26 28 29 31 63 64 65 66 117 122 123 126 127 128 129
    CONST_INT <int_val> (267) 69
    CONST_FLOAT <double_val> (268) 70
    CONST_CHAR <char_val> (269) 71
    STRING_LITERAL <str_val> (270) 72
    IF <int_val> (271) 78
    ELSE <int_val> (272) 76
    ELIF <int_val> (273) 73 74
    WHILE <int_val> (274) 79 81
    FOR <int_val> (275) 80
    DO <int_val> (276) 81
    SWITCH <int_val> (277) 82
    CASE <int_val> (278) 87
    DEFAULT <int_val> (279) 86
    RETURN <int_val> (280) 90
    BREAK <int_val> (281) 86 87 91
    CONTINUE <int_val> (282) 92
    TRUE_TOKEN <int_val> (283) 24
    FALSE_TOKEN <int_val> (284) 25
    ENUM <int_val> (285) 123
    FUNC <int_val> (286) 117
    UNTIL <int_val> (287)
    LEFT_PAREN <int_val> (288) 68 73 74 78 79 80 81 82 117 128 129
    RIGHT_PAREN <int_val> (289) 68 73 74 78 79 80 81 82 117 128 129
    LEFT_CURLY_BRACKET <int_val> (290) 20 22 82 118 123
    RIGHT_CURLY_BRACKET <int_val> (291) 20 22 82 118 123
    LEFT_SQ_BRACKET <int_val> (292)
    RIGHT_SQ_BRACKET <int_val> (293)
    SEMICOLON <int_val> (294) 14 15 80 81 86 87 90 91 92 93
    COMMA <int_val> (295) 120 125 131
    COLON <int_val> (296) 86 87
    QUESTION_MARK <int_val> (297)
    DOT <int_val> (298)
    ADD_OP <int_val> (299) 54
    SUB_OP <int_val> (300) 55
    MUL_OP <int_val> (301) 56
    DIV_OP <int_val> (302) 57
    MOD_OP <int_val> (303) 58
    INC_OP <int_val> (304) 28 63
    DEC_OP <int_val> (305) 29 64
    OR_OP <int_val> (306) 33 47
    AND_OP <int_val> (307) 35 48
    NOT_OP <int_val> (308) 65
    BIT_OR_OP <int_val> (309) 37
    AND <int_val> (310) 38
    BIT_XOR_OP <int_val> (311) 39
    BIT_NOT_OP <int_val> (312)
    BIT_LSHIFT_OP <int_val> (313) 51
    BIT_RSHIFT_OP <int_val> (314) 52
    EQ_OP <int_val> (315) 41
    NE_OP <int_val> (316) 42
    GT_OP <int_val> (317) 43
    LT_OP <int_val> (318) 44
    GE_OP <int_val> (319) 46
    LE_OP <int_val> (320) 45
    ASSIGN_OP <int_val> (321) 15 26 127 129


Nonterminals, with rules where they appear

    $accept (67)
        on left: 0
    program (68)
        on left: 1 2 4
        on right: 0 1
    $@1 (69)
        on left: 3
        on right: 4
    type (70)
        on left: 5 6 7 8 9 10 11
        on right: 14 15 117 122
    beforedecl (71)
        on left: 12 13
        on right: 14 15
    declaration (72)
        on left: 14 15
        on right: 17 18
    declarations (73)
        on left: 17 18
        on right: 4 18 104
    $@2 (74)
        on left: 16
        on right: 17
    tail (75)
        on left: 19 20
        on right: 73 74 76 78
    tail_inloop (76)
        on left: 21 22
        on right: 79 80 81
    bool_expression (77)
        on left: 23 24 25
        on right: 32 73 74 78 79 80 81
    assign (78)
        on left: 26
        on right: 27 80
    expression (79)
        on left: 27 28 29 30 31 32
        on right: 15 26 68 80 82 87 88 93 133
    simpleExp (80)
        on left: 33 34
        on right: 30 33
    andExp (81)
        on left: 35 36
        on right: 33 34 35
    bitRelExp (82)
        on left: 37 38 39 40
        on right: 36 37 38 39
    op (83)
        on left: 41 42 43 44 45 46 47 48
        on right: 49
    relExp (84)
        on left: 49 50
        on right: 23 37 38 39 40 49
    bitshiftExp (85)
        on left: 51 52 53
        on right: 49 50 51 52
    pls_min (86)
        on left: 54 55
        on right: 59
    mul_div (87)
        on left: 56 57 58
        on right: 61
    sumExp (88)
        on left: 59 60
        on right: 51 52 53 59
    mulExp (89)
        on left: 61 62
        on right: 59 60 61
    unaryExp (90)
        on left: 63 64 65 66 67 68
        on right: 61 62
    value (91)
        on left: 69 70 71 72
        on right: 67 127
    else_if (92)
        on left: 73 74 75
        on right: 74 78
    else_part (93)
        on left: 76 77
        on right: 78
    if_statement (94)
        on left: 78
        on right: 97
    while_statement (95)
        on left: 79
        on right: 98
    for_statement (96)
        on left: 80
        on right: 99
    do_statement (97)
        on left: 81
        on right: 100
    switch_statement (98)
        on left: 82
        on right: 101
    cases (99)
        on left: 83 84 85
        on right: 82 84 85
    default (100)
        on left: 86
        on right: 85
    case (101)
        on left: 87
        on right: 83 84
    return_val (102)
        on left: 88 89
        on right: 90
    return_statement (103)
        on left: 90
        on right: 102
    break_statement (104)
        on left: 91
        on right: 108
    continue_statement (105)
        on left: 92
        on right: 109
    expression_statement (106)
        on left: 93
        on right: 103
    statements (107)
        on left: 94 95 96
        on right: 4 19 20 86 87 96 118
    statement (108)
        on left: 97 98 99 100 101 102 103 104 105 106
        on right: 95 96 107
    statement_inloop (109)
        on left: 107 108 109
        on right: 110 111
    statements_inloop (110)
        on left: 110 111
        on right: 21 22 111
    functions (111)
        on left: 112 113
        on right: 2 112
    function (112)
        on left: 114
        on right: 1 112 113
    param_empty (113)
        on left: 115 116
        on right: 117
    function_head (114)
        on left: 117
        on right: 114
    function_tail (115)
        on left: 118
        on right: 114
    parameters (116)
        on left: 119 120 121
        on right: 115 120
    parameter (117)
        on left: 122
        on right: 119 120
    enum_statement (118)
        on left: 123
        on right: 105
    enum_list (119)
        on left: 124 125
        on right: 123 125
    one_val (120)
        on left: 126 127
        on right: 124 125
    func_call (121)
        on left: 128 129
        on right: 106
    arguments (122)
        on left: 130 131 132
        on right: 128 129 131
    argument (123)
        on left: 133
        on right: 130 131


State 0

    0 $accept: . program $end
    1 program: . program function
    2        | . functions
    3 $@1: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING]
    4 program: . $@1 declarations statements
  112 functions: . functions function
  113          | . function
  114 function: . function_head function_tail
  117 function_head: . FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN type

    FUNC  shift, and go to state 1

    $default  reduce using rule 3 ($@1)

    program        go to state 2
    $@1            go to state 3
    functions      go to state 4
    function       go to state 5
    function_head  go to state 6


State 1

  117 function_head: FUNC . IDENT LEFT_PAREN param_empty RIGHT_PAREN type

    IDENT  shift, and go to state 7


State 2

    0 $accept: program . $end
    1 program: program . function
  114 function: . function_head function_tail
  117 function_head: . FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN type

    $end  shift, and go to state 8
    FUNC  shift, and go to state 1

    function       go to state 9
    function_head  go to state 6


State 3

    4 program: $@1 . declarations statements
   16 $@2: . %empty
   17 declarations: . $@2 declaration
   18             | . declarations declaration

    $default  reduce using rule 16 ($@2)

    declarations  go to state 10
    $@2           go to state 11


State 4

    2 program: functions .  [$end, FUNC]
  112 functions: functions . function
  114 function: . function_head function_tail
  117 function_head: . FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN type

    FUNC  shift, and go to state 1

    FUNC      [reduce using rule 2 (program)]
    $default  reduce using rule 2 (program)

    function       go to state 12
    function_head  go to state 6


State 5

  113 functions: function .

    $default  reduce using rule 113 (functions)


State 6

  114 function: function_head . function_tail
  118 function_tail: . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 13

    function_tail  go to state 14


State 7

  117 function_head: FUNC IDENT . LEFT_PAREN param_empty RIGHT_PAREN type

    LEFT_PAREN  shift, and go to state 15


State 8

    0 $accept: program $end .

    $default  accept


State 9

    1 program: program function .

    $default  reduce using rule 1 (program)


State 10

    4 program: $@1 declarations . statements
   12 beforedecl: . CONST
   13           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STRING]
   14 declaration: . beforedecl type IDENT SEMICOLON
   15            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   16 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING]
   17 declarations: . $@2 declaration
   18             | . declarations declaration
   18             | declarations . declaration
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   78 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   79 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   80 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   81 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   82 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   90 return_statement: . RETURN return_val SEMICOLON
   93 expression_statement: . expression SEMICOLON
   94 statements: . %empty  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, TRUE_TOKEN, FALSE_TOKEN, ENUM, FUNC, LEFT_PAREN, INC_OP, DEC_OP, NOT_OP]
   95           | . statement
   96           | . statements statement
   97 statement: . if_statement
   98          | . while_statement
   99          | . for_statement
  100          | . do_statement
  101          | . switch_statement
  102          | . return_statement
  103          | . expression_statement
  104          | . declarations
  105          | . enum_statement
  106          | . func_call
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  128 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  129          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST           shift, and go to state 16
    IDENT           shift, and go to state 17
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    IF              shift, and go to state 22
    WHILE           shift, and go to state 23
    FOR             shift, and go to state 24
    DO              shift, and go to state 25
    SWITCH          shift, and go to state 26
    RETURN          shift, and go to state 27
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    ENUM            shift, and go to state 30
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    $end            reduce using rule 94 (statements)
    INTEGER         reduce using rule 13 (beforedecl)
    INTEGER         [reduce using rule 16 ($@2)]
    INTEGER         [reduce using rule 94 (statements)]
    FLOAT           reduce using rule 13 (beforedecl)
    FLOAT           [reduce using rule 16 ($@2)]
    FLOAT           [reduce using rule 94 (statements)]
    DOUBLE          reduce using rule 13 (beforedecl)
    DOUBLE          [reduce using rule 16 ($@2)]
    DOUBLE          [reduce using rule 94 (statements)]
    VOID            reduce using rule 13 (beforedecl)
    VOID            [reduce using rule 16 ($@2)]
    VOID            [reduce using rule 94 (statements)]
    BOOLEAN         reduce using rule 13 (beforedecl)
    BOOLEAN         [reduce using rule 16 ($@2)]
    BOOLEAN         [reduce using rule 94 (statements)]
    CHAR            reduce using rule 13 (beforedecl)
    CHAR            [reduce using rule 16 ($@2)]
    CHAR            [reduce using rule 94 (statements)]
    CONST           [reduce using rule 16 ($@2)]
    CONST           [reduce using rule 94 (statements)]
    STRING          reduce using rule 13 (beforedecl)
    STRING          [reduce using rule 16 ($@2)]
    STRING          [reduce using rule 94 (statements)]
    IDENT           [reduce using rule 94 (statements)]
    CONST_INT       [reduce using rule 94 (statements)]
    CONST_FLOAT     [reduce using rule 94 (statements)]
    CONST_CHAR      [reduce using rule 94 (statements)]
    STRING_LITERAL  [reduce using rule 94 (statements)]
    IF              [reduce using rule 94 (statements)]
    WHILE           [reduce using rule 94 (statements)]
    FOR             [reduce using rule 94 (statements)]
    DO              [reduce using rule 94 (statements)]
    SWITCH          [reduce using rule 94 (statements)]
    RETURN          [reduce using rule 94 (statements)]
    TRUE_TOKEN      [reduce using rule 94 (statements)]
    FALSE_TOKEN     [reduce using rule 94 (statements)]
    ENUM            [reduce using rule 94 (statements)]
    FUNC            reduce using rule 94 (statements)
    LEFT_PAREN      [reduce using rule 94 (statements)]
    INC_OP          [reduce using rule 94 (statements)]
    DEC_OP          [reduce using rule 94 (statements)]
    NOT_OP          [reduce using rule 94 (statements)]
    $default        reduce using rule 13 (beforedecl)

    beforedecl            go to state 35
    declaration           go to state 36
    declarations          go to state 37
    $@2                   go to state 11
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    expression_statement  go to state 56
    statements            go to state 57
    statement             go to state 58
    enum_statement        go to state 59
    func_call             go to state 60


State 11

   12 beforedecl: . CONST
   13           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STRING]
   14 declaration: . beforedecl type IDENT SEMICOLON
   15            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   17 declarations: $@2 . declaration

    CONST  shift, and go to state 16

    $default  reduce using rule 13 (beforedecl)

    beforedecl   go to state 35
    declaration  go to state 61


State 12

  112 functions: functions function .

    $default  reduce using rule 112 (functions)


State 13

   16 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING]
   17 declarations: . $@2 declaration
   18             | . declarations declaration
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   78 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   79 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   80 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   81 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   82 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   90 return_statement: . RETURN return_val SEMICOLON
   93 expression_statement: . expression SEMICOLON
   94 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, TRUE_TOKEN, FALSE_TOKEN, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   95           | . statement
   96           | . statements statement
   97 statement: . if_statement
   98          | . while_statement
   99          | . for_statement
  100          | . do_statement
  101          | . switch_statement
  102          | . return_statement
  103          | . expression_statement
  104          | . declarations
  105          | . enum_statement
  106          | . func_call
  118 function_tail: LEFT_CURLY_BRACKET . statements RIGHT_CURLY_BRACKET
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  128 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  129          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 17
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    IF              shift, and go to state 22
    WHILE           shift, and go to state 23
    FOR             shift, and go to state 24
    DO              shift, and go to state 25
    SWITCH          shift, and go to state 26
    RETURN          shift, and go to state 27
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    ENUM            shift, and go to state 30
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    INTEGER              reduce using rule 16 ($@2)
    INTEGER              [reduce using rule 94 (statements)]
    FLOAT                reduce using rule 16 ($@2)
    FLOAT                [reduce using rule 94 (statements)]
    DOUBLE               reduce using rule 16 ($@2)
    DOUBLE               [reduce using rule 94 (statements)]
    VOID                 reduce using rule 16 ($@2)
    VOID                 [reduce using rule 94 (statements)]
    BOOLEAN              reduce using rule 16 ($@2)
    BOOLEAN              [reduce using rule 94 (statements)]
    CHAR                 reduce using rule 16 ($@2)
    CHAR                 [reduce using rule 94 (statements)]
    CONST                reduce using rule 16 ($@2)
    CONST                [reduce using rule 94 (statements)]
    STRING               reduce using rule 16 ($@2)
    STRING               [reduce using rule 94 (statements)]
    IDENT                [reduce using rule 94 (statements)]
    CONST_INT            [reduce using rule 94 (statements)]
    CONST_FLOAT          [reduce using rule 94 (statements)]
    CONST_CHAR           [reduce using rule 94 (statements)]
    STRING_LITERAL       [reduce using rule 94 (statements)]
    IF                   [reduce using rule 94 (statements)]
    WHILE                [reduce using rule 94 (statements)]
    FOR                  [reduce using rule 94 (statements)]
    DO                   [reduce using rule 94 (statements)]
    SWITCH               [reduce using rule 94 (statements)]
    RETURN               [reduce using rule 94 (statements)]
    TRUE_TOKEN           [reduce using rule 94 (statements)]
    FALSE_TOKEN          [reduce using rule 94 (statements)]
    ENUM                 [reduce using rule 94 (statements)]
    LEFT_PAREN           [reduce using rule 94 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 94 (statements)
    INC_OP               [reduce using rule 94 (statements)]
    DEC_OP               [reduce using rule 94 (statements)]
    NOT_OP               [reduce using rule 94 (statements)]
    $default             reduce using rule 16 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    expression_statement  go to state 56
    statements            go to state 62
    statement             go to state 58
    enum_statement        go to state 59
    func_call             go to state 60


State 14

  114 function: function_head function_tail .

    $default  reduce using rule 114 (function)


State 15

    5 type: . INTEGER
    6     | . FLOAT
    7     | . DOUBLE
    8     | . VOID
    9     | . BOOLEAN
   10     | . CHAR
   11     | . STRING
  115 param_empty: . parameters
  116            | . %empty  [RIGHT_PAREN]
  117 function_head: FUNC IDENT LEFT_PAREN . param_empty RIGHT_PAREN type
  119 parameters: . parameter
  120           | . parameters COMMA parameter
  121           | . %empty  [RIGHT_PAREN, COMMA]
  122 parameter: . type IDENT

    INTEGER  shift, and go to state 63
    FLOAT    shift, and go to state 64
    DOUBLE   shift, and go to state 65
    VOID     shift, and go to state 66
    BOOLEAN  shift, and go to state 67
    CHAR     shift, and go to state 68
    STRING   shift, and go to state 69

    RIGHT_PAREN  reduce using rule 116 (param_empty)
    RIGHT_PAREN  [reduce using rule 121 (parameters)]
    COMMA        reduce using rule 121 (parameters)
    $default     reduce using rule 116 (param_empty)

    type         go to state 70
    param_empty  go to state 71
    parameters   go to state 72
    parameter    go to state 73


State 16

   12 beforedecl: CONST .

    $default  reduce using rule 12 (beforedecl)


State 17

   26 assign: IDENT . ASSIGN_OP expression
   28 expression: IDENT . INC_OP
   29           | IDENT . DEC_OP
   31           | IDENT .  [SEMICOLON]
   66 unaryExp: IDENT .  [SEMICOLON, ADD_OP, SUB_OP, MUL_OP, DIV_OP, MOD_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
  128 func_call: IDENT . LEFT_PAREN arguments RIGHT_PAREN
  129          | IDENT . ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    LEFT_PAREN  shift, and go to state 74
    INC_OP      shift, and go to state 75
    DEC_OP      shift, and go to state 76
    ASSIGN_OP   shift, and go to state 77

    SEMICOLON  reduce using rule 31 (expression)
    SEMICOLON  [reduce using rule 66 (unaryExp)]
    $default   reduce using rule 66 (unaryExp)


State 18

   69 value: CONST_INT .

    $default  reduce using rule 69 (value)


State 19

   70 value: CONST_FLOAT .

    $default  reduce using rule 70 (value)


State 20

   71 value: CONST_CHAR .

    $default  reduce using rule 71 (value)


State 21

   72 value: STRING_LITERAL .

    $default  reduce using rule 72 (value)


State 22

   78 if_statement: IF . LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part

    LEFT_PAREN  shift, and go to state 78


State 23

   79 while_statement: WHILE . LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop

    LEFT_PAREN  shift, and go to state 79


State 24

   80 for_statement: FOR . LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

    LEFT_PAREN  shift, and go to state 80


State 25

   16 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING]
   17 declarations: . $@2 declaration
   18             | . declarations declaration
   21 tail_inloop: . statements_inloop
   22            | . LEFT_CURLY_BRACKET statements_inloop RIGHT_CURLY_BRACKET
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   78 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   79 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   80 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   81 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81             | DO . tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   82 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   90 return_statement: . RETURN return_val SEMICOLON
   91 break_statement: . BREAK SEMICOLON
   92 continue_statement: . CONTINUE SEMICOLON
   93 expression_statement: . expression SEMICOLON
   97 statement: . if_statement
   98          | . while_statement
   99          | . for_statement
  100          | . do_statement
  101          | . switch_statement
  102          | . return_statement
  103          | . expression_statement
  104          | . declarations
  105          | . enum_statement
  106          | . func_call
  107 statement_inloop: . statement
  108                 | . break_statement
  109                 | . continue_statement
  110 statements_inloop: . statement_inloop
  111                  | . statements_inloop statement_inloop
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  128 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  129          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT               shift, and go to state 17
    CONST_INT           shift, and go to state 18
    CONST_FLOAT         shift, and go to state 19
    CONST_CHAR          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    IF                  shift, and go to state 22
    WHILE               shift, and go to state 23
    FOR                 shift, and go to state 24
    DO                  shift, and go to state 25
    SWITCH              shift, and go to state 26
    RETURN              shift, and go to state 27
    BREAK               shift, and go to state 81
    CONTINUE            shift, and go to state 82
    TRUE_TOKEN          shift, and go to state 28
    FALSE_TOKEN         shift, and go to state 29
    ENUM                shift, and go to state 30
    LEFT_PAREN          shift, and go to state 31
    LEFT_CURLY_BRACKET  shift, and go to state 83
    INC_OP              shift, and go to state 32
    DEC_OP              shift, and go to state 33
    NOT_OP              shift, and go to state 34

    $default  reduce using rule 16 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    tail_inloop           go to state 84
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    break_statement       go to state 85
    continue_statement    go to state 86
    expression_statement  go to state 56
    statement             go to state 87
    statement_inloop      go to state 88
    statements_inloop     go to state 89
    enum_statement        go to state 59
    func_call             go to state 60


State 26

   82 switch_statement: SWITCH . LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    LEFT_PAREN  shift, and go to state 90


State 27

   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   88 return_val: . expression
   89           | . %empty  [SEMICOLON]
   90 return_statement: RETURN . return_val SEMICOLON

    IDENT           shift, and go to state 91
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    $default  reduce using rule 89 (return_val)

    bool_expression  go to state 38
    assign           go to state 39
    expression       go to state 92
    simpleExp        go to state 41
    andExp           go to state 42
    bitRelExp        go to state 43
    relExp           go to state 44
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49
    return_val       go to state 93


State 28

   24 bool_expression: TRUE_TOKEN .

    $default  reduce using rule 24 (bool_expression)


State 29

   25 bool_expression: FALSE_TOKEN .

    $default  reduce using rule 25 (bool_expression)


State 30

  123 enum_statement: ENUM . IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET

    IDENT  shift, and go to state 94


State 31

   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   68         | LEFT_PAREN . expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL

    IDENT           shift, and go to state 91
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    bool_expression  go to state 38
    assign           go to state 39
    expression       go to state 95
    simpleExp        go to state 41
    andExp           go to state 42
    bitRelExp        go to state 43
    relExp           go to state 44
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49


State 32

   63 unaryExp: INC_OP . IDENT

    IDENT  shift, and go to state 96


State 33

   64 unaryExp: DEC_OP . IDENT

    IDENT  shift, and go to state 97


State 34

   65 unaryExp: NOT_OP . IDENT

    IDENT  shift, and go to state 98


State 35

    5 type: . INTEGER
    6     | . FLOAT
    7     | . DOUBLE
    8     | . VOID
    9     | . BOOLEAN
   10     | . CHAR
   11     | . STRING
   14 declaration: beforedecl . type IDENT SEMICOLON
   15            | beforedecl . type IDENT ASSIGN_OP expression SEMICOLON

    INTEGER  shift, and go to state 63
    FLOAT    shift, and go to state 64
    DOUBLE   shift, and go to state 65
    VOID     shift, and go to state 66
    BOOLEAN  shift, and go to state 67
    CHAR     shift, and go to state 68
    STRING   shift, and go to state 69

    type  go to state 99


State 36

   18 declarations: declarations declaration .

    $default  reduce using rule 18 (declarations)


State 37

   12 beforedecl: . CONST
   13           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STRING]
   14 declaration: . beforedecl type IDENT SEMICOLON
   15            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   18 declarations: declarations . declaration
  104 statement: declarations .  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, FUNC, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]

    CONST  shift, and go to state 16

    INTEGER   reduce using rule 13 (beforedecl)
    INTEGER   [reduce using rule 104 (statement)]
    FLOAT     reduce using rule 13 (beforedecl)
    FLOAT     [reduce using rule 104 (statement)]
    DOUBLE    reduce using rule 13 (beforedecl)
    DOUBLE    [reduce using rule 104 (statement)]
    VOID      reduce using rule 13 (beforedecl)
    VOID      [reduce using rule 104 (statement)]
    BOOLEAN   reduce using rule 13 (beforedecl)
    BOOLEAN   [reduce using rule 104 (statement)]
    CHAR      reduce using rule 13 (beforedecl)
    CHAR      [reduce using rule 104 (statement)]
    CONST     [reduce using rule 104 (statement)]
    STRING    reduce using rule 13 (beforedecl)
    STRING    [reduce using rule 104 (statement)]
    $default  reduce using rule 104 (statement)

    beforedecl   go to state 35
    declaration  go to state 36


State 38

   32 expression: bool_expression .

    $default  reduce using rule 32 (expression)


State 39

   27 expression: assign .

    $default  reduce using rule 27 (expression)


State 40

   93 expression_statement: expression . SEMICOLON

    SEMICOLON  shift, and go to state 100


State 41

   30 expression: simpleExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON]
   33 simpleExp: simpleExp . OR_OP andExp

    OR_OP  shift, and go to state 101

    $default  reduce using rule 30 (expression)


State 42

   34 simpleExp: andExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP]
   35 andExp: andExp . AND_OP

    AND_OP  shift, and go to state 102

    $default  reduce using rule 34 (simpleExp)


State 43

   36 andExp: bitRelExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP]
   37 bitRelExp: bitRelExp . BIT_OR_OP relExp
   38          | bitRelExp . AND relExp
   39          | bitRelExp . BIT_XOR_OP relExp

    BIT_OR_OP   shift, and go to state 103
    AND         shift, and go to state 104
    BIT_XOR_OP  shift, and go to state 105

    $default  reduce using rule 36 (andExp)


State 44

   23 bool_expression: relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON]
   40 bitRelExp: relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   41 op: . EQ_OP
   42   | . NE_OP
   43   | . GT_OP
   44   | . LT_OP
   45   | . LE_OP
   46   | . GE_OP
   47   | . OR_OP
   48   | . AND_OP
   49 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 106
    AND_OP  shift, and go to state 107
    EQ_OP   shift, and go to state 108
    NE_OP   shift, and go to state 109
    GT_OP   shift, and go to state 110
    LT_OP   shift, and go to state 111
    GE_OP   shift, and go to state 112
    LE_OP   shift, and go to state 113

    RIGHT_PAREN  reduce using rule 23 (bool_expression)
    RIGHT_PAREN  [reduce using rule 40 (bitRelExp)]
    SEMICOLON    reduce using rule 23 (bool_expression)
    SEMICOLON    [reduce using rule 40 (bitRelExp)]
    COMMA        reduce using rule 23 (bool_expression)
    COMMA        [reduce using rule 40 (bitRelExp)]
    COLON        reduce using rule 23 (bool_expression)
    COLON        [reduce using rule 40 (bitRelExp)]
    OR_OP        [reduce using rule 40 (bitRelExp)]
    AND_OP       [reduce using rule 40 (bitRelExp)]
    BIT_OR_OP    reduce using rule 40 (bitRelExp)
    AND          reduce using rule 40 (bitRelExp)
    BIT_XOR_OP   reduce using rule 40 (bitRelExp)
    $default     reduce using rule 23 (bool_expression)

    op  go to state 114


State 45

   50 relExp: bitshiftExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   51 bitshiftExp: bitshiftExp . BIT_LSHIFT_OP sumExp
   52            | bitshiftExp . BIT_RSHIFT_OP sumExp

    BIT_LSHIFT_OP  shift, and go to state 115
    BIT_RSHIFT_OP  shift, and go to state 116

    $default  reduce using rule 50 (relExp)


State 46

   53 bitshiftExp: sumExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   54 pls_min: . ADD_OP
   55        | . SUB_OP
   59 sumExp: sumExp . pls_min mulExp

    ADD_OP  shift, and go to state 117
    SUB_OP  shift, and go to state 118

    $default  reduce using rule 53 (bitshiftExp)

    pls_min  go to state 119


State 47

   56 mul_div: . MUL_OP
   57        | . DIV_OP
   58        | . MOD_OP
   60 sumExp: mulExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, ADD_OP, SUB_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   61 mulExp: mulExp . mul_div unaryExp

    MUL_OP  shift, and go to state 120
    DIV_OP  shift, and go to state 121
    MOD_OP  shift, and go to state 122

    $default  reduce using rule 60 (sumExp)

    mul_div  go to state 123


State 48

   62 mulExp: unaryExp .

    $default  reduce using rule 62 (mulExp)


State 49

   67 unaryExp: value .

    $default  reduce using rule 67 (unaryExp)


State 50

   97 statement: if_statement .

    $default  reduce using rule 97 (statement)


State 51

   98 statement: while_statement .

    $default  reduce using rule 98 (statement)


State 52

   99 statement: for_statement .

    $default  reduce using rule 99 (statement)


State 53

  100 statement: do_statement .

    $default  reduce using rule 100 (statement)


State 54

  101 statement: switch_statement .

    $default  reduce using rule 101 (statement)


State 55

  102 statement: return_statement .

    $default  reduce using rule 102 (statement)


State 56

  103 statement: expression_statement .

    $default  reduce using rule 103 (statement)


State 57

    4 program: $@1 declarations statements .  [$end, FUNC]
   16 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING]
   17 declarations: . $@2 declaration
   18             | . declarations declaration
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   78 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   79 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   80 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   81 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   82 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   90 return_statement: . RETURN return_val SEMICOLON
   93 expression_statement: . expression SEMICOLON
   96 statements: statements . statement
   97 statement: . if_statement
   98          | . while_statement
   99          | . for_statement
  100          | . do_statement
  101          | . switch_statement
  102          | . return_statement
  103          | . expression_statement
  104          | . declarations
  105          | . enum_statement
  106          | . func_call
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  128 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  129          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 17
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    IF              shift, and go to state 22
    WHILE           shift, and go to state 23
    FOR             shift, and go to state 24
    DO              shift, and go to state 25
    SWITCH          shift, and go to state 26
    RETURN          shift, and go to state 27
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    ENUM            shift, and go to state 30
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    $end      reduce using rule 4 (program)
    FUNC      reduce using rule 4 (program)
    $default  reduce using rule 16 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    expression_statement  go to state 56
    statement             go to state 124
    enum_statement        go to state 59
    func_call             go to state 60


State 58

   95 statements: statement .

    $default  reduce using rule 95 (statements)


State 59

  105 statement: enum_statement .

    $default  reduce using rule 105 (statement)


State 60

  106 statement: func_call .

    $default  reduce using rule 106 (statement)


State 61

   17 declarations: $@2 declaration .

    $default  reduce using rule 17 (declarations)


State 62

   16 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING]
   17 declarations: . $@2 declaration
   18             | . declarations declaration
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   78 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   79 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   80 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   81 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   82 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   90 return_statement: . RETURN return_val SEMICOLON
   93 expression_statement: . expression SEMICOLON
   96 statements: statements . statement
   97 statement: . if_statement
   98          | . while_statement
   99          | . for_statement
  100          | . do_statement
  101          | . switch_statement
  102          | . return_statement
  103          | . expression_statement
  104          | . declarations
  105          | . enum_statement
  106          | . func_call
  118 function_tail: LEFT_CURLY_BRACKET statements . RIGHT_CURLY_BRACKET
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  128 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  129          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT                shift, and go to state 17
    CONST_INT            shift, and go to state 18
    CONST_FLOAT          shift, and go to state 19
    CONST_CHAR           shift, and go to state 20
    STRING_LITERAL       shift, and go to state 21
    IF                   shift, and go to state 22
    WHILE                shift, and go to state 23
    FOR                  shift, and go to state 24
    DO                   shift, and go to state 25
    SWITCH               shift, and go to state 26
    RETURN               shift, and go to state 27
    TRUE_TOKEN           shift, and go to state 28
    FALSE_TOKEN          shift, and go to state 29
    ENUM                 shift, and go to state 30
    LEFT_PAREN           shift, and go to state 31
    RIGHT_CURLY_BRACKET  shift, and go to state 125
    INC_OP               shift, and go to state 32
    DEC_OP               shift, and go to state 33
    NOT_OP               shift, and go to state 34

    $default  reduce using rule 16 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    expression_statement  go to state 56
    statement             go to state 124
    enum_statement        go to state 59
    func_call             go to state 60


State 63

    5 type: INTEGER .

    $default  reduce using rule 5 (type)


State 64

    6 type: FLOAT .

    $default  reduce using rule 6 (type)


State 65

    7 type: DOUBLE .

    $default  reduce using rule 7 (type)


State 66

    8 type: VOID .

    $default  reduce using rule 8 (type)


State 67

    9 type: BOOLEAN .

    $default  reduce using rule 9 (type)


State 68

   10 type: CHAR .

    $default  reduce using rule 10 (type)


State 69

   11 type: STRING .

    $default  reduce using rule 11 (type)


State 70

  122 parameter: type . IDENT

    IDENT  shift, and go to state 126


State 71

  117 function_head: FUNC IDENT LEFT_PAREN param_empty . RIGHT_PAREN type

    RIGHT_PAREN  shift, and go to state 127


State 72

  115 param_empty: parameters .  [RIGHT_PAREN]
  120 parameters: parameters . COMMA parameter

    COMMA  shift, and go to state 128

    $default  reduce using rule 115 (param_empty)


State 73

  119 parameters: parameter .

    $default  reduce using rule 119 (parameters)


State 74

   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
  128 func_call: IDENT LEFT_PAREN . arguments RIGHT_PAREN
  130 arguments: . argument
  131          | . arguments COMMA argument
  132          | . %empty  [RIGHT_PAREN, COMMA]
  133 argument: . expression

    IDENT           shift, and go to state 91
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    $default  reduce using rule 132 (arguments)

    bool_expression  go to state 38
    assign           go to state 39
    expression       go to state 129
    simpleExp        go to state 41
    andExp           go to state 42
    bitRelExp        go to state 43
    relExp           go to state 44
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49
    arguments        go to state 130
    argument         go to state 131


State 75

   28 expression: IDENT INC_OP .

    $default  reduce using rule 28 (expression)


State 76

   29 expression: IDENT DEC_OP .

    $default  reduce using rule 29 (expression)


State 77

   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   26       | IDENT ASSIGN_OP . expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
  129 func_call: IDENT ASSIGN_OP . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 132
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    bool_expression  go to state 38
    assign           go to state 39
    expression       go to state 133
    simpleExp        go to state 41
    andExp           go to state 42
    bitRelExp        go to state 43
    relExp           go to state 44
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49


State 78

   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   78 if_statement: IF LEFT_PAREN . bool_expression RIGHT_PAREN tail else_if else_part

    IDENT           shift, and go to state 134
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    bool_expression  go to state 135
    relExp           go to state 136
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49


State 79

   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   79 while_statement: WHILE LEFT_PAREN . bool_expression RIGHT_PAREN tail_inloop

    IDENT           shift, and go to state 134
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    bool_expression  go to state 137
    relExp           go to state 136
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49


State 80

   26 assign: . IDENT ASSIGN_OP expression
   80 for_statement: FOR LEFT_PAREN . assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

    IDENT  shift, and go to state 138

    assign  go to state 139


State 81

   91 break_statement: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 140


State 82

   92 continue_statement: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 141


State 83

   16 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING]
   17 declarations: . $@2 declaration
   18             | . declarations declaration
   22 tail_inloop: LEFT_CURLY_BRACKET . statements_inloop RIGHT_CURLY_BRACKET
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   78 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   79 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   80 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   81 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   82 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   90 return_statement: . RETURN return_val SEMICOLON
   91 break_statement: . BREAK SEMICOLON
   92 continue_statement: . CONTINUE SEMICOLON
   93 expression_statement: . expression SEMICOLON
   97 statement: . if_statement
   98          | . while_statement
   99          | . for_statement
  100          | . do_statement
  101          | . switch_statement
  102          | . return_statement
  103          | . expression_statement
  104          | . declarations
  105          | . enum_statement
  106          | . func_call
  107 statement_inloop: . statement
  108                 | . break_statement
  109                 | . continue_statement
  110 statements_inloop: . statement_inloop
  111                  | . statements_inloop statement_inloop
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  128 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  129          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 17
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    IF              shift, and go to state 22
    WHILE           shift, and go to state 23
    FOR             shift, and go to state 24
    DO              shift, and go to state 25
    SWITCH          shift, and go to state 26
    RETURN          shift, and go to state 27
    BREAK           shift, and go to state 81
    CONTINUE        shift, and go to state 82
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    ENUM            shift, and go to state 30
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    $default  reduce using rule 16 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    break_statement       go to state 85
    continue_statement    go to state 86
    expression_statement  go to state 56
    statement             go to state 87
    statement_inloop      go to state 88
    statements_inloop     go to state 142
    enum_statement        go to state 59
    func_call             go to state 60


State 84

   81 do_statement: DO tail_inloop . WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON

    WHILE  shift, and go to state 143


State 85

  108 statement_inloop: break_statement .

    $default  reduce using rule 108 (statement_inloop)


State 86

  109 statement_inloop: continue_statement .

    $default  reduce using rule 109 (statement_inloop)


State 87

  107 statement_inloop: statement .

    $default  reduce using rule 107 (statement_inloop)


State 88

  110 statements_inloop: statement_inloop .

    $default  reduce using rule 110 (statements_inloop)


State 89

   16 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING]
   17 declarations: . $@2 declaration
   18             | . declarations declaration
   21 tail_inloop: statements_inloop .  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, FUNC, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   78 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   79 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   80 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   81 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   82 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   90 return_statement: . RETURN return_val SEMICOLON
   91 break_statement: . BREAK SEMICOLON
   92 continue_statement: . CONTINUE SEMICOLON
   93 expression_statement: . expression SEMICOLON
   97 statement: . if_statement
   98          | . while_statement
   99          | . for_statement
  100          | . do_statement
  101          | . switch_statement
  102          | . return_statement
  103          | . expression_statement
  104          | . declarations
  105          | . enum_statement
  106          | . func_call
  107 statement_inloop: . statement
  108                 | . break_statement
  109                 | . continue_statement
  111 statements_inloop: statements_inloop . statement_inloop
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  128 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  129          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 17
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    IF              shift, and go to state 22
    WHILE           shift, and go to state 23
    FOR             shift, and go to state 24
    DO              shift, and go to state 25
    SWITCH          shift, and go to state 26
    RETURN          shift, and go to state 27
    BREAK           shift, and go to state 81
    CONTINUE        shift, and go to state 82
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    ENUM            shift, and go to state 30
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    $end                 reduce using rule 21 (tail_inloop)
    INTEGER              reduce using rule 16 ($@2)
    INTEGER              [reduce using rule 21 (tail_inloop)]
    FLOAT                reduce using rule 16 ($@2)
    FLOAT                [reduce using rule 21 (tail_inloop)]
    DOUBLE               reduce using rule 16 ($@2)
    DOUBLE               [reduce using rule 21 (tail_inloop)]
    VOID                 reduce using rule 16 ($@2)
    VOID                 [reduce using rule 21 (tail_inloop)]
    BOOLEAN              reduce using rule 16 ($@2)
    BOOLEAN              [reduce using rule 21 (tail_inloop)]
    CHAR                 reduce using rule 16 ($@2)
    CHAR                 [reduce using rule 21 (tail_inloop)]
    CONST                reduce using rule 16 ($@2)
    CONST                [reduce using rule 21 (tail_inloop)]
    STRING               reduce using rule 16 ($@2)
    STRING               [reduce using rule 21 (tail_inloop)]
    IDENT                [reduce using rule 21 (tail_inloop)]
    CONST_INT            [reduce using rule 21 (tail_inloop)]
    CONST_FLOAT          [reduce using rule 21 (tail_inloop)]
    CONST_CHAR           [reduce using rule 21 (tail_inloop)]
    STRING_LITERAL       [reduce using rule 21 (tail_inloop)]
    IF                   [reduce using rule 21 (tail_inloop)]
    ELSE                 reduce using rule 21 (tail_inloop)
    ELIF                 reduce using rule 21 (tail_inloop)
    WHILE                [reduce using rule 21 (tail_inloop)]
    FOR                  [reduce using rule 21 (tail_inloop)]
    DO                   [reduce using rule 21 (tail_inloop)]
    SWITCH               [reduce using rule 21 (tail_inloop)]
    RETURN               [reduce using rule 21 (tail_inloop)]
    BREAK                [reduce using rule 21 (tail_inloop)]
    CONTINUE             [reduce using rule 21 (tail_inloop)]
    TRUE_TOKEN           [reduce using rule 21 (tail_inloop)]
    FALSE_TOKEN          [reduce using rule 21 (tail_inloop)]
    ENUM                 [reduce using rule 21 (tail_inloop)]
    FUNC                 reduce using rule 21 (tail_inloop)
    LEFT_PAREN           [reduce using rule 21 (tail_inloop)]
    RIGHT_CURLY_BRACKET  reduce using rule 21 (tail_inloop)
    INC_OP               [reduce using rule 21 (tail_inloop)]
    DEC_OP               [reduce using rule 21 (tail_inloop)]
    NOT_OP               [reduce using rule 21 (tail_inloop)]
    $default             reduce using rule 16 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    break_statement       go to state 85
    continue_statement    go to state 86
    expression_statement  go to state 56
    statement             go to state 87
    statement_inloop      go to state 144
    enum_statement        go to state 59
    func_call             go to state 60


State 90

   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   82 switch_statement: SWITCH LEFT_PAREN . expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    IDENT           shift, and go to state 91
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    bool_expression  go to state 38
    assign           go to state 39
    expression       go to state 145
    simpleExp        go to state 41
    andExp           go to state 42
    bitRelExp        go to state 43
    relExp           go to state 44
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49


State 91

   26 assign: IDENT . ASSIGN_OP expression
   28 expression: IDENT . INC_OP
   29           | IDENT . DEC_OP
   31           | IDENT .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON]
   66 unaryExp: IDENT .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, ADD_OP, SUB_OP, MUL_OP, DIV_OP, MOD_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]

    INC_OP     shift, and go to state 75
    DEC_OP     shift, and go to state 76
    ASSIGN_OP  shift, and go to state 146

    RIGHT_PAREN  reduce using rule 31 (expression)
    RIGHT_PAREN  [reduce using rule 66 (unaryExp)]
    SEMICOLON    reduce using rule 31 (expression)
    SEMICOLON    [reduce using rule 66 (unaryExp)]
    COMMA        reduce using rule 31 (expression)
    COMMA        [reduce using rule 66 (unaryExp)]
    COLON        reduce using rule 31 (expression)
    COLON        [reduce using rule 66 (unaryExp)]
    $default     reduce using rule 66 (unaryExp)


State 92

   88 return_val: expression .

    $default  reduce using rule 88 (return_val)


State 93

   90 return_statement: RETURN return_val . SEMICOLON

    SEMICOLON  shift, and go to state 147


State 94

  123 enum_statement: ENUM IDENT . LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 148


State 95

   68 unaryExp: LEFT_PAREN expression . RIGHT_PAREN

    RIGHT_PAREN  shift, and go to state 149


State 96

   63 unaryExp: INC_OP IDENT .

    $default  reduce using rule 63 (unaryExp)


State 97

   64 unaryExp: DEC_OP IDENT .

    $default  reduce using rule 64 (unaryExp)


State 98

   65 unaryExp: NOT_OP IDENT .

    $default  reduce using rule 65 (unaryExp)


State 99

   14 declaration: beforedecl type . IDENT SEMICOLON
   15            | beforedecl type . IDENT ASSIGN_OP expression SEMICOLON

    IDENT  shift, and go to state 150


State 100

   93 expression_statement: expression SEMICOLON .

    $default  reduce using rule 93 (expression_statement)


State 101

   33 simpleExp: simpleExp OR_OP . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL

    IDENT           shift, and go to state 134
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    andExp       go to state 151
    bitRelExp    go to state 43
    relExp       go to state 152
    bitshiftExp  go to state 45
    sumExp       go to state 46
    mulExp       go to state 47
    unaryExp     go to state 48
    value        go to state 49


State 102

   35 andExp: andExp AND_OP .

    $default  reduce using rule 35 (andExp)


State 103

   37 bitRelExp: bitRelExp BIT_OR_OP . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL

    IDENT           shift, and go to state 134
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    relExp       go to state 153
    bitshiftExp  go to state 45
    sumExp       go to state 46
    mulExp       go to state 47
    unaryExp     go to state 48
    value        go to state 49


State 104

   38 bitRelExp: bitRelExp AND . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL

    IDENT           shift, and go to state 134
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    relExp       go to state 154
    bitshiftExp  go to state 45
    sumExp       go to state 46
    mulExp       go to state 47
    unaryExp     go to state 48
    value        go to state 49


State 105

   39 bitRelExp: bitRelExp BIT_XOR_OP . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL

    IDENT           shift, and go to state 134
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    relExp       go to state 155
    bitshiftExp  go to state 45
    sumExp       go to state 46
    mulExp       go to state 47
    unaryExp     go to state 48
    value        go to state 49


State 106

   47 op: OR_OP .

    $default  reduce using rule 47 (op)


State 107

   48 op: AND_OP .

    $default  reduce using rule 48 (op)


State 108

   41 op: EQ_OP .

    $default  reduce using rule 41 (op)


State 109

   42 op: NE_OP .

    $default  reduce using rule 42 (op)


State 110

   43 op: GT_OP .

    $default  reduce using rule 43 (op)


State 111

   44 op: LT_OP .

    $default  reduce using rule 44 (op)


State 112

   46 op: GE_OP .

    $default  reduce using rule 46 (op)


State 113

   45 op: LE_OP .

    $default  reduce using rule 45 (op)


State 114

   49 relExp: relExp op . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL

    IDENT           shift, and go to state 134
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    bitshiftExp  go to state 156
    sumExp       go to state 46
    mulExp       go to state 47
    unaryExp     go to state 48
    value        go to state 49


State 115

   51 bitshiftExp: bitshiftExp BIT_LSHIFT_OP . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL

    IDENT           shift, and go to state 134
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    sumExp    go to state 157
    mulExp    go to state 47
    unaryExp  go to state 48
    value     go to state 49


State 116

   52 bitshiftExp: bitshiftExp BIT_RSHIFT_OP . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL

    IDENT           shift, and go to state 134
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    sumExp    go to state 158
    mulExp    go to state 47
    unaryExp  go to state 48
    value     go to state 49


State 117

   54 pls_min: ADD_OP .

    $default  reduce using rule 54 (pls_min)


State 118

   55 pls_min: SUB_OP .

    $default  reduce using rule 55 (pls_min)


State 119

   59 sumExp: sumExp pls_min . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL

    IDENT           shift, and go to state 134
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    mulExp    go to state 159
    unaryExp  go to state 48
    value     go to state 49


State 120

   56 mul_div: MUL_OP .

    $default  reduce using rule 56 (mul_div)


State 121

   57 mul_div: DIV_OP .

    $default  reduce using rule 57 (mul_div)


State 122

   58 mul_div: MOD_OP .

    $default  reduce using rule 58 (mul_div)


State 123

   61 mulExp: mulExp mul_div . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL

    IDENT           shift, and go to state 134
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    unaryExp  go to state 160
    value     go to state 49


State 124

   96 statements: statements statement .

    $default  reduce using rule 96 (statements)


State 125

  118 function_tail: LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET .

    $default  reduce using rule 118 (function_tail)


State 126

  122 parameter: type IDENT .

    $default  reduce using rule 122 (parameter)


State 127

    5 type: . INTEGER
    6     | . FLOAT
    7     | . DOUBLE
    8     | . VOID
    9     | . BOOLEAN
   10     | . CHAR
   11     | . STRING
  117 function_head: FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN . type

    INTEGER  shift, and go to state 63
    FLOAT    shift, and go to state 64
    DOUBLE   shift, and go to state 65
    VOID     shift, and go to state 66
    BOOLEAN  shift, and go to state 67
    CHAR     shift, and go to state 68
    STRING   shift, and go to state 69

    type  go to state 161


State 128

    5 type: . INTEGER
    6     | . FLOAT
    7     | . DOUBLE
    8     | . VOID
    9     | . BOOLEAN
   10     | . CHAR
   11     | . STRING
  120 parameters: parameters COMMA . parameter
  122 parameter: . type IDENT

    INTEGER  shift, and go to state 63
    FLOAT    shift, and go to state 64
    DOUBLE   shift, and go to state 65
    VOID     shift, and go to state 66
    BOOLEAN  shift, and go to state 67
    CHAR     shift, and go to state 68
    STRING   shift, and go to state 69

    type       go to state 70
    parameter  go to state 162


State 129

  133 argument: expression .

    $default  reduce using rule 133 (argument)


State 130

  128 func_call: IDENT LEFT_PAREN arguments . RIGHT_PAREN
  131 arguments: arguments . COMMA argument

    RIGHT_PAREN  shift, and go to state 163
    COMMA        shift, and go to state 164


State 131

  130 arguments: argument .

    $default  reduce using rule 130 (arguments)


State 132

   26 assign: IDENT . ASSIGN_OP expression
   28 expression: IDENT . INC_OP
   29           | IDENT . DEC_OP
   31           | IDENT .  [SEMICOLON]
   66 unaryExp: IDENT .  [SEMICOLON, ADD_OP, SUB_OP, MUL_OP, DIV_OP, MOD_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
  129 func_call: IDENT ASSIGN_OP IDENT . LEFT_PAREN arguments RIGHT_PAREN

    LEFT_PAREN  shift, and go to state 165
    INC_OP      shift, and go to state 75
    DEC_OP      shift, and go to state 76
    ASSIGN_OP   shift, and go to state 146

    SEMICOLON  reduce using rule 31 (expression)
    SEMICOLON  [reduce using rule 66 (unaryExp)]
    $default   reduce using rule 66 (unaryExp)


State 133

   26 assign: IDENT ASSIGN_OP expression .

    $default  reduce using rule 26 (assign)


State 134

   66 unaryExp: IDENT .

    $default  reduce using rule 66 (unaryExp)


State 135

   78 if_statement: IF LEFT_PAREN bool_expression . RIGHT_PAREN tail else_if else_part

    RIGHT_PAREN  shift, and go to state 166


State 136

   23 bool_expression: relExp .  [RIGHT_PAREN, SEMICOLON]
   41 op: . EQ_OP
   42   | . NE_OP
   43   | . GT_OP
   44   | . LT_OP
   45   | . LE_OP
   46   | . GE_OP
   47   | . OR_OP
   48   | . AND_OP
   49 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 106
    AND_OP  shift, and go to state 107
    EQ_OP   shift, and go to state 108
    NE_OP   shift, and go to state 109
    GT_OP   shift, and go to state 110
    LT_OP   shift, and go to state 111
    GE_OP   shift, and go to state 112
    LE_OP   shift, and go to state 113

    $default  reduce using rule 23 (bool_expression)

    op  go to state 114


State 137

   79 while_statement: WHILE LEFT_PAREN bool_expression . RIGHT_PAREN tail_inloop

    RIGHT_PAREN  shift, and go to state 167


State 138

   26 assign: IDENT . ASSIGN_OP expression

    ASSIGN_OP  shift, and go to state 146


State 139

   80 for_statement: FOR LEFT_PAREN assign . SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

    SEMICOLON  shift, and go to state 168


State 140

   91 break_statement: BREAK SEMICOLON .

    $default  reduce using rule 91 (break_statement)


State 141

   92 continue_statement: CONTINUE SEMICOLON .

    $default  reduce using rule 92 (continue_statement)


State 142

   16 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING]
   17 declarations: . $@2 declaration
   18             | . declarations declaration
   22 tail_inloop: LEFT_CURLY_BRACKET statements_inloop . RIGHT_CURLY_BRACKET
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   78 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   79 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   80 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   81 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   82 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   90 return_statement: . RETURN return_val SEMICOLON
   91 break_statement: . BREAK SEMICOLON
   92 continue_statement: . CONTINUE SEMICOLON
   93 expression_statement: . expression SEMICOLON
   97 statement: . if_statement
   98          | . while_statement
   99          | . for_statement
  100          | . do_statement
  101          | . switch_statement
  102          | . return_statement
  103          | . expression_statement
  104          | . declarations
  105          | . enum_statement
  106          | . func_call
  107 statement_inloop: . statement
  108                 | . break_statement
  109                 | . continue_statement
  111 statements_inloop: statements_inloop . statement_inloop
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  128 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  129          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT                shift, and go to state 17
    CONST_INT            shift, and go to state 18
    CONST_FLOAT          shift, and go to state 19
    CONST_CHAR           shift, and go to state 20
    STRING_LITERAL       shift, and go to state 21
    IF                   shift, and go to state 22
    WHILE                shift, and go to state 23
    FOR                  shift, and go to state 24
    DO                   shift, and go to state 25
    SWITCH               shift, and go to state 26
    RETURN               shift, and go to state 27
    BREAK                shift, and go to state 81
    CONTINUE             shift, and go to state 82
    TRUE_TOKEN           shift, and go to state 28
    FALSE_TOKEN          shift, and go to state 29
    ENUM                 shift, and go to state 30
    LEFT_PAREN           shift, and go to state 31
    RIGHT_CURLY_BRACKET  shift, and go to state 169
    INC_OP               shift, and go to state 32
    DEC_OP               shift, and go to state 33
    NOT_OP               shift, and go to state 34

    $default  reduce using rule 16 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    break_statement       go to state 85
    continue_statement    go to state 86
    expression_statement  go to state 56
    statement             go to state 87
    statement_inloop      go to state 144
    enum_statement        go to state 59
    func_call             go to state 60


State 143

   81 do_statement: DO tail_inloop WHILE . LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON

    LEFT_PAREN  shift, and go to state 170


State 144

  111 statements_inloop: statements_inloop statement_inloop .

    $default  reduce using rule 111 (statements_inloop)


State 145

   82 switch_statement: SWITCH LEFT_PAREN expression . RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    RIGHT_PAREN  shift, and go to state 171


State 146

   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   26       | IDENT ASSIGN_OP . expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL

    IDENT           shift, and go to state 91
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    bool_expression  go to state 38
    assign           go to state 39
    expression       go to state 133
    simpleExp        go to state 41
    andExp           go to state 42
    bitRelExp        go to state 43
    relExp           go to state 44
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49


State 147

   90 return_statement: RETURN return_val SEMICOLON .

    $default  reduce using rule 90 (return_statement)


State 148

  123 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET . enum_list RIGHT_CURLY_BRACKET
  124 enum_list: . one_val
  125          | . enum_list COMMA one_val
  126 one_val: . IDENT
  127        | . IDENT ASSIGN_OP value

    IDENT  shift, and go to state 172

    enum_list  go to state 173
    one_val    go to state 174


State 149

   68 unaryExp: LEFT_PAREN expression RIGHT_PAREN .

    $default  reduce using rule 68 (unaryExp)


State 150

   14 declaration: beforedecl type IDENT . SEMICOLON
   15            | beforedecl type IDENT . ASSIGN_OP expression SEMICOLON

    SEMICOLON  shift, and go to state 175
    ASSIGN_OP  shift, and go to state 176


State 151

   33 simpleExp: simpleExp OR_OP andExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP]
   35 andExp: andExp . AND_OP

    AND_OP  shift, and go to state 102

    $default  reduce using rule 33 (simpleExp)


State 152

   40 bitRelExp: relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   41 op: . EQ_OP
   42   | . NE_OP
   43   | . GT_OP
   44   | . LT_OP
   45   | . LE_OP
   46   | . GE_OP
   47   | . OR_OP
   48   | . AND_OP
   49 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 106
    AND_OP  shift, and go to state 107
    EQ_OP   shift, and go to state 108
    NE_OP   shift, and go to state 109
    GT_OP   shift, and go to state 110
    LT_OP   shift, and go to state 111
    GE_OP   shift, and go to state 112
    LE_OP   shift, and go to state 113

    OR_OP     [reduce using rule 40 (bitRelExp)]
    AND_OP    [reduce using rule 40 (bitRelExp)]
    $default  reduce using rule 40 (bitRelExp)

    op  go to state 114


State 153

   37 bitRelExp: bitRelExp BIT_OR_OP relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   41 op: . EQ_OP
   42   | . NE_OP
   43   | . GT_OP
   44   | . LT_OP
   45   | . LE_OP
   46   | . GE_OP
   47   | . OR_OP
   48   | . AND_OP
   49 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 106
    AND_OP  shift, and go to state 107
    EQ_OP   shift, and go to state 108
    NE_OP   shift, and go to state 109
    GT_OP   shift, and go to state 110
    LT_OP   shift, and go to state 111
    GE_OP   shift, and go to state 112
    LE_OP   shift, and go to state 113

    OR_OP     [reduce using rule 37 (bitRelExp)]
    AND_OP    [reduce using rule 37 (bitRelExp)]
    $default  reduce using rule 37 (bitRelExp)

    op  go to state 114


State 154

   38 bitRelExp: bitRelExp AND relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   41 op: . EQ_OP
   42   | . NE_OP
   43   | . GT_OP
   44   | . LT_OP
   45   | . LE_OP
   46   | . GE_OP
   47   | . OR_OP
   48   | . AND_OP
   49 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 106
    AND_OP  shift, and go to state 107
    EQ_OP   shift, and go to state 108
    NE_OP   shift, and go to state 109
    GT_OP   shift, and go to state 110
    LT_OP   shift, and go to state 111
    GE_OP   shift, and go to state 112
    LE_OP   shift, and go to state 113

    OR_OP     [reduce using rule 38 (bitRelExp)]
    AND_OP    [reduce using rule 38 (bitRelExp)]
    $default  reduce using rule 38 (bitRelExp)

    op  go to state 114


State 155

   39 bitRelExp: bitRelExp BIT_XOR_OP relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   41 op: . EQ_OP
   42   | . NE_OP
   43   | . GT_OP
   44   | . LT_OP
   45   | . LE_OP
   46   | . GE_OP
   47   | . OR_OP
   48   | . AND_OP
   49 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 106
    AND_OP  shift, and go to state 107
    EQ_OP   shift, and go to state 108
    NE_OP   shift, and go to state 109
    GT_OP   shift, and go to state 110
    LT_OP   shift, and go to state 111
    GE_OP   shift, and go to state 112
    LE_OP   shift, and go to state 113

    OR_OP     [reduce using rule 39 (bitRelExp)]
    AND_OP    [reduce using rule 39 (bitRelExp)]
    $default  reduce using rule 39 (bitRelExp)

    op  go to state 114


State 156

   49 relExp: relExp op bitshiftExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   51 bitshiftExp: bitshiftExp . BIT_LSHIFT_OP sumExp
   52            | bitshiftExp . BIT_RSHIFT_OP sumExp

    BIT_LSHIFT_OP  shift, and go to state 115
    BIT_RSHIFT_OP  shift, and go to state 116

    $default  reduce using rule 49 (relExp)


State 157

   51 bitshiftExp: bitshiftExp BIT_LSHIFT_OP sumExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   54 pls_min: . ADD_OP
   55        | . SUB_OP
   59 sumExp: sumExp . pls_min mulExp

    ADD_OP  shift, and go to state 117
    SUB_OP  shift, and go to state 118

    $default  reduce using rule 51 (bitshiftExp)

    pls_min  go to state 119


State 158

   52 bitshiftExp: bitshiftExp BIT_RSHIFT_OP sumExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   54 pls_min: . ADD_OP
   55        | . SUB_OP
   59 sumExp: sumExp . pls_min mulExp

    ADD_OP  shift, and go to state 117
    SUB_OP  shift, and go to state 118

    $default  reduce using rule 52 (bitshiftExp)

    pls_min  go to state 119


State 159

   56 mul_div: . MUL_OP
   57        | . DIV_OP
   58        | . MOD_OP
   59 sumExp: sumExp pls_min mulExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, ADD_OP, SUB_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   61 mulExp: mulExp . mul_div unaryExp

    MUL_OP  shift, and go to state 120
    DIV_OP  shift, and go to state 121
    MOD_OP  shift, and go to state 122

    $default  reduce using rule 59 (sumExp)

    mul_div  go to state 123


State 160

   61 mulExp: mulExp mul_div unaryExp .

    $default  reduce using rule 61 (mulExp)


State 161

  117 function_head: FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN type .

    $default  reduce using rule 117 (function_head)


State 162

  120 parameters: parameters COMMA parameter .

    $default  reduce using rule 120 (parameters)


State 163

  128 func_call: IDENT LEFT_PAREN arguments RIGHT_PAREN .

    $default  reduce using rule 128 (func_call)


State 164

   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
  131 arguments: arguments COMMA . argument
  133 argument: . expression

    IDENT           shift, and go to state 91
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    bool_expression  go to state 38
    assign           go to state 39
    expression       go to state 129
    simpleExp        go to state 41
    andExp           go to state 42
    bitRelExp        go to state 43
    relExp           go to state 44
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49
    argument         go to state 177


State 165

   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
  129 func_call: IDENT ASSIGN_OP IDENT LEFT_PAREN . arguments RIGHT_PAREN
  130 arguments: . argument
  131          | . arguments COMMA argument
  132          | . %empty  [RIGHT_PAREN, COMMA]
  133 argument: . expression

    IDENT           shift, and go to state 91
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    $default  reduce using rule 132 (arguments)

    bool_expression  go to state 38
    assign           go to state 39
    expression       go to state 129
    simpleExp        go to state 41
    andExp           go to state 42
    bitRelExp        go to state 43
    relExp           go to state 44
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49
    arguments        go to state 178
    argument         go to state 131


State 166

   16 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING]
   17 declarations: . $@2 declaration
   18             | . declarations declaration
   19 tail: . statements
   20     | . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   78 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78             | IF LEFT_PAREN bool_expression RIGHT_PAREN . tail else_if else_part
   79 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   80 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   81 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   82 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   90 return_statement: . RETURN return_val SEMICOLON
   93 expression_statement: . expression SEMICOLON
   94 statements: . %empty  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, FUNC, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   95           | . statement
   96           | . statements statement
   97 statement: . if_statement
   98          | . while_statement
   99          | . for_statement
  100          | . do_statement
  101          | . switch_statement
  102          | . return_statement
  103          | . expression_statement
  104          | . declarations
  105          | . enum_statement
  106          | . func_call
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  128 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  129          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT               shift, and go to state 17
    CONST_INT           shift, and go to state 18
    CONST_FLOAT         shift, and go to state 19
    CONST_CHAR          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    IF                  shift, and go to state 22
    WHILE               shift, and go to state 23
    FOR                 shift, and go to state 24
    DO                  shift, and go to state 25
    SWITCH              shift, and go to state 26
    RETURN              shift, and go to state 27
    TRUE_TOKEN          shift, and go to state 28
    FALSE_TOKEN         shift, and go to state 29
    ENUM                shift, and go to state 30
    LEFT_PAREN          shift, and go to state 31
    LEFT_CURLY_BRACKET  shift, and go to state 179
    INC_OP              shift, and go to state 32
    DEC_OP              shift, and go to state 33
    NOT_OP              shift, and go to state 34

    $end                 reduce using rule 94 (statements)
    INTEGER              reduce using rule 16 ($@2)
    INTEGER              [reduce using rule 94 (statements)]
    FLOAT                reduce using rule 16 ($@2)
    FLOAT                [reduce using rule 94 (statements)]
    DOUBLE               reduce using rule 16 ($@2)
    DOUBLE               [reduce using rule 94 (statements)]
    VOID                 reduce using rule 16 ($@2)
    VOID                 [reduce using rule 94 (statements)]
    BOOLEAN              reduce using rule 16 ($@2)
    BOOLEAN              [reduce using rule 94 (statements)]
    CHAR                 reduce using rule 16 ($@2)
    CHAR                 [reduce using rule 94 (statements)]
    CONST                reduce using rule 16 ($@2)
    CONST                [reduce using rule 94 (statements)]
    STRING               reduce using rule 16 ($@2)
    STRING               [reduce using rule 94 (statements)]
    IDENT                [reduce using rule 94 (statements)]
    CONST_INT            [reduce using rule 94 (statements)]
    CONST_FLOAT          [reduce using rule 94 (statements)]
    CONST_CHAR           [reduce using rule 94 (statements)]
    STRING_LITERAL       [reduce using rule 94 (statements)]
    IF                   [reduce using rule 94 (statements)]
    ELSE                 reduce using rule 94 (statements)
    ELIF                 reduce using rule 94 (statements)
    WHILE                [reduce using rule 94 (statements)]
    FOR                  [reduce using rule 94 (statements)]
    DO                   [reduce using rule 94 (statements)]
    SWITCH               [reduce using rule 94 (statements)]
    RETURN               [reduce using rule 94 (statements)]
    BREAK                reduce using rule 94 (statements)
    CONTINUE             reduce using rule 94 (statements)
    TRUE_TOKEN           [reduce using rule 94 (statements)]
    FALSE_TOKEN          [reduce using rule 94 (statements)]
    ENUM                 [reduce using rule 94 (statements)]
    FUNC                 reduce using rule 94 (statements)
    LEFT_PAREN           [reduce using rule 94 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 94 (statements)
    INC_OP               [reduce using rule 94 (statements)]
    DEC_OP               [reduce using rule 94 (statements)]
    NOT_OP               [reduce using rule 94 (statements)]
    $default             reduce using rule 16 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    tail                  go to state 180
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    expression_statement  go to state 56
    statements            go to state 181
    statement             go to state 58
    enum_statement        go to state 59
    func_call             go to state 60


State 167

   16 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING]
   17 declarations: . $@2 declaration
   18             | . declarations declaration
   21 tail_inloop: . statements_inloop
   22            | . LEFT_CURLY_BRACKET statements_inloop RIGHT_CURLY_BRACKET
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   78 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   79 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79                | WHILE LEFT_PAREN bool_expression RIGHT_PAREN . tail_inloop
   80 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   81 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   82 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   90 return_statement: . RETURN return_val SEMICOLON
   91 break_statement: . BREAK SEMICOLON
   92 continue_statement: . CONTINUE SEMICOLON
   93 expression_statement: . expression SEMICOLON
   97 statement: . if_statement
   98          | . while_statement
   99          | . for_statement
  100          | . do_statement
  101          | . switch_statement
  102          | . return_statement
  103          | . expression_statement
  104          | . declarations
  105          | . enum_statement
  106          | . func_call
  107 statement_inloop: . statement
  108                 | . break_statement
  109                 | . continue_statement
  110 statements_inloop: . statement_inloop
  111                  | . statements_inloop statement_inloop
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  128 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  129          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT               shift, and go to state 17
    CONST_INT           shift, and go to state 18
    CONST_FLOAT         shift, and go to state 19
    CONST_CHAR          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    IF                  shift, and go to state 22
    WHILE               shift, and go to state 23
    FOR                 shift, and go to state 24
    DO                  shift, and go to state 25
    SWITCH              shift, and go to state 26
    RETURN              shift, and go to state 27
    BREAK               shift, and go to state 81
    CONTINUE            shift, and go to state 82
    TRUE_TOKEN          shift, and go to state 28
    FALSE_TOKEN         shift, and go to state 29
    ENUM                shift, and go to state 30
    LEFT_PAREN          shift, and go to state 31
    LEFT_CURLY_BRACKET  shift, and go to state 83
    INC_OP              shift, and go to state 32
    DEC_OP              shift, and go to state 33
    NOT_OP              shift, and go to state 34

    $default  reduce using rule 16 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    tail_inloop           go to state 182
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    break_statement       go to state 85
    continue_statement    go to state 86
    expression_statement  go to state 56
    statement             go to state 87
    statement_inloop      go to state 88
    statements_inloop     go to state 89
    enum_statement        go to state 59
    func_call             go to state 60


State 168

   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   80 for_statement: FOR LEFT_PAREN assign SEMICOLON . bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

    IDENT           shift, and go to state 134
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    bool_expression  go to state 183
    relExp           go to state 136
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49


State 169

   22 tail_inloop: LEFT_CURLY_BRACKET statements_inloop RIGHT_CURLY_BRACKET .

    $default  reduce using rule 22 (tail_inloop)


State 170

   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   81 do_statement: DO tail_inloop WHILE LEFT_PAREN . bool_expression RIGHT_PAREN SEMICOLON

    IDENT           shift, and go to state 134
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    bool_expression  go to state 184
    relExp           go to state 136
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49


State 171

   82 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN . LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 185


State 172

  126 one_val: IDENT .  [RIGHT_CURLY_BRACKET, COMMA]
  127        | IDENT . ASSIGN_OP value

    ASSIGN_OP  shift, and go to state 186

    $default  reduce using rule 126 (one_val)


State 173

  123 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET enum_list . RIGHT_CURLY_BRACKET
  125 enum_list: enum_list . COMMA one_val

    RIGHT_CURLY_BRACKET  shift, and go to state 187
    COMMA                shift, and go to state 188


State 174

  124 enum_list: one_val .

    $default  reduce using rule 124 (enum_list)


State 175

   14 declaration: beforedecl type IDENT SEMICOLON .

    $default  reduce using rule 14 (declaration)


State 176

   15 declaration: beforedecl type IDENT ASSIGN_OP . expression SEMICOLON
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL

    IDENT           shift, and go to state 91
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    bool_expression  go to state 38
    assign           go to state 39
    expression       go to state 189
    simpleExp        go to state 41
    andExp           go to state 42
    bitRelExp        go to state 43
    relExp           go to state 44
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49


State 177

  131 arguments: arguments COMMA argument .

    $default  reduce using rule 131 (arguments)


State 178

  129 func_call: IDENT ASSIGN_OP IDENT LEFT_PAREN arguments . RIGHT_PAREN
  131 arguments: arguments . COMMA argument

    RIGHT_PAREN  shift, and go to state 190
    COMMA        shift, and go to state 164


State 179

   16 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING]
   17 declarations: . $@2 declaration
   18             | . declarations declaration
   20 tail: LEFT_CURLY_BRACKET . statements RIGHT_CURLY_BRACKET
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   78 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   79 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   80 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   81 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   82 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   90 return_statement: . RETURN return_val SEMICOLON
   93 expression_statement: . expression SEMICOLON
   94 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, TRUE_TOKEN, FALSE_TOKEN, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   95           | . statement
   96           | . statements statement
   97 statement: . if_statement
   98          | . while_statement
   99          | . for_statement
  100          | . do_statement
  101          | . switch_statement
  102          | . return_statement
  103          | . expression_statement
  104          | . declarations
  105          | . enum_statement
  106          | . func_call
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  128 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  129          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 17
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    IF              shift, and go to state 22
    WHILE           shift, and go to state 23
    FOR             shift, and go to state 24
    DO              shift, and go to state 25
    SWITCH          shift, and go to state 26
    RETURN          shift, and go to state 27
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    ENUM            shift, and go to state 30
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    INTEGER              reduce using rule 16 ($@2)
    INTEGER              [reduce using rule 94 (statements)]
    FLOAT                reduce using rule 16 ($@2)
    FLOAT                [reduce using rule 94 (statements)]
    DOUBLE               reduce using rule 16 ($@2)
    DOUBLE               [reduce using rule 94 (statements)]
    VOID                 reduce using rule 16 ($@2)
    VOID                 [reduce using rule 94 (statements)]
    BOOLEAN              reduce using rule 16 ($@2)
    BOOLEAN              [reduce using rule 94 (statements)]
    CHAR                 reduce using rule 16 ($@2)
    CHAR                 [reduce using rule 94 (statements)]
    CONST                reduce using rule 16 ($@2)
    CONST                [reduce using rule 94 (statements)]
    STRING               reduce using rule 16 ($@2)
    STRING               [reduce using rule 94 (statements)]
    IDENT                [reduce using rule 94 (statements)]
    CONST_INT            [reduce using rule 94 (statements)]
    CONST_FLOAT          [reduce using rule 94 (statements)]
    CONST_CHAR           [reduce using rule 94 (statements)]
    STRING_LITERAL       [reduce using rule 94 (statements)]
    IF                   [reduce using rule 94 (statements)]
    WHILE                [reduce using rule 94 (statements)]
    FOR                  [reduce using rule 94 (statements)]
    DO                   [reduce using rule 94 (statements)]
    SWITCH               [reduce using rule 94 (statements)]
    RETURN               [reduce using rule 94 (statements)]
    TRUE_TOKEN           [reduce using rule 94 (statements)]
    FALSE_TOKEN          [reduce using rule 94 (statements)]
    ENUM                 [reduce using rule 94 (statements)]
    LEFT_PAREN           [reduce using rule 94 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 94 (statements)
    INC_OP               [reduce using rule 94 (statements)]
    DEC_OP               [reduce using rule 94 (statements)]
    NOT_OP               [reduce using rule 94 (statements)]
    $default             reduce using rule 16 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    expression_statement  go to state 56
    statements            go to state 191
    statement             go to state 58
    enum_statement        go to state 59
    func_call             go to state 60


State 180

   73 else_if: . ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   74        | . else_if ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   75        | . %empty  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, FUNC, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   78 if_statement: IF LEFT_PAREN bool_expression RIGHT_PAREN tail . else_if else_part

    ELIF  shift, and go to state 192

    ELIF      [reduce using rule 75 (else_if)]
    $default  reduce using rule 75 (else_if)

    else_if  go to state 193


State 181

   16 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING]
   17 declarations: . $@2 declaration
   18             | . declarations declaration
   19 tail: statements .  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, FUNC, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   78 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   79 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   80 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   81 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   82 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   90 return_statement: . RETURN return_val SEMICOLON
   93 expression_statement: . expression SEMICOLON
   96 statements: statements . statement
   97 statement: . if_statement
   98          | . while_statement
   99          | . for_statement
  100          | . do_statement
  101          | . switch_statement
  102          | . return_statement
  103          | . expression_statement
  104          | . declarations
  105          | . enum_statement
  106          | . func_call
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  128 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  129          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 17
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    IF              shift, and go to state 22
    WHILE           shift, and go to state 23
    FOR             shift, and go to state 24
    DO              shift, and go to state 25
    SWITCH          shift, and go to state 26
    RETURN          shift, and go to state 27
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    ENUM            shift, and go to state 30
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    $end                 reduce using rule 19 (tail)
    INTEGER              reduce using rule 16 ($@2)
    INTEGER              [reduce using rule 19 (tail)]
    FLOAT                reduce using rule 16 ($@2)
    FLOAT                [reduce using rule 19 (tail)]
    DOUBLE               reduce using rule 16 ($@2)
    DOUBLE               [reduce using rule 19 (tail)]
    VOID                 reduce using rule 16 ($@2)
    VOID                 [reduce using rule 19 (tail)]
    BOOLEAN              reduce using rule 16 ($@2)
    BOOLEAN              [reduce using rule 19 (tail)]
    CHAR                 reduce using rule 16 ($@2)
    CHAR                 [reduce using rule 19 (tail)]
    CONST                reduce using rule 16 ($@2)
    CONST                [reduce using rule 19 (tail)]
    STRING               reduce using rule 16 ($@2)
    STRING               [reduce using rule 19 (tail)]
    IDENT                [reduce using rule 19 (tail)]
    CONST_INT            [reduce using rule 19 (tail)]
    CONST_FLOAT          [reduce using rule 19 (tail)]
    CONST_CHAR           [reduce using rule 19 (tail)]
    STRING_LITERAL       [reduce using rule 19 (tail)]
    IF                   [reduce using rule 19 (tail)]
    ELSE                 reduce using rule 19 (tail)
    ELIF                 reduce using rule 19 (tail)
    WHILE                [reduce using rule 19 (tail)]
    FOR                  [reduce using rule 19 (tail)]
    DO                   [reduce using rule 19 (tail)]
    SWITCH               [reduce using rule 19 (tail)]
    RETURN               [reduce using rule 19 (tail)]
    BREAK                reduce using rule 19 (tail)
    CONTINUE             reduce using rule 19 (tail)
    TRUE_TOKEN           [reduce using rule 19 (tail)]
    FALSE_TOKEN          [reduce using rule 19 (tail)]
    ENUM                 [reduce using rule 19 (tail)]
    FUNC                 reduce using rule 19 (tail)
    LEFT_PAREN           [reduce using rule 19 (tail)]
    RIGHT_CURLY_BRACKET  reduce using rule 19 (tail)
    INC_OP               [reduce using rule 19 (tail)]
    DEC_OP               [reduce using rule 19 (tail)]
    NOT_OP               [reduce using rule 19 (tail)]
    $default             reduce using rule 16 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    expression_statement  go to state 56
    statement             go to state 124
    enum_statement        go to state 59
    func_call             go to state 60


State 182

   79 while_statement: WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop .

    $default  reduce using rule 79 (while_statement)


State 183

   80 for_statement: FOR LEFT_PAREN assign SEMICOLON bool_expression . SEMICOLON expression RIGHT_PAREN tail_inloop

    SEMICOLON  shift, and go to state 194


State 184

   81 do_statement: DO tail_inloop WHILE LEFT_PAREN bool_expression . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN  shift, and go to state 195


State 185

   82 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET . cases RIGHT_CURLY_BRACKET
   83 cases: . case
   84      | . cases case
   85      | . cases default
   87 case: . CASE expression COLON statements BREAK SEMICOLON

    CASE  shift, and go to state 196

    cases  go to state 197
    case   go to state 198


State 186

   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
  127 one_val: IDENT ASSIGN_OP . value

    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21

    value  go to state 199


State 187

  123 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET .

    $default  reduce using rule 123 (enum_statement)


State 188

  125 enum_list: enum_list COMMA . one_val
  126 one_val: . IDENT
  127        | . IDENT ASSIGN_OP value

    IDENT  shift, and go to state 172

    one_val  go to state 200


State 189

   15 declaration: beforedecl type IDENT ASSIGN_OP expression . SEMICOLON

    SEMICOLON  shift, and go to state 201


State 190

  129 func_call: IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN .

    $default  reduce using rule 129 (func_call)


State 191

   16 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING]
   17 declarations: . $@2 declaration
   18             | . declarations declaration
   20 tail: LEFT_CURLY_BRACKET statements . RIGHT_CURLY_BRACKET
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   78 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   79 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   80 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   81 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   82 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   90 return_statement: . RETURN return_val SEMICOLON
   93 expression_statement: . expression SEMICOLON
   96 statements: statements . statement
   97 statement: . if_statement
   98          | . while_statement
   99          | . for_statement
  100          | . do_statement
  101          | . switch_statement
  102          | . return_statement
  103          | . expression_statement
  104          | . declarations
  105          | . enum_statement
  106          | . func_call
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  128 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  129          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT                shift, and go to state 17
    CONST_INT            shift, and go to state 18
    CONST_FLOAT          shift, and go to state 19
    CONST_CHAR           shift, and go to state 20
    STRING_LITERAL       shift, and go to state 21
    IF                   shift, and go to state 22
    WHILE                shift, and go to state 23
    FOR                  shift, and go to state 24
    DO                   shift, and go to state 25
    SWITCH               shift, and go to state 26
    RETURN               shift, and go to state 27
    TRUE_TOKEN           shift, and go to state 28
    FALSE_TOKEN          shift, and go to state 29
    ENUM                 shift, and go to state 30
    LEFT_PAREN           shift, and go to state 31
    RIGHT_CURLY_BRACKET  shift, and go to state 202
    INC_OP               shift, and go to state 32
    DEC_OP               shift, and go to state 33
    NOT_OP               shift, and go to state 34

    $default  reduce using rule 16 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    expression_statement  go to state 56
    statement             go to state 124
    enum_statement        go to state 59
    func_call             go to state 60


State 192

   73 else_if: ELIF . LEFT_PAREN bool_expression RIGHT_PAREN tail

    LEFT_PAREN  shift, and go to state 203


State 193

   74 else_if: else_if . ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   76 else_part: . ELSE tail
   77          | . %empty  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, FUNC, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   78 if_statement: IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if . else_part

    ELSE  shift, and go to state 204
    ELIF  shift, and go to state 205

    ELSE      [reduce using rule 77 (else_part)]
    ELIF      [reduce using rule 77 (else_part)]
    $default  reduce using rule 77 (else_part)

    else_part  go to state 206


State 194

   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   80 for_statement: FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON . expression RIGHT_PAREN tail_inloop

    IDENT           shift, and go to state 91
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    bool_expression  go to state 38
    assign           go to state 39
    expression       go to state 207
    simpleExp        go to state 41
    andExp           go to state 42
    bitRelExp        go to state 43
    relExp           go to state 44
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49


State 195

   81 do_statement: DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN . SEMICOLON

    SEMICOLON  shift, and go to state 208


State 196

   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   87 case: CASE . expression COLON statements BREAK SEMICOLON

    IDENT           shift, and go to state 91
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    bool_expression  go to state 38
    assign           go to state 39
    expression       go to state 209
    simpleExp        go to state 41
    andExp           go to state 42
    bitRelExp        go to state 43
    relExp           go to state 44
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49


State 197

   82 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases . RIGHT_CURLY_BRACKET
   84 cases: cases . case
   85      | cases . default
   86 default: . DEFAULT COLON statements BREAK SEMICOLON
   87 case: . CASE expression COLON statements BREAK SEMICOLON

    CASE                 shift, and go to state 196
    DEFAULT              shift, and go to state 210
    RIGHT_CURLY_BRACKET  shift, and go to state 211

    default  go to state 212
    case     go to state 213


State 198

   83 cases: case .

    $default  reduce using rule 83 (cases)


State 199

  127 one_val: IDENT ASSIGN_OP value .

    $default  reduce using rule 127 (one_val)


State 200

  125 enum_list: enum_list COMMA one_val .

    $default  reduce using rule 125 (enum_list)


State 201

   15 declaration: beforedecl type IDENT ASSIGN_OP expression SEMICOLON .

    $default  reduce using rule 15 (declaration)


State 202

   20 tail: LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET .

    $default  reduce using rule 20 (tail)


State 203

   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   73 else_if: ELIF LEFT_PAREN . bool_expression RIGHT_PAREN tail

    IDENT           shift, and go to state 134
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    bool_expression  go to state 214
    relExp           go to state 136
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49


State 204

   16 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING]
   17 declarations: . $@2 declaration
   18             | . declarations declaration
   19 tail: . statements
   20     | . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   76 else_part: ELSE . tail
   78 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   79 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   80 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   81 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   82 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   90 return_statement: . RETURN return_val SEMICOLON
   93 expression_statement: . expression SEMICOLON
   94 statements: . %empty  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, FUNC, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   95           | . statement
   96           | . statements statement
   97 statement: . if_statement
   98          | . while_statement
   99          | . for_statement
  100          | . do_statement
  101          | . switch_statement
  102          | . return_statement
  103          | . expression_statement
  104          | . declarations
  105          | . enum_statement
  106          | . func_call
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  128 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  129          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT               shift, and go to state 17
    CONST_INT           shift, and go to state 18
    CONST_FLOAT         shift, and go to state 19
    CONST_CHAR          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    IF                  shift, and go to state 22
    WHILE               shift, and go to state 23
    FOR                 shift, and go to state 24
    DO                  shift, and go to state 25
    SWITCH              shift, and go to state 26
    RETURN              shift, and go to state 27
    TRUE_TOKEN          shift, and go to state 28
    FALSE_TOKEN         shift, and go to state 29
    ENUM                shift, and go to state 30
    LEFT_PAREN          shift, and go to state 31
    LEFT_CURLY_BRACKET  shift, and go to state 179
    INC_OP              shift, and go to state 32
    DEC_OP              shift, and go to state 33
    NOT_OP              shift, and go to state 34

    $end                 reduce using rule 94 (statements)
    INTEGER              reduce using rule 16 ($@2)
    INTEGER              [reduce using rule 94 (statements)]
    FLOAT                reduce using rule 16 ($@2)
    FLOAT                [reduce using rule 94 (statements)]
    DOUBLE               reduce using rule 16 ($@2)
    DOUBLE               [reduce using rule 94 (statements)]
    VOID                 reduce using rule 16 ($@2)
    VOID                 [reduce using rule 94 (statements)]
    BOOLEAN              reduce using rule 16 ($@2)
    BOOLEAN              [reduce using rule 94 (statements)]
    CHAR                 reduce using rule 16 ($@2)
    CHAR                 [reduce using rule 94 (statements)]
    CONST                reduce using rule 16 ($@2)
    CONST                [reduce using rule 94 (statements)]
    STRING               reduce using rule 16 ($@2)
    STRING               [reduce using rule 94 (statements)]
    IDENT                [reduce using rule 94 (statements)]
    CONST_INT            [reduce using rule 94 (statements)]
    CONST_FLOAT          [reduce using rule 94 (statements)]
    CONST_CHAR           [reduce using rule 94 (statements)]
    STRING_LITERAL       [reduce using rule 94 (statements)]
    IF                   [reduce using rule 94 (statements)]
    ELSE                 reduce using rule 94 (statements)
    ELIF                 reduce using rule 94 (statements)
    WHILE                [reduce using rule 94 (statements)]
    FOR                  [reduce using rule 94 (statements)]
    DO                   [reduce using rule 94 (statements)]
    SWITCH               [reduce using rule 94 (statements)]
    RETURN               [reduce using rule 94 (statements)]
    BREAK                reduce using rule 94 (statements)
    CONTINUE             reduce using rule 94 (statements)
    TRUE_TOKEN           [reduce using rule 94 (statements)]
    FALSE_TOKEN          [reduce using rule 94 (statements)]
    ENUM                 [reduce using rule 94 (statements)]
    FUNC                 reduce using rule 94 (statements)
    LEFT_PAREN           [reduce using rule 94 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 94 (statements)
    INC_OP               [reduce using rule 94 (statements)]
    DEC_OP               [reduce using rule 94 (statements)]
    NOT_OP               [reduce using rule 94 (statements)]
    $default             reduce using rule 16 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    tail                  go to state 215
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    expression_statement  go to state 56
    statements            go to state 181
    statement             go to state 58
    enum_statement        go to state 59
    func_call             go to state 60


State 205

   74 else_if: else_if ELIF . LEFT_PAREN bool_expression RIGHT_PAREN tail

    LEFT_PAREN  shift, and go to state 216


State 206

   78 if_statement: IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part .

    $default  reduce using rule 78 (if_statement)


State 207

   80 for_statement: FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression . RIGHT_PAREN tail_inloop

    RIGHT_PAREN  shift, and go to state 217


State 208

   81 do_statement: DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON .

    $default  reduce using rule 81 (do_statement)


State 209

   87 case: CASE expression . COLON statements BREAK SEMICOLON

    COLON  shift, and go to state 218


State 210

   86 default: DEFAULT . COLON statements BREAK SEMICOLON

    COLON  shift, and go to state 219


State 211

   82 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .

    $default  reduce using rule 82 (switch_statement)


State 212

   85 cases: cases default .

    $default  reduce using rule 85 (cases)


State 213

   84 cases: cases case .

    $default  reduce using rule 84 (cases)


State 214

   73 else_if: ELIF LEFT_PAREN bool_expression . RIGHT_PAREN tail

    RIGHT_PAREN  shift, and go to state 220


State 215

   76 else_part: ELSE tail .

    $default  reduce using rule 76 (else_part)


State 216

   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   74 else_if: else_if ELIF LEFT_PAREN . bool_expression RIGHT_PAREN tail

    IDENT           shift, and go to state 134
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    bool_expression  go to state 221
    relExp           go to state 136
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49


State 217

   16 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING]
   17 declarations: . $@2 declaration
   18             | . declarations declaration
   21 tail_inloop: . statements_inloop
   22            | . LEFT_CURLY_BRACKET statements_inloop RIGHT_CURLY_BRACKET
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   78 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   79 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   80 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80              | FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN . tail_inloop
   81 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   82 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   90 return_statement: . RETURN return_val SEMICOLON
   91 break_statement: . BREAK SEMICOLON
   92 continue_statement: . CONTINUE SEMICOLON
   93 expression_statement: . expression SEMICOLON
   97 statement: . if_statement
   98          | . while_statement
   99          | . for_statement
  100          | . do_statement
  101          | . switch_statement
  102          | . return_statement
  103          | . expression_statement
  104          | . declarations
  105          | . enum_statement
  106          | . func_call
  107 statement_inloop: . statement
  108                 | . break_statement
  109                 | . continue_statement
  110 statements_inloop: . statement_inloop
  111                  | . statements_inloop statement_inloop
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  128 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  129          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT               shift, and go to state 17
    CONST_INT           shift, and go to state 18
    CONST_FLOAT         shift, and go to state 19
    CONST_CHAR          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    IF                  shift, and go to state 22
    WHILE               shift, and go to state 23
    FOR                 shift, and go to state 24
    DO                  shift, and go to state 25
    SWITCH              shift, and go to state 26
    RETURN              shift, and go to state 27
    BREAK               shift, and go to state 81
    CONTINUE            shift, and go to state 82
    TRUE_TOKEN          shift, and go to state 28
    FALSE_TOKEN         shift, and go to state 29
    ENUM                shift, and go to state 30
    LEFT_PAREN          shift, and go to state 31
    LEFT_CURLY_BRACKET  shift, and go to state 83
    INC_OP              shift, and go to state 32
    DEC_OP              shift, and go to state 33
    NOT_OP              shift, and go to state 34

    $default  reduce using rule 16 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    tail_inloop           go to state 222
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    break_statement       go to state 85
    continue_statement    go to state 86
    expression_statement  go to state 56
    statement             go to state 87
    statement_inloop      go to state 88
    statements_inloop     go to state 89
    enum_statement        go to state 59
    func_call             go to state 60


State 218

   16 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING]
   17 declarations: . $@2 declaration
   18             | . declarations declaration
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   78 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   79 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   80 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   81 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   82 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   87 case: CASE expression COLON . statements BREAK SEMICOLON
   90 return_statement: . RETURN return_val SEMICOLON
   93 expression_statement: . expression SEMICOLON
   94 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, TRUE_TOKEN, FALSE_TOKEN, ENUM, LEFT_PAREN, INC_OP, DEC_OP, NOT_OP]
   95           | . statement
   96           | . statements statement
   97 statement: . if_statement
   98          | . while_statement
   99          | . for_statement
  100          | . do_statement
  101          | . switch_statement
  102          | . return_statement
  103          | . expression_statement
  104          | . declarations
  105          | . enum_statement
  106          | . func_call
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  128 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  129          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 17
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    IF              shift, and go to state 22
    WHILE           shift, and go to state 23
    FOR             shift, and go to state 24
    DO              shift, and go to state 25
    SWITCH          shift, and go to state 26
    RETURN          shift, and go to state 27
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    ENUM            shift, and go to state 30
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    INTEGER         reduce using rule 16 ($@2)
    INTEGER         [reduce using rule 94 (statements)]
    FLOAT           reduce using rule 16 ($@2)
    FLOAT           [reduce using rule 94 (statements)]
    DOUBLE          reduce using rule 16 ($@2)
    DOUBLE          [reduce using rule 94 (statements)]
    VOID            reduce using rule 16 ($@2)
    VOID            [reduce using rule 94 (statements)]
    BOOLEAN         reduce using rule 16 ($@2)
    BOOLEAN         [reduce using rule 94 (statements)]
    CHAR            reduce using rule 16 ($@2)
    CHAR            [reduce using rule 94 (statements)]
    CONST           reduce using rule 16 ($@2)
    CONST           [reduce using rule 94 (statements)]
    STRING          reduce using rule 16 ($@2)
    STRING          [reduce using rule 94 (statements)]
    IDENT           [reduce using rule 94 (statements)]
    CONST_INT       [reduce using rule 94 (statements)]
    CONST_FLOAT     [reduce using rule 94 (statements)]
    CONST_CHAR      [reduce using rule 94 (statements)]
    STRING_LITERAL  [reduce using rule 94 (statements)]
    IF              [reduce using rule 94 (statements)]
    WHILE           [reduce using rule 94 (statements)]
    FOR             [reduce using rule 94 (statements)]
    DO              [reduce using rule 94 (statements)]
    SWITCH          [reduce using rule 94 (statements)]
    RETURN          [reduce using rule 94 (statements)]
    BREAK           reduce using rule 94 (statements)
    TRUE_TOKEN      [reduce using rule 94 (statements)]
    FALSE_TOKEN     [reduce using rule 94 (statements)]
    ENUM            [reduce using rule 94 (statements)]
    LEFT_PAREN      [reduce using rule 94 (statements)]
    INC_OP          [reduce using rule 94 (statements)]
    DEC_OP          [reduce using rule 94 (statements)]
    NOT_OP          [reduce using rule 94 (statements)]
    $default        reduce using rule 16 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    expression_statement  go to state 56
    statements            go to state 223
    statement             go to state 58
    enum_statement        go to state 59
    func_call             go to state 60


State 219

   16 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING]
   17 declarations: . $@2 declaration
   18             | . declarations declaration
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   78 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   79 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   80 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   81 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   82 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   86 default: DEFAULT COLON . statements BREAK SEMICOLON
   90 return_statement: . RETURN return_val SEMICOLON
   93 expression_statement: . expression SEMICOLON
   94 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, TRUE_TOKEN, FALSE_TOKEN, ENUM, LEFT_PAREN, INC_OP, DEC_OP, NOT_OP]
   95           | . statement
   96           | . statements statement
   97 statement: . if_statement
   98          | . while_statement
   99          | . for_statement
  100          | . do_statement
  101          | . switch_statement
  102          | . return_statement
  103          | . expression_statement
  104          | . declarations
  105          | . enum_statement
  106          | . func_call
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  128 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  129          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 17
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    IF              shift, and go to state 22
    WHILE           shift, and go to state 23
    FOR             shift, and go to state 24
    DO              shift, and go to state 25
    SWITCH          shift, and go to state 26
    RETURN          shift, and go to state 27
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    ENUM            shift, and go to state 30
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    INTEGER         reduce using rule 16 ($@2)
    INTEGER         [reduce using rule 94 (statements)]
    FLOAT           reduce using rule 16 ($@2)
    FLOAT           [reduce using rule 94 (statements)]
    DOUBLE          reduce using rule 16 ($@2)
    DOUBLE          [reduce using rule 94 (statements)]
    VOID            reduce using rule 16 ($@2)
    VOID            [reduce using rule 94 (statements)]
    BOOLEAN         reduce using rule 16 ($@2)
    BOOLEAN         [reduce using rule 94 (statements)]
    CHAR            reduce using rule 16 ($@2)
    CHAR            [reduce using rule 94 (statements)]
    CONST           reduce using rule 16 ($@2)
    CONST           [reduce using rule 94 (statements)]
    STRING          reduce using rule 16 ($@2)
    STRING          [reduce using rule 94 (statements)]
    IDENT           [reduce using rule 94 (statements)]
    CONST_INT       [reduce using rule 94 (statements)]
    CONST_FLOAT     [reduce using rule 94 (statements)]
    CONST_CHAR      [reduce using rule 94 (statements)]
    STRING_LITERAL  [reduce using rule 94 (statements)]
    IF              [reduce using rule 94 (statements)]
    WHILE           [reduce using rule 94 (statements)]
    FOR             [reduce using rule 94 (statements)]
    DO              [reduce using rule 94 (statements)]
    SWITCH          [reduce using rule 94 (statements)]
    RETURN          [reduce using rule 94 (statements)]
    BREAK           reduce using rule 94 (statements)
    TRUE_TOKEN      [reduce using rule 94 (statements)]
    FALSE_TOKEN     [reduce using rule 94 (statements)]
    ENUM            [reduce using rule 94 (statements)]
    LEFT_PAREN      [reduce using rule 94 (statements)]
    INC_OP          [reduce using rule 94 (statements)]
    DEC_OP          [reduce using rule 94 (statements)]
    NOT_OP          [reduce using rule 94 (statements)]
    $default        reduce using rule 16 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    expression_statement  go to state 56
    statements            go to state 224
    statement             go to state 58
    enum_statement        go to state 59
    func_call             go to state 60


State 220

   16 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING]
   17 declarations: . $@2 declaration
   18             | . declarations declaration
   19 tail: . statements
   20     | . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   73 else_if: ELIF LEFT_PAREN bool_expression RIGHT_PAREN . tail
   78 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   79 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   80 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   81 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   82 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   90 return_statement: . RETURN return_val SEMICOLON
   93 expression_statement: . expression SEMICOLON
   94 statements: . %empty  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, FUNC, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   95           | . statement
   96           | . statements statement
   97 statement: . if_statement
   98          | . while_statement
   99          | . for_statement
  100          | . do_statement
  101          | . switch_statement
  102          | . return_statement
  103          | . expression_statement
  104          | . declarations
  105          | . enum_statement
  106          | . func_call
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  128 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  129          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT               shift, and go to state 17
    CONST_INT           shift, and go to state 18
    CONST_FLOAT         shift, and go to state 19
    CONST_CHAR          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    IF                  shift, and go to state 22
    WHILE               shift, and go to state 23
    FOR                 shift, and go to state 24
    DO                  shift, and go to state 25
    SWITCH              shift, and go to state 26
    RETURN              shift, and go to state 27
    TRUE_TOKEN          shift, and go to state 28
    FALSE_TOKEN         shift, and go to state 29
    ENUM                shift, and go to state 30
    LEFT_PAREN          shift, and go to state 31
    LEFT_CURLY_BRACKET  shift, and go to state 179
    INC_OP              shift, and go to state 32
    DEC_OP              shift, and go to state 33
    NOT_OP              shift, and go to state 34

    $end                 reduce using rule 94 (statements)
    INTEGER              reduce using rule 16 ($@2)
    INTEGER              [reduce using rule 94 (statements)]
    FLOAT                reduce using rule 16 ($@2)
    FLOAT                [reduce using rule 94 (statements)]
    DOUBLE               reduce using rule 16 ($@2)
    DOUBLE               [reduce using rule 94 (statements)]
    VOID                 reduce using rule 16 ($@2)
    VOID                 [reduce using rule 94 (statements)]
    BOOLEAN              reduce using rule 16 ($@2)
    BOOLEAN              [reduce using rule 94 (statements)]
    CHAR                 reduce using rule 16 ($@2)
    CHAR                 [reduce using rule 94 (statements)]
    CONST                reduce using rule 16 ($@2)
    CONST                [reduce using rule 94 (statements)]
    STRING               reduce using rule 16 ($@2)
    STRING               [reduce using rule 94 (statements)]
    IDENT                [reduce using rule 94 (statements)]
    CONST_INT            [reduce using rule 94 (statements)]
    CONST_FLOAT          [reduce using rule 94 (statements)]
    CONST_CHAR           [reduce using rule 94 (statements)]
    STRING_LITERAL       [reduce using rule 94 (statements)]
    IF                   [reduce using rule 94 (statements)]
    ELSE                 reduce using rule 94 (statements)
    ELIF                 reduce using rule 94 (statements)
    WHILE                [reduce using rule 94 (statements)]
    FOR                  [reduce using rule 94 (statements)]
    DO                   [reduce using rule 94 (statements)]
    SWITCH               [reduce using rule 94 (statements)]
    RETURN               [reduce using rule 94 (statements)]
    BREAK                reduce using rule 94 (statements)
    CONTINUE             reduce using rule 94 (statements)
    TRUE_TOKEN           [reduce using rule 94 (statements)]
    FALSE_TOKEN          [reduce using rule 94 (statements)]
    ENUM                 [reduce using rule 94 (statements)]
    FUNC                 reduce using rule 94 (statements)
    LEFT_PAREN           [reduce using rule 94 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 94 (statements)
    INC_OP               [reduce using rule 94 (statements)]
    DEC_OP               [reduce using rule 94 (statements)]
    NOT_OP               [reduce using rule 94 (statements)]
    $default             reduce using rule 16 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    tail                  go to state 225
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    expression_statement  go to state 56
    statements            go to state 181
    statement             go to state 58
    enum_statement        go to state 59
    func_call             go to state 60


State 221

   74 else_if: else_if ELIF LEFT_PAREN bool_expression . RIGHT_PAREN tail

    RIGHT_PAREN  shift, and go to state 226


State 222

   80 for_statement: FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop .

    $default  reduce using rule 80 (for_statement)


State 223

   16 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING]
   17 declarations: . $@2 declaration
   18             | . declarations declaration
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   78 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   79 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   80 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   81 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   82 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   87 case: CASE expression COLON statements . BREAK SEMICOLON
   90 return_statement: . RETURN return_val SEMICOLON
   93 expression_statement: . expression SEMICOLON
   96 statements: statements . statement
   97 statement: . if_statement
   98          | . while_statement
   99          | . for_statement
  100          | . do_statement
  101          | . switch_statement
  102          | . return_statement
  103          | . expression_statement
  104          | . declarations
  105          | . enum_statement
  106          | . func_call
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  128 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  129          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 17
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    IF              shift, and go to state 22
    WHILE           shift, and go to state 23
    FOR             shift, and go to state 24
    DO              shift, and go to state 25
    SWITCH          shift, and go to state 26
    RETURN          shift, and go to state 27
    BREAK           shift, and go to state 227
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    ENUM            shift, and go to state 30
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    $default  reduce using rule 16 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    expression_statement  go to state 56
    statement             go to state 124
    enum_statement        go to state 59
    func_call             go to state 60


State 224

   16 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING]
   17 declarations: . $@2 declaration
   18             | . declarations declaration
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   78 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   79 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   80 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   81 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   82 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   86 default: DEFAULT COLON statements . BREAK SEMICOLON
   90 return_statement: . RETURN return_val SEMICOLON
   93 expression_statement: . expression SEMICOLON
   96 statements: statements . statement
   97 statement: . if_statement
   98          | . while_statement
   99          | . for_statement
  100          | . do_statement
  101          | . switch_statement
  102          | . return_statement
  103          | . expression_statement
  104          | . declarations
  105          | . enum_statement
  106          | . func_call
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  128 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  129          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 17
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    IF              shift, and go to state 22
    WHILE           shift, and go to state 23
    FOR             shift, and go to state 24
    DO              shift, and go to state 25
    SWITCH          shift, and go to state 26
    RETURN          shift, and go to state 27
    BREAK           shift, and go to state 228
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    ENUM            shift, and go to state 30
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    $default  reduce using rule 16 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    expression_statement  go to state 56
    statement             go to state 124
    enum_statement        go to state 59
    func_call             go to state 60


State 225

   73 else_if: ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail .

    $default  reduce using rule 73 (else_if)


State 226

   16 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING]
   17 declarations: . $@2 declaration
   18             | . declarations declaration
   19 tail: . statements
   20     | . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   74 else_if: else_if ELIF LEFT_PAREN bool_expression RIGHT_PAREN . tail
   78 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   79 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   80 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   81 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   82 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   90 return_statement: . RETURN return_val SEMICOLON
   93 expression_statement: . expression SEMICOLON
   94 statements: . %empty  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STRING, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, FUNC, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   95           | . statement
   96           | . statements statement
   97 statement: . if_statement
   98          | . while_statement
   99          | . for_statement
  100          | . do_statement
  101          | . switch_statement
  102          | . return_statement
  103          | . expression_statement
  104          | . declarations
  105          | . enum_statement
  106          | . func_call
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  128 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  129          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT               shift, and go to state 17
    CONST_INT           shift, and go to state 18
    CONST_FLOAT         shift, and go to state 19
    CONST_CHAR          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    IF                  shift, and go to state 22
    WHILE               shift, and go to state 23
    FOR                 shift, and go to state 24
    DO                  shift, and go to state 25
    SWITCH              shift, and go to state 26
    RETURN              shift, and go to state 27
    TRUE_TOKEN          shift, and go to state 28
    FALSE_TOKEN         shift, and go to state 29
    ENUM                shift, and go to state 30
    LEFT_PAREN          shift, and go to state 31
    LEFT_CURLY_BRACKET  shift, and go to state 179
    INC_OP              shift, and go to state 32
    DEC_OP              shift, and go to state 33
    NOT_OP              shift, and go to state 34

    $end                 reduce using rule 94 (statements)
    INTEGER              reduce using rule 16 ($@2)
    INTEGER              [reduce using rule 94 (statements)]
    FLOAT                reduce using rule 16 ($@2)
    FLOAT                [reduce using rule 94 (statements)]
    DOUBLE               reduce using rule 16 ($@2)
    DOUBLE               [reduce using rule 94 (statements)]
    VOID                 reduce using rule 16 ($@2)
    VOID                 [reduce using rule 94 (statements)]
    BOOLEAN              reduce using rule 16 ($@2)
    BOOLEAN              [reduce using rule 94 (statements)]
    CHAR                 reduce using rule 16 ($@2)
    CHAR                 [reduce using rule 94 (statements)]
    CONST                reduce using rule 16 ($@2)
    CONST                [reduce using rule 94 (statements)]
    STRING               reduce using rule 16 ($@2)
    STRING               [reduce using rule 94 (statements)]
    IDENT                [reduce using rule 94 (statements)]
    CONST_INT            [reduce using rule 94 (statements)]
    CONST_FLOAT          [reduce using rule 94 (statements)]
    CONST_CHAR           [reduce using rule 94 (statements)]
    STRING_LITERAL       [reduce using rule 94 (statements)]
    IF                   [reduce using rule 94 (statements)]
    ELSE                 reduce using rule 94 (statements)
    ELIF                 reduce using rule 94 (statements)
    WHILE                [reduce using rule 94 (statements)]
    FOR                  [reduce using rule 94 (statements)]
    DO                   [reduce using rule 94 (statements)]
    SWITCH               [reduce using rule 94 (statements)]
    RETURN               [reduce using rule 94 (statements)]
    BREAK                reduce using rule 94 (statements)
    CONTINUE             reduce using rule 94 (statements)
    TRUE_TOKEN           [reduce using rule 94 (statements)]
    FALSE_TOKEN          [reduce using rule 94 (statements)]
    ENUM                 [reduce using rule 94 (statements)]
    FUNC                 reduce using rule 94 (statements)
    LEFT_PAREN           [reduce using rule 94 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 94 (statements)
    INC_OP               [reduce using rule 94 (statements)]
    DEC_OP               [reduce using rule 94 (statements)]
    NOT_OP               [reduce using rule 94 (statements)]
    $default             reduce using rule 16 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    tail                  go to state 229
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    expression_statement  go to state 56
    statements            go to state 181
    statement             go to state 58
    enum_statement        go to state 59
    func_call             go to state 60


State 227

   87 case: CASE expression COLON statements BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 230


State 228

   86 default: DEFAULT COLON statements BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 231


State 229

   74 else_if: else_if ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail .

    $default  reduce using rule 74 (else_if)


State 230

   87 case: CASE expression COLON statements BREAK SEMICOLON .

    $default  reduce using rule 87 (case)


State 231

   86 default: DEFAULT COLON statements BREAK SEMICOLON .

    $default  reduce using rule 86 (default)
