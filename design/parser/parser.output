Terminals unused in grammar

    LEFT_SQ_BRACKET
    RIGHT_SQ_BRACKET
    QUESTION_MARK
    DOT
    BIT_NOT_OP


State 5 conflicts: 2 shift/reduce, 7 reduce/reduce
State 9 conflicts: 1 shift/reduce
State 28 conflicts: 21 shift/reduce, 7 reduce/reduce
State 31 conflicts: 1 reduce/reduce
State 33 conflicts: 1 reduce/reduce
State 53 conflicts: 1 shift/reduce, 7 reduce/reduce
State 60 conflicts: 2 shift/reduce, 4 reduce/reduce
State 95 conflicts: 21 shift/reduce, 7 reduce/reduce
State 98 conflicts: 4 reduce/reduce
State 144 conflicts: 1 reduce/reduce
State 159 conflicts: 2 shift/reduce
State 160 conflicts: 2 shift/reduce
State 161 conflicts: 2 shift/reduce
State 162 conflicts: 2 shift/reduce
State 187 conflicts: 21 shift/reduce, 7 reduce/reduce
State 188 conflicts: 1 shift/reduce
State 219 conflicts: 21 shift/reduce, 7 reduce/reduce
State 220 conflicts: 21 shift/reduce, 7 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: program function
    2        | program global
    3        | functions
    4        | globals

    5 globals: globals global
    6        | global

    7 global: declaration
    8       | enum_statement

    9 type: INTEGER
   10     | FLOAT
   11     | DOUBLE
   12     | VOID
   13     | BOOLEAN
   14     | CHAR
   15     | STR

   16 beforedecl: CONST
   17           | %empty

   18 declaration: beforedecl type IDENT SEMICOLON
   19            | beforedecl type IDENT ASSIGN_OP expression SEMICOLON

   20 declarations: declaration
   21             | declarations declaration

   22 tail: LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET

   23 tail_inloop: LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET

   24 bool_expression: relExp
   25                | TRUE_TOKEN
   26                | FALSE_TOKEN

   27 assign: IDENT ASSIGN_OP expression

   28 expression: assign
   29           | IDENT INC_OP
   30           | IDENT DEC_OP
   31           | simpleExp
   32           | IDENT
   33           | bool_expression

   34 simpleExp: simpleExp OR_OP andExp
   35          | andExp

   36 andExp: andExp AND_OP
   37       | bitRelExp

   38 bitRelExp: bitRelExp BIT_OR_OP relExp
   39          | bitRelExp AND relExp
   40          | bitRelExp BIT_XOR_OP relExp
   41          | relExp

   42 op: EQ_OP
   43   | NE_OP
   44   | GT_OP
   45   | LT_OP
   46   | LE_OP
   47   | GE_OP
   48   | OR_OP
   49   | AND_OP

   50 relExp: relExp op bitshiftExp
   51       | bitshiftExp

   52 bitshiftExp: bitshiftExp BIT_LSHIFT_OP sumExp
   53            | bitshiftExp BIT_RSHIFT_OP sumExp
   54            | sumExp

   55 pls_min: ADD_OP
   56        | SUB_OP

   57 mul_div: MUL_OP
   58        | DIV_OP
   59        | MOD_OP

   60 sumExp: sumExp pls_min mulExp
   61       | mulExp

   62 mulExp: mulExp mul_div unaryExp
   63       | unaryExp

   64 unaryExp: INC_OP IDENT
   65         | DEC_OP IDENT
   66         | NOT_OP IDENT
   67         | IDENT
   68         | value
   69         | LEFT_PAREN expression RIGHT_PAREN

   70 value: CONST_INT
   71      | CONST_FLOAT
   72      | CONST_CHAR
   73      | STRING_LITERAL

   74 else_if: ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   75        | else_if ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   76        | %empty

   77 else_part: ELSE tail
   78          | %empty

   79 if_statement: IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part

   80 while_statement: WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop

   81 optional_type: %empty
   82              | type

   83 for_statement: FOR LEFT_PAREN optional_type assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

   84 do_statement: DO tail_inloop UNTIL LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON

   85 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

   86 cases: case
   87      | cases case
   88      | cases default

   89 default: DEFAULT COLON statements

   90 case: CASE expression COLON statements BREAK SEMICOLON

   91 return_val: expression
   92           | %empty

   93 return_statement: RETURN return_val SEMICOLON

   94 break_statement: BREAK SEMICOLON

   95 continue_statement: CONTINUE SEMICOLON

   96 expression_statement: expression SEMICOLON

   97 statements: %empty
   98           | statement
   99           | statements statement

  100 statement: if_statement
  101          | while_statement
  102          | for_statement
  103          | do_statement
  104          | switch_statement
  105          | return_statement
  106          | expression_statement
  107          | declarations
  108          | enum_statement
  109          | func_call
  110          | break_statement
  111          | continue_statement

  112 functions: functions function
  113          | function

  114 function: function_head function_tail

  115 param_empty: parameters
  116            | %empty

  117 function_head: FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN type

  118 function_tail: LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET

  119 parameters: parameter
  120           | parameters COMMA parameter
  121           | %empty

  122 parameter: type IDENT

  123 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON

  124 enum_list: one_val
  125          | enum_list COMMA one_val

  126 one_val: IDENT
  127        | IDENT ASSIGN_OP value

  128 func_call: IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON
  129          | IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON

  130 arguments: argument
  131          | arguments COMMA argument
  132          | %empty

  133 argument: expression


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INTEGER <int_val> (258) 9
    FLOAT <int_val> (259) 10
    DOUBLE <int_val> (260) 11
    VOID <int_val> (261) 12
    BOOLEAN <int_val> (262) 13
    CHAR <int_val> (263) 14
    CONST <int_val> (264) 16
    STR <int_val> (265) 15
    IDENT <symbol_table_item> (266) 18 19 27 29 30 32 64 65 66 67 117 122 123 126 127 128 129
    CONST_INT <int_val> (267) 70
    CONST_FLOAT <double_val> (268) 71
    CONST_CHAR <char_val> (269) 72
    STRING_LITERAL <str_val> (270) 73
    IF <int_val> (271) 79
    ELSE <int_val> (272) 77
    ELIF <int_val> (273) 74 75
    WHILE <int_val> (274) 80
    FOR <int_val> (275) 83
    DO <int_val> (276) 84
    SWITCH <int_val> (277) 85
    CASE <int_val> (278) 90
    DEFAULT <int_val> (279) 89
    RETURN <int_val> (280) 93
    BREAK <int_val> (281) 90 94
    CONTINUE <int_val> (282) 95
    TRUE_TOKEN <int_val> (283) 25
    FALSE_TOKEN <int_val> (284) 26
    ENUM <int_val> (285) 123
    FUNC <int_val> (286) 117
    UNTIL <int_val> (287) 84
    LEFT_PAREN <int_val> (288) 69 74 75 79 80 83 84 85 117 128 129
    RIGHT_PAREN <int_val> (289) 69 74 75 79 80 83 84 85 117 128 129
    LEFT_CURLY_BRACKET <int_val> (290) 22 23 85 118 123
    RIGHT_CURLY_BRACKET <int_val> (291) 22 23 85 118 123
    LEFT_SQ_BRACKET <int_val> (292)
    RIGHT_SQ_BRACKET <int_val> (293)
    SEMICOLON <int_val> (294) 18 19 83 84 90 93 94 95 96 123 128 129
    COMMA <int_val> (295) 120 125 131
    COLON <int_val> (296) 89 90
    QUESTION_MARK <int_val> (297)
    DOT <int_val> (298)
    ADD_OP <int_val> (299) 55
    SUB_OP <int_val> (300) 56
    MUL_OP <int_val> (301) 57
    DIV_OP <int_val> (302) 58
    MOD_OP <int_val> (303) 59
    INC_OP <int_val> (304) 29 64
    DEC_OP <int_val> (305) 30 65
    OR_OP <int_val> (306) 34 48
    AND_OP <int_val> (307) 36 49
    NOT_OP <int_val> (308) 66
    BIT_OR_OP <int_val> (309) 38
    AND <int_val> (310) 39
    BIT_XOR_OP <int_val> (311) 40
    BIT_NOT_OP <int_val> (312)
    BIT_LSHIFT_OP <int_val> (313) 52
    BIT_RSHIFT_OP <int_val> (314) 53
    EQ_OP <int_val> (315) 42
    NE_OP <int_val> (316) 43
    GT_OP <int_val> (317) 44
    LT_OP <int_val> (318) 45
    GE_OP <int_val> (319) 47
    LE_OP <int_val> (320) 46
    ASSIGN_OP <int_val> (321) 19 27 127 129


Nonterminals, with rules where they appear

    $accept (67)
        on left: 0
    program (68)
        on left: 1 2 3 4
        on right: 0 1 2
    globals (69)
        on left: 5 6
        on right: 4 5
    global (70)
        on left: 7 8
        on right: 2 5 6
    type (71)
        on left: 9 10 11 12 13 14 15
        on right: 18 19 82 117 122
    beforedecl (72)
        on left: 16 17
        on right: 18 19
    declaration (73)
        on left: 18 19
        on right: 7 20 21
    declarations (74)
        on left: 20 21
        on right: 21 107
    tail (75)
        on left: 22
        on right: 74 75 77 79
    tail_inloop (76)
        on left: 23
        on right: 80 83 84
    bool_expression (77)
        on left: 24 25 26
        on right: 33 74 75 79 80 83 84
    assign (78)
        on left: 27
        on right: 28 83
    expression (79)
        on left: 28 29 30 31 32 33
        on right: 19 27 69 83 85 90 91 96 133
    simpleExp (80)
        on left: 34 35
        on right: 31 34
    andExp (81)
        on left: 36 37
        on right: 34 35 36
    bitRelExp (82)
        on left: 38 39 40 41
        on right: 37 38 39 40
    op (83)
        on left: 42 43 44 45 46 47 48 49
        on right: 50
    relExp (84)
        on left: 50 51
        on right: 24 38 39 40 41 50
    bitshiftExp (85)
        on left: 52 53 54
        on right: 50 51 52 53
    pls_min (86)
        on left: 55 56
        on right: 60
    mul_div (87)
        on left: 57 58 59
        on right: 62
    sumExp (88)
        on left: 60 61
        on right: 52 53 54 60
    mulExp (89)
        on left: 62 63
        on right: 60 61 62
    unaryExp (90)
        on left: 64 65 66 67 68 69
        on right: 62 63
    value (91)
        on left: 70 71 72 73
        on right: 68 127
    else_if (92)
        on left: 74 75 76
        on right: 75 79
    else_part (93)
        on left: 77 78
        on right: 79
    if_statement (94)
        on left: 79
        on right: 100
    while_statement (95)
        on left: 80
        on right: 101
    optional_type (96)
        on left: 81 82
        on right: 83
    for_statement (97)
        on left: 83
        on right: 102
    do_statement (98)
        on left: 84
        on right: 103
    switch_statement (99)
        on left: 85
        on right: 104
    cases (100)
        on left: 86 87 88
        on right: 85 87 88
    default (101)
        on left: 89
        on right: 88
    case (102)
        on left: 90
        on right: 86 87
    return_val (103)
        on left: 91 92
        on right: 93
    return_statement (104)
        on left: 93
        on right: 105
    break_statement (105)
        on left: 94
        on right: 110
    continue_statement (106)
        on left: 95
        on right: 111
    expression_statement (107)
        on left: 96
        on right: 106
    statements (108)
        on left: 97 98 99
        on right: 22 23 89 90 99 118
    statement (109)
        on left: 100 101 102 103 104 105 106 107 108 109 110 111
        on right: 98 99
    functions (110)
        on left: 112 113
        on right: 3 112
    function (111)
        on left: 114
        on right: 1 112 113
    param_empty (112)
        on left: 115 116
        on right: 117
    function_head (113)
        on left: 117
        on right: 114
    function_tail (114)
        on left: 118
        on right: 114
    parameters (115)
        on left: 119 120 121
        on right: 115 120
    parameter (116)
        on left: 122
        on right: 119 120
    enum_statement (117)
        on left: 123
        on right: 8 108
    enum_list (118)
        on left: 124 125
        on right: 123 125
    one_val (119)
        on left: 126 127
        on right: 124 125
    func_call (120)
        on left: 128 129
        on right: 109
    arguments (121)
        on left: 130 131 132
        on right: 128 129 131
    argument (122)
        on left: 133
        on right: 130 131


State 0

    0 $accept: . program $end
    1 program: . program function
    2        | . program global
    3        | . functions
    4        | . globals
    5 globals: . globals global
    6        | . global
    7 global: . declaration
    8       | . enum_statement
   16 beforedecl: . CONST
   17           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STR]
   18 declaration: . beforedecl type IDENT SEMICOLON
   19            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
  112 functions: . functions function
  113          | . function
  114 function: . function_head function_tail
  117 function_head: . FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN type
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON

    CONST  shift, and go to state 1
    ENUM   shift, and go to state 2
    FUNC   shift, and go to state 3

    $default  reduce using rule 17 (beforedecl)

    program         go to state 4
    globals         go to state 5
    global          go to state 6
    beforedecl      go to state 7
    declaration     go to state 8
    functions       go to state 9
    function        go to state 10
    function_head   go to state 11
    enum_statement  go to state 12


State 1

   16 beforedecl: CONST .

    $default  reduce using rule 16 (beforedecl)


State 2

  123 enum_statement: ENUM . IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON

    IDENT  shift, and go to state 13


State 3

  117 function_head: FUNC . IDENT LEFT_PAREN param_empty RIGHT_PAREN type

    IDENT  shift, and go to state 14


State 4

    0 $accept: program . $end
    1 program: program . function
    2        | program . global
    7 global: . declaration
    8       | . enum_statement
   16 beforedecl: . CONST
   17           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STR]
   18 declaration: . beforedecl type IDENT SEMICOLON
   19            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
  114 function: . function_head function_tail
  117 function_head: . FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN type
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON

    $end   shift, and go to state 15
    CONST  shift, and go to state 1
    ENUM   shift, and go to state 2
    FUNC   shift, and go to state 3

    $default  reduce using rule 17 (beforedecl)

    global          go to state 16
    beforedecl      go to state 7
    declaration     go to state 8
    function        go to state 17
    function_head   go to state 11
    enum_statement  go to state 12


State 5

    4 program: globals .  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STR, ENUM, FUNC]
    5 globals: globals . global
    7 global: . declaration
    8       | . enum_statement
   16 beforedecl: . CONST
   17           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STR]
   18 declaration: . beforedecl type IDENT SEMICOLON
   19            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON

    CONST  shift, and go to state 1
    ENUM   shift, and go to state 2

    INTEGER   reduce using rule 4 (program)
    INTEGER   [reduce using rule 17 (beforedecl)]
    FLOAT     reduce using rule 4 (program)
    FLOAT     [reduce using rule 17 (beforedecl)]
    DOUBLE    reduce using rule 4 (program)
    DOUBLE    [reduce using rule 17 (beforedecl)]
    VOID      reduce using rule 4 (program)
    VOID      [reduce using rule 17 (beforedecl)]
    BOOLEAN   reduce using rule 4 (program)
    BOOLEAN   [reduce using rule 17 (beforedecl)]
    CHAR      reduce using rule 4 (program)
    CHAR      [reduce using rule 17 (beforedecl)]
    CONST     [reduce using rule 4 (program)]
    STR       reduce using rule 4 (program)
    STR       [reduce using rule 17 (beforedecl)]
    ENUM      [reduce using rule 4 (program)]
    $default  reduce using rule 4 (program)

    global          go to state 18
    beforedecl      go to state 7
    declaration     go to state 8
    enum_statement  go to state 12


State 6

    6 globals: global .

    $default  reduce using rule 6 (globals)


State 7

    9 type: . INTEGER
   10     | . FLOAT
   11     | . DOUBLE
   12     | . VOID
   13     | . BOOLEAN
   14     | . CHAR
   15     | . STR
   18 declaration: beforedecl . type IDENT SEMICOLON
   19            | beforedecl . type IDENT ASSIGN_OP expression SEMICOLON

    INTEGER  shift, and go to state 19
    FLOAT    shift, and go to state 20
    DOUBLE   shift, and go to state 21
    VOID     shift, and go to state 22
    BOOLEAN  shift, and go to state 23
    CHAR     shift, and go to state 24
    STR      shift, and go to state 25

    type  go to state 26


State 8

    7 global: declaration .

    $default  reduce using rule 7 (global)


State 9

    3 program: functions .  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STR, ENUM, FUNC]
  112 functions: functions . function
  114 function: . function_head function_tail
  117 function_head: . FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN type

    FUNC  shift, and go to state 3

    FUNC      [reduce using rule 3 (program)]
    $default  reduce using rule 3 (program)

    function       go to state 27
    function_head  go to state 11


State 10

  113 functions: function .

    $default  reduce using rule 113 (functions)


State 11

  114 function: function_head . function_tail
  118 function_tail: . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 28

    function_tail  go to state 29


State 12

    8 global: enum_statement .

    $default  reduce using rule 8 (global)


State 13

  123 enum_statement: ENUM IDENT . LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON

    LEFT_CURLY_BRACKET  shift, and go to state 30


State 14

  117 function_head: FUNC IDENT . LEFT_PAREN param_empty RIGHT_PAREN type

    LEFT_PAREN  shift, and go to state 31


State 15

    0 $accept: program $end .

    $default  accept


State 16

    2 program: program global .

    $default  reduce using rule 2 (program)


State 17

    1 program: program function .

    $default  reduce using rule 1 (program)


State 18

    5 globals: globals global .

    $default  reduce using rule 5 (globals)


State 19

    9 type: INTEGER .

    $default  reduce using rule 9 (type)


State 20

   10 type: FLOAT .

    $default  reduce using rule 10 (type)


State 21

   11 type: DOUBLE .

    $default  reduce using rule 11 (type)


State 22

   12 type: VOID .

    $default  reduce using rule 12 (type)


State 23

   13 type: BOOLEAN .

    $default  reduce using rule 13 (type)


State 24

   14 type: CHAR .

    $default  reduce using rule 14 (type)


State 25

   15 type: STR .

    $default  reduce using rule 15 (type)


State 26

   18 declaration: beforedecl type . IDENT SEMICOLON
   19            | beforedecl type . IDENT ASSIGN_OP expression SEMICOLON

    IDENT  shift, and go to state 32


State 27

  112 functions: functions function .

    $default  reduce using rule 112 (functions)


State 28

   16 beforedecl: . CONST
   17           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STR]
   18 declaration: . beforedecl type IDENT SEMICOLON
   19            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   20 declarations: . declaration
   21             | . declarations declaration
   24 bool_expression: . relExp
   25                | . TRUE_TOKEN
   26                | . FALSE_TOKEN
   27 assign: . IDENT ASSIGN_OP expression
   28 expression: . assign
   29           | . IDENT INC_OP
   30           | . IDENT DEC_OP
   31           | . simpleExp
   32           | . IDENT
   33           | . bool_expression
   34 simpleExp: . simpleExp OR_OP andExp
   35          | . andExp
   36 andExp: . andExp AND_OP
   37       | . bitRelExp
   38 bitRelExp: . bitRelExp BIT_OR_OP relExp
   39          | . bitRelExp AND relExp
   40          | . bitRelExp BIT_XOR_OP relExp
   41          | . relExp
   50 relExp: . relExp op bitshiftExp
   51       | . bitshiftExp
   52 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   53            | . bitshiftExp BIT_RSHIFT_OP sumExp
   54            | . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL
   79 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   80 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   83 for_statement: . FOR LEFT_PAREN optional_type assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   84 do_statement: . DO tail_inloop UNTIL LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   85 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   93 return_statement: . RETURN return_val SEMICOLON
   94 break_statement: . BREAK SEMICOLON
   95 continue_statement: . CONTINUE SEMICOLON
   96 expression_statement: . expression SEMICOLON
   97 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STR, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   98           | . statement
   99           | . statements statement
  100 statement: . if_statement
  101          | . while_statement
  102          | . for_statement
  103          | . do_statement
  104          | . switch_statement
  105          | . return_statement
  106          | . expression_statement
  107          | . declarations
  108          | . enum_statement
  109          | . func_call
  110          | . break_statement
  111          | . continue_statement
  118 function_tail: LEFT_CURLY_BRACKET . statements RIGHT_CURLY_BRACKET
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON
  128 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON
  129          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 33
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    IF              shift, and go to state 38
    WHILE           shift, and go to state 39
    FOR             shift, and go to state 40
    DO              shift, and go to state 41
    SWITCH          shift, and go to state 42
    RETURN          shift, and go to state 43
    BREAK           shift, and go to state 44
    CONTINUE        shift, and go to state 45
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    ENUM            shift, and go to state 2
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    INTEGER              reduce using rule 17 (beforedecl)
    INTEGER              [reduce using rule 97 (statements)]
    FLOAT                reduce using rule 17 (beforedecl)
    FLOAT                [reduce using rule 97 (statements)]
    DOUBLE               reduce using rule 17 (beforedecl)
    DOUBLE               [reduce using rule 97 (statements)]
    VOID                 reduce using rule 17 (beforedecl)
    VOID                 [reduce using rule 97 (statements)]
    BOOLEAN              reduce using rule 17 (beforedecl)
    BOOLEAN              [reduce using rule 97 (statements)]
    CHAR                 reduce using rule 17 (beforedecl)
    CHAR                 [reduce using rule 97 (statements)]
    CONST                [reduce using rule 97 (statements)]
    STR                  reduce using rule 17 (beforedecl)
    STR                  [reduce using rule 97 (statements)]
    IDENT                [reduce using rule 97 (statements)]
    CONST_INT            [reduce using rule 97 (statements)]
    CONST_FLOAT          [reduce using rule 97 (statements)]
    CONST_CHAR           [reduce using rule 97 (statements)]
    STRING_LITERAL       [reduce using rule 97 (statements)]
    IF                   [reduce using rule 97 (statements)]
    WHILE                [reduce using rule 97 (statements)]
    FOR                  [reduce using rule 97 (statements)]
    DO                   [reduce using rule 97 (statements)]
    SWITCH               [reduce using rule 97 (statements)]
    RETURN               [reduce using rule 97 (statements)]
    BREAK                [reduce using rule 97 (statements)]
    CONTINUE             [reduce using rule 97 (statements)]
    TRUE_TOKEN           [reduce using rule 97 (statements)]
    FALSE_TOKEN          [reduce using rule 97 (statements)]
    ENUM                 [reduce using rule 97 (statements)]
    LEFT_PAREN           [reduce using rule 97 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 97 (statements)
    INC_OP               [reduce using rule 97 (statements)]
    DEC_OP               [reduce using rule 97 (statements)]
    NOT_OP               [reduce using rule 97 (statements)]
    $default             reduce using rule 17 (beforedecl)

    beforedecl            go to state 7
    declaration           go to state 52
    declarations          go to state 53
    bool_expression       go to state 54
    assign                go to state 55
    expression            go to state 56
    simpleExp             go to state 57
    andExp                go to state 58
    bitRelExp             go to state 59
    relExp                go to state 60
    bitshiftExp           go to state 61
    sumExp                go to state 62
    mulExp                go to state 63
    unaryExp              go to state 64
    value                 go to state 65
    if_statement          go to state 66
    while_statement       go to state 67
    for_statement         go to state 68
    do_statement          go to state 69
    switch_statement      go to state 70
    return_statement      go to state 71
    break_statement       go to state 72
    continue_statement    go to state 73
    expression_statement  go to state 74
    statements            go to state 75
    statement             go to state 76
    enum_statement        go to state 77
    func_call             go to state 78


State 29

  114 function: function_head function_tail .

    $default  reduce using rule 114 (function)


State 30

  123 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET . enum_list RIGHT_CURLY_BRACKET SEMICOLON
  124 enum_list: . one_val
  125          | . enum_list COMMA one_val
  126 one_val: . IDENT
  127        | . IDENT ASSIGN_OP value

    IDENT  shift, and go to state 79

    enum_list  go to state 80
    one_val    go to state 81


State 31

    9 type: . INTEGER
   10     | . FLOAT
   11     | . DOUBLE
   12     | . VOID
   13     | . BOOLEAN
   14     | . CHAR
   15     | . STR
  115 param_empty: . parameters
  116            | . %empty  [RIGHT_PAREN]
  117 function_head: FUNC IDENT LEFT_PAREN . param_empty RIGHT_PAREN type
  119 parameters: . parameter
  120           | . parameters COMMA parameter
  121           | . %empty  [RIGHT_PAREN, COMMA]
  122 parameter: . type IDENT

    INTEGER  shift, and go to state 19
    FLOAT    shift, and go to state 20
    DOUBLE   shift, and go to state 21
    VOID     shift, and go to state 22
    BOOLEAN  shift, and go to state 23
    CHAR     shift, and go to state 24
    STR      shift, and go to state 25

    RIGHT_PAREN  reduce using rule 116 (param_empty)
    RIGHT_PAREN  [reduce using rule 121 (parameters)]
    COMMA        reduce using rule 121 (parameters)
    $default     reduce using rule 116 (param_empty)

    type         go to state 82
    param_empty  go to state 83
    parameters   go to state 84
    parameter    go to state 85


State 32

   18 declaration: beforedecl type IDENT . SEMICOLON
   19            | beforedecl type IDENT . ASSIGN_OP expression SEMICOLON

    SEMICOLON  shift, and go to state 86
    ASSIGN_OP  shift, and go to state 87


State 33

   27 assign: IDENT . ASSIGN_OP expression
   29 expression: IDENT . INC_OP
   30           | IDENT . DEC_OP
   32           | IDENT .  [SEMICOLON]
   67 unaryExp: IDENT .  [SEMICOLON, ADD_OP, SUB_OP, MUL_OP, DIV_OP, MOD_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
  128 func_call: IDENT . LEFT_PAREN arguments RIGHT_PAREN SEMICOLON
  129          | IDENT . ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON

    LEFT_PAREN  shift, and go to state 88
    INC_OP      shift, and go to state 89
    DEC_OP      shift, and go to state 90
    ASSIGN_OP   shift, and go to state 91

    SEMICOLON  reduce using rule 32 (expression)
    SEMICOLON  [reduce using rule 67 (unaryExp)]
    $default   reduce using rule 67 (unaryExp)


State 34

   70 value: CONST_INT .

    $default  reduce using rule 70 (value)


State 35

   71 value: CONST_FLOAT .

    $default  reduce using rule 71 (value)


State 36

   72 value: CONST_CHAR .

    $default  reduce using rule 72 (value)


State 37

   73 value: STRING_LITERAL .

    $default  reduce using rule 73 (value)


State 38

   79 if_statement: IF . LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part

    LEFT_PAREN  shift, and go to state 92


State 39

   80 while_statement: WHILE . LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop

    LEFT_PAREN  shift, and go to state 93


State 40

   83 for_statement: FOR . LEFT_PAREN optional_type assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

    LEFT_PAREN  shift, and go to state 94


State 41

   23 tail_inloop: . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   84 do_statement: DO . tail_inloop UNTIL LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON

    LEFT_CURLY_BRACKET  shift, and go to state 95

    tail_inloop  go to state 96


State 42

   85 switch_statement: SWITCH . LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    LEFT_PAREN  shift, and go to state 97


State 43

   24 bool_expression: . relExp
   25                | . TRUE_TOKEN
   26                | . FALSE_TOKEN
   27 assign: . IDENT ASSIGN_OP expression
   28 expression: . assign
   29           | . IDENT INC_OP
   30           | . IDENT DEC_OP
   31           | . simpleExp
   32           | . IDENT
   33           | . bool_expression
   34 simpleExp: . simpleExp OR_OP andExp
   35          | . andExp
   36 andExp: . andExp AND_OP
   37       | . bitRelExp
   38 bitRelExp: . bitRelExp BIT_OR_OP relExp
   39          | . bitRelExp AND relExp
   40          | . bitRelExp BIT_XOR_OP relExp
   41          | . relExp
   50 relExp: . relExp op bitshiftExp
   51       | . bitshiftExp
   52 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   53            | . bitshiftExp BIT_RSHIFT_OP sumExp
   54            | . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL
   91 return_val: . expression
   92           | . %empty  [SEMICOLON]
   93 return_statement: RETURN . return_val SEMICOLON

    IDENT           shift, and go to state 98
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    $default  reduce using rule 92 (return_val)

    bool_expression  go to state 54
    assign           go to state 55
    expression       go to state 99
    simpleExp        go to state 57
    andExp           go to state 58
    bitRelExp        go to state 59
    relExp           go to state 60
    bitshiftExp      go to state 61
    sumExp           go to state 62
    mulExp           go to state 63
    unaryExp         go to state 64
    value            go to state 65
    return_val       go to state 100


State 44

   94 break_statement: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 101


State 45

   95 continue_statement: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 102


State 46

   25 bool_expression: TRUE_TOKEN .

    $default  reduce using rule 25 (bool_expression)


State 47

   26 bool_expression: FALSE_TOKEN .

    $default  reduce using rule 26 (bool_expression)


State 48

   24 bool_expression: . relExp
   25                | . TRUE_TOKEN
   26                | . FALSE_TOKEN
   27 assign: . IDENT ASSIGN_OP expression
   28 expression: . assign
   29           | . IDENT INC_OP
   30           | . IDENT DEC_OP
   31           | . simpleExp
   32           | . IDENT
   33           | . bool_expression
   34 simpleExp: . simpleExp OR_OP andExp
   35          | . andExp
   36 andExp: . andExp AND_OP
   37       | . bitRelExp
   38 bitRelExp: . bitRelExp BIT_OR_OP relExp
   39          | . bitRelExp AND relExp
   40          | . bitRelExp BIT_XOR_OP relExp
   41          | . relExp
   50 relExp: . relExp op bitshiftExp
   51       | . bitshiftExp
   52 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   53            | . bitshiftExp BIT_RSHIFT_OP sumExp
   54            | . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   69         | LEFT_PAREN . expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL

    IDENT           shift, and go to state 98
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    bool_expression  go to state 54
    assign           go to state 55
    expression       go to state 103
    simpleExp        go to state 57
    andExp           go to state 58
    bitRelExp        go to state 59
    relExp           go to state 60
    bitshiftExp      go to state 61
    sumExp           go to state 62
    mulExp           go to state 63
    unaryExp         go to state 64
    value            go to state 65


State 49

   64 unaryExp: INC_OP . IDENT

    IDENT  shift, and go to state 104


State 50

   65 unaryExp: DEC_OP . IDENT

    IDENT  shift, and go to state 105


State 51

   66 unaryExp: NOT_OP . IDENT

    IDENT  shift, and go to state 106


State 52

   20 declarations: declaration .

    $default  reduce using rule 20 (declarations)


State 53

   16 beforedecl: . CONST
   17           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STR]
   18 declaration: . beforedecl type IDENT SEMICOLON
   19            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   21 declarations: declarations . declaration
  107 statement: declarations .  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STR, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, CASE, DEFAULT, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]

    CONST  shift, and go to state 1

    INTEGER   reduce using rule 17 (beforedecl)
    INTEGER   [reduce using rule 107 (statement)]
    FLOAT     reduce using rule 17 (beforedecl)
    FLOAT     [reduce using rule 107 (statement)]
    DOUBLE    reduce using rule 17 (beforedecl)
    DOUBLE    [reduce using rule 107 (statement)]
    VOID      reduce using rule 17 (beforedecl)
    VOID      [reduce using rule 107 (statement)]
    BOOLEAN   reduce using rule 17 (beforedecl)
    BOOLEAN   [reduce using rule 107 (statement)]
    CHAR      reduce using rule 17 (beforedecl)
    CHAR      [reduce using rule 107 (statement)]
    CONST     [reduce using rule 107 (statement)]
    STR       reduce using rule 17 (beforedecl)
    STR       [reduce using rule 107 (statement)]
    $default  reduce using rule 107 (statement)

    beforedecl   go to state 7
    declaration  go to state 107


State 54

   33 expression: bool_expression .

    $default  reduce using rule 33 (expression)


State 55

   28 expression: assign .

    $default  reduce using rule 28 (expression)


State 56

   96 expression_statement: expression . SEMICOLON

    SEMICOLON  shift, and go to state 108


State 57

   31 expression: simpleExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON]
   34 simpleExp: simpleExp . OR_OP andExp

    OR_OP  shift, and go to state 109

    $default  reduce using rule 31 (expression)


State 58

   35 simpleExp: andExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP]
   36 andExp: andExp . AND_OP

    AND_OP  shift, and go to state 110

    $default  reduce using rule 35 (simpleExp)


State 59

   37 andExp: bitRelExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP]
   38 bitRelExp: bitRelExp . BIT_OR_OP relExp
   39          | bitRelExp . AND relExp
   40          | bitRelExp . BIT_XOR_OP relExp

    BIT_OR_OP   shift, and go to state 111
    AND         shift, and go to state 112
    BIT_XOR_OP  shift, and go to state 113

    $default  reduce using rule 37 (andExp)


State 60

   24 bool_expression: relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON]
   41 bitRelExp: relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   42 op: . EQ_OP
   43   | . NE_OP
   44   | . GT_OP
   45   | . LT_OP
   46   | . LE_OP
   47   | . GE_OP
   48   | . OR_OP
   49   | . AND_OP
   50 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 114
    AND_OP  shift, and go to state 115
    EQ_OP   shift, and go to state 116
    NE_OP   shift, and go to state 117
    GT_OP   shift, and go to state 118
    LT_OP   shift, and go to state 119
    GE_OP   shift, and go to state 120
    LE_OP   shift, and go to state 121

    RIGHT_PAREN  reduce using rule 24 (bool_expression)
    RIGHT_PAREN  [reduce using rule 41 (bitRelExp)]
    SEMICOLON    reduce using rule 24 (bool_expression)
    SEMICOLON    [reduce using rule 41 (bitRelExp)]
    COMMA        reduce using rule 24 (bool_expression)
    COMMA        [reduce using rule 41 (bitRelExp)]
    COLON        reduce using rule 24 (bool_expression)
    COLON        [reduce using rule 41 (bitRelExp)]
    OR_OP        [reduce using rule 41 (bitRelExp)]
    AND_OP       [reduce using rule 41 (bitRelExp)]
    BIT_OR_OP    reduce using rule 41 (bitRelExp)
    AND          reduce using rule 41 (bitRelExp)
    BIT_XOR_OP   reduce using rule 41 (bitRelExp)
    $default     reduce using rule 24 (bool_expression)

    op  go to state 122


State 61

   51 relExp: bitshiftExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   52 bitshiftExp: bitshiftExp . BIT_LSHIFT_OP sumExp
   53            | bitshiftExp . BIT_RSHIFT_OP sumExp

    BIT_LSHIFT_OP  shift, and go to state 123
    BIT_RSHIFT_OP  shift, and go to state 124

    $default  reduce using rule 51 (relExp)


State 62

   54 bitshiftExp: sumExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   55 pls_min: . ADD_OP
   56        | . SUB_OP
   60 sumExp: sumExp . pls_min mulExp

    ADD_OP  shift, and go to state 125
    SUB_OP  shift, and go to state 126

    $default  reduce using rule 54 (bitshiftExp)

    pls_min  go to state 127


State 63

   57 mul_div: . MUL_OP
   58        | . DIV_OP
   59        | . MOD_OP
   61 sumExp: mulExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, ADD_OP, SUB_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   62 mulExp: mulExp . mul_div unaryExp

    MUL_OP  shift, and go to state 128
    DIV_OP  shift, and go to state 129
    MOD_OP  shift, and go to state 130

    $default  reduce using rule 61 (sumExp)

    mul_div  go to state 131


State 64

   63 mulExp: unaryExp .

    $default  reduce using rule 63 (mulExp)


State 65

   68 unaryExp: value .

    $default  reduce using rule 68 (unaryExp)


State 66

  100 statement: if_statement .

    $default  reduce using rule 100 (statement)


State 67

  101 statement: while_statement .

    $default  reduce using rule 101 (statement)


State 68

  102 statement: for_statement .

    $default  reduce using rule 102 (statement)


State 69

  103 statement: do_statement .

    $default  reduce using rule 103 (statement)


State 70

  104 statement: switch_statement .

    $default  reduce using rule 104 (statement)


State 71

  105 statement: return_statement .

    $default  reduce using rule 105 (statement)


State 72

  110 statement: break_statement .

    $default  reduce using rule 110 (statement)


State 73

  111 statement: continue_statement .

    $default  reduce using rule 111 (statement)


State 74

  106 statement: expression_statement .

    $default  reduce using rule 106 (statement)


State 75

   16 beforedecl: . CONST
   17           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STR]
   18 declaration: . beforedecl type IDENT SEMICOLON
   19            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   20 declarations: . declaration
   21             | . declarations declaration
   24 bool_expression: . relExp
   25                | . TRUE_TOKEN
   26                | . FALSE_TOKEN
   27 assign: . IDENT ASSIGN_OP expression
   28 expression: . assign
   29           | . IDENT INC_OP
   30           | . IDENT DEC_OP
   31           | . simpleExp
   32           | . IDENT
   33           | . bool_expression
   34 simpleExp: . simpleExp OR_OP andExp
   35          | . andExp
   36 andExp: . andExp AND_OP
   37       | . bitRelExp
   38 bitRelExp: . bitRelExp BIT_OR_OP relExp
   39          | . bitRelExp AND relExp
   40          | . bitRelExp BIT_XOR_OP relExp
   41          | . relExp
   50 relExp: . relExp op bitshiftExp
   51       | . bitshiftExp
   52 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   53            | . bitshiftExp BIT_RSHIFT_OP sumExp
   54            | . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL
   79 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   80 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   83 for_statement: . FOR LEFT_PAREN optional_type assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   84 do_statement: . DO tail_inloop UNTIL LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   85 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   93 return_statement: . RETURN return_val SEMICOLON
   94 break_statement: . BREAK SEMICOLON
   95 continue_statement: . CONTINUE SEMICOLON
   96 expression_statement: . expression SEMICOLON
   99 statements: statements . statement
  100 statement: . if_statement
  101          | . while_statement
  102          | . for_statement
  103          | . do_statement
  104          | . switch_statement
  105          | . return_statement
  106          | . expression_statement
  107          | . declarations
  108          | . enum_statement
  109          | . func_call
  110          | . break_statement
  111          | . continue_statement
  118 function_tail: LEFT_CURLY_BRACKET statements . RIGHT_CURLY_BRACKET
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON
  128 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON
  129          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON

    CONST                shift, and go to state 1
    IDENT                shift, and go to state 33
    CONST_INT            shift, and go to state 34
    CONST_FLOAT          shift, and go to state 35
    CONST_CHAR           shift, and go to state 36
    STRING_LITERAL       shift, and go to state 37
    IF                   shift, and go to state 38
    WHILE                shift, and go to state 39
    FOR                  shift, and go to state 40
    DO                   shift, and go to state 41
    SWITCH               shift, and go to state 42
    RETURN               shift, and go to state 43
    BREAK                shift, and go to state 44
    CONTINUE             shift, and go to state 45
    TRUE_TOKEN           shift, and go to state 46
    FALSE_TOKEN          shift, and go to state 47
    ENUM                 shift, and go to state 2
    LEFT_PAREN           shift, and go to state 48
    RIGHT_CURLY_BRACKET  shift, and go to state 132
    INC_OP               shift, and go to state 49
    DEC_OP               shift, and go to state 50
    NOT_OP               shift, and go to state 51

    $default  reduce using rule 17 (beforedecl)

    beforedecl            go to state 7
    declaration           go to state 52
    declarations          go to state 53
    bool_expression       go to state 54
    assign                go to state 55
    expression            go to state 56
    simpleExp             go to state 57
    andExp                go to state 58
    bitRelExp             go to state 59
    relExp                go to state 60
    bitshiftExp           go to state 61
    sumExp                go to state 62
    mulExp                go to state 63
    unaryExp              go to state 64
    value                 go to state 65
    if_statement          go to state 66
    while_statement       go to state 67
    for_statement         go to state 68
    do_statement          go to state 69
    switch_statement      go to state 70
    return_statement      go to state 71
    break_statement       go to state 72
    continue_statement    go to state 73
    expression_statement  go to state 74
    statement             go to state 133
    enum_statement        go to state 77
    func_call             go to state 78


State 76

   98 statements: statement .

    $default  reduce using rule 98 (statements)


State 77

  108 statement: enum_statement .

    $default  reduce using rule 108 (statement)


State 78

  109 statement: func_call .

    $default  reduce using rule 109 (statement)


State 79

  126 one_val: IDENT .  [RIGHT_CURLY_BRACKET, COMMA]
  127        | IDENT . ASSIGN_OP value

    ASSIGN_OP  shift, and go to state 134

    $default  reduce using rule 126 (one_val)


State 80

  123 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET enum_list . RIGHT_CURLY_BRACKET SEMICOLON
  125 enum_list: enum_list . COMMA one_val

    RIGHT_CURLY_BRACKET  shift, and go to state 135
    COMMA                shift, and go to state 136


State 81

  124 enum_list: one_val .

    $default  reduce using rule 124 (enum_list)


State 82

  122 parameter: type . IDENT

    IDENT  shift, and go to state 137


State 83

  117 function_head: FUNC IDENT LEFT_PAREN param_empty . RIGHT_PAREN type

    RIGHT_PAREN  shift, and go to state 138


State 84

  115 param_empty: parameters .  [RIGHT_PAREN]
  120 parameters: parameters . COMMA parameter

    COMMA  shift, and go to state 139

    $default  reduce using rule 115 (param_empty)


State 85

  119 parameters: parameter .

    $default  reduce using rule 119 (parameters)


State 86

   18 declaration: beforedecl type IDENT SEMICOLON .

    $default  reduce using rule 18 (declaration)


State 87

   19 declaration: beforedecl type IDENT ASSIGN_OP . expression SEMICOLON
   24 bool_expression: . relExp
   25                | . TRUE_TOKEN
   26                | . FALSE_TOKEN
   27 assign: . IDENT ASSIGN_OP expression
   28 expression: . assign
   29           | . IDENT INC_OP
   30           | . IDENT DEC_OP
   31           | . simpleExp
   32           | . IDENT
   33           | . bool_expression
   34 simpleExp: . simpleExp OR_OP andExp
   35          | . andExp
   36 andExp: . andExp AND_OP
   37       | . bitRelExp
   38 bitRelExp: . bitRelExp BIT_OR_OP relExp
   39          | . bitRelExp AND relExp
   40          | . bitRelExp BIT_XOR_OP relExp
   41          | . relExp
   50 relExp: . relExp op bitshiftExp
   51       | . bitshiftExp
   52 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   53            | . bitshiftExp BIT_RSHIFT_OP sumExp
   54            | . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL

    IDENT           shift, and go to state 98
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    bool_expression  go to state 54
    assign           go to state 55
    expression       go to state 140
    simpleExp        go to state 57
    andExp           go to state 58
    bitRelExp        go to state 59
    relExp           go to state 60
    bitshiftExp      go to state 61
    sumExp           go to state 62
    mulExp           go to state 63
    unaryExp         go to state 64
    value            go to state 65


State 88

   24 bool_expression: . relExp
   25                | . TRUE_TOKEN
   26                | . FALSE_TOKEN
   27 assign: . IDENT ASSIGN_OP expression
   28 expression: . assign
   29           | . IDENT INC_OP
   30           | . IDENT DEC_OP
   31           | . simpleExp
   32           | . IDENT
   33           | . bool_expression
   34 simpleExp: . simpleExp OR_OP andExp
   35          | . andExp
   36 andExp: . andExp AND_OP
   37       | . bitRelExp
   38 bitRelExp: . bitRelExp BIT_OR_OP relExp
   39          | . bitRelExp AND relExp
   40          | . bitRelExp BIT_XOR_OP relExp
   41          | . relExp
   50 relExp: . relExp op bitshiftExp
   51       | . bitshiftExp
   52 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   53            | . bitshiftExp BIT_RSHIFT_OP sumExp
   54            | . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL
  128 func_call: IDENT LEFT_PAREN . arguments RIGHT_PAREN SEMICOLON
  130 arguments: . argument
  131          | . arguments COMMA argument
  132          | . %empty  [RIGHT_PAREN, COMMA]
  133 argument: . expression

    IDENT           shift, and go to state 98
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    $default  reduce using rule 132 (arguments)

    bool_expression  go to state 54
    assign           go to state 55
    expression       go to state 141
    simpleExp        go to state 57
    andExp           go to state 58
    bitRelExp        go to state 59
    relExp           go to state 60
    bitshiftExp      go to state 61
    sumExp           go to state 62
    mulExp           go to state 63
    unaryExp         go to state 64
    value            go to state 65
    arguments        go to state 142
    argument         go to state 143


State 89

   29 expression: IDENT INC_OP .

    $default  reduce using rule 29 (expression)


State 90

   30 expression: IDENT DEC_OP .

    $default  reduce using rule 30 (expression)


State 91

   24 bool_expression: . relExp
   25                | . TRUE_TOKEN
   26                | . FALSE_TOKEN
   27 assign: . IDENT ASSIGN_OP expression
   27       | IDENT ASSIGN_OP . expression
   28 expression: . assign
   29           | . IDENT INC_OP
   30           | . IDENT DEC_OP
   31           | . simpleExp
   32           | . IDENT
   33           | . bool_expression
   34 simpleExp: . simpleExp OR_OP andExp
   35          | . andExp
   36 andExp: . andExp AND_OP
   37       | . bitRelExp
   38 bitRelExp: . bitRelExp BIT_OR_OP relExp
   39          | . bitRelExp AND relExp
   40          | . bitRelExp BIT_XOR_OP relExp
   41          | . relExp
   50 relExp: . relExp op bitshiftExp
   51       | . bitshiftExp
   52 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   53            | . bitshiftExp BIT_RSHIFT_OP sumExp
   54            | . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL
  129 func_call: IDENT ASSIGN_OP . IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON

    IDENT           shift, and go to state 144
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    bool_expression  go to state 54
    assign           go to state 55
    expression       go to state 145
    simpleExp        go to state 57
    andExp           go to state 58
    bitRelExp        go to state 59
    relExp           go to state 60
    bitshiftExp      go to state 61
    sumExp           go to state 62
    mulExp           go to state 63
    unaryExp         go to state 64
    value            go to state 65


State 92

   24 bool_expression: . relExp
   25                | . TRUE_TOKEN
   26                | . FALSE_TOKEN
   50 relExp: . relExp op bitshiftExp
   51       | . bitshiftExp
   52 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   53            | . bitshiftExp BIT_RSHIFT_OP sumExp
   54            | . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL
   79 if_statement: IF LEFT_PAREN . bool_expression RIGHT_PAREN tail else_if else_part

    IDENT           shift, and go to state 146
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    bool_expression  go to state 147
    relExp           go to state 148
    bitshiftExp      go to state 61
    sumExp           go to state 62
    mulExp           go to state 63
    unaryExp         go to state 64
    value            go to state 65


State 93

   24 bool_expression: . relExp
   25                | . TRUE_TOKEN
   26                | . FALSE_TOKEN
   50 relExp: . relExp op bitshiftExp
   51       | . bitshiftExp
   52 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   53            | . bitshiftExp BIT_RSHIFT_OP sumExp
   54            | . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL
   80 while_statement: WHILE LEFT_PAREN . bool_expression RIGHT_PAREN tail_inloop

    IDENT           shift, and go to state 146
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    bool_expression  go to state 149
    relExp           go to state 148
    bitshiftExp      go to state 61
    sumExp           go to state 62
    mulExp           go to state 63
    unaryExp         go to state 64
    value            go to state 65


State 94

    9 type: . INTEGER
   10     | . FLOAT
   11     | . DOUBLE
   12     | . VOID
   13     | . BOOLEAN
   14     | . CHAR
   15     | . STR
   81 optional_type: . %empty  [IDENT]
   82              | . type
   83 for_statement: FOR LEFT_PAREN . optional_type assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

    INTEGER  shift, and go to state 19
    FLOAT    shift, and go to state 20
    DOUBLE   shift, and go to state 21
    VOID     shift, and go to state 22
    BOOLEAN  shift, and go to state 23
    CHAR     shift, and go to state 24
    STR      shift, and go to state 25

    $default  reduce using rule 81 (optional_type)

    type           go to state 150
    optional_type  go to state 151


State 95

   16 beforedecl: . CONST
   17           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STR]
   18 declaration: . beforedecl type IDENT SEMICOLON
   19            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   20 declarations: . declaration
   21             | . declarations declaration
   23 tail_inloop: LEFT_CURLY_BRACKET . statements RIGHT_CURLY_BRACKET
   24 bool_expression: . relExp
   25                | . TRUE_TOKEN
   26                | . FALSE_TOKEN
   27 assign: . IDENT ASSIGN_OP expression
   28 expression: . assign
   29           | . IDENT INC_OP
   30           | . IDENT DEC_OP
   31           | . simpleExp
   32           | . IDENT
   33           | . bool_expression
   34 simpleExp: . simpleExp OR_OP andExp
   35          | . andExp
   36 andExp: . andExp AND_OP
   37       | . bitRelExp
   38 bitRelExp: . bitRelExp BIT_OR_OP relExp
   39          | . bitRelExp AND relExp
   40          | . bitRelExp BIT_XOR_OP relExp
   41          | . relExp
   50 relExp: . relExp op bitshiftExp
   51       | . bitshiftExp
   52 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   53            | . bitshiftExp BIT_RSHIFT_OP sumExp
   54            | . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL
   79 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   80 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   83 for_statement: . FOR LEFT_PAREN optional_type assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   84 do_statement: . DO tail_inloop UNTIL LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   85 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   93 return_statement: . RETURN return_val SEMICOLON
   94 break_statement: . BREAK SEMICOLON
   95 continue_statement: . CONTINUE SEMICOLON
   96 expression_statement: . expression SEMICOLON
   97 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STR, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   98           | . statement
   99           | . statements statement
  100 statement: . if_statement
  101          | . while_statement
  102          | . for_statement
  103          | . do_statement
  104          | . switch_statement
  105          | . return_statement
  106          | . expression_statement
  107          | . declarations
  108          | . enum_statement
  109          | . func_call
  110          | . break_statement
  111          | . continue_statement
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON
  128 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON
  129          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 33
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    IF              shift, and go to state 38
    WHILE           shift, and go to state 39
    FOR             shift, and go to state 40
    DO              shift, and go to state 41
    SWITCH          shift, and go to state 42
    RETURN          shift, and go to state 43
    BREAK           shift, and go to state 44
    CONTINUE        shift, and go to state 45
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    ENUM            shift, and go to state 2
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    INTEGER              reduce using rule 17 (beforedecl)
    INTEGER              [reduce using rule 97 (statements)]
    FLOAT                reduce using rule 17 (beforedecl)
    FLOAT                [reduce using rule 97 (statements)]
    DOUBLE               reduce using rule 17 (beforedecl)
    DOUBLE               [reduce using rule 97 (statements)]
    VOID                 reduce using rule 17 (beforedecl)
    VOID                 [reduce using rule 97 (statements)]
    BOOLEAN              reduce using rule 17 (beforedecl)
    BOOLEAN              [reduce using rule 97 (statements)]
    CHAR                 reduce using rule 17 (beforedecl)
    CHAR                 [reduce using rule 97 (statements)]
    CONST                [reduce using rule 97 (statements)]
    STR                  reduce using rule 17 (beforedecl)
    STR                  [reduce using rule 97 (statements)]
    IDENT                [reduce using rule 97 (statements)]
    CONST_INT            [reduce using rule 97 (statements)]
    CONST_FLOAT          [reduce using rule 97 (statements)]
    CONST_CHAR           [reduce using rule 97 (statements)]
    STRING_LITERAL       [reduce using rule 97 (statements)]
    IF                   [reduce using rule 97 (statements)]
    WHILE                [reduce using rule 97 (statements)]
    FOR                  [reduce using rule 97 (statements)]
    DO                   [reduce using rule 97 (statements)]
    SWITCH               [reduce using rule 97 (statements)]
    RETURN               [reduce using rule 97 (statements)]
    BREAK                [reduce using rule 97 (statements)]
    CONTINUE             [reduce using rule 97 (statements)]
    TRUE_TOKEN           [reduce using rule 97 (statements)]
    FALSE_TOKEN          [reduce using rule 97 (statements)]
    ENUM                 [reduce using rule 97 (statements)]
    LEFT_PAREN           [reduce using rule 97 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 97 (statements)
    INC_OP               [reduce using rule 97 (statements)]
    DEC_OP               [reduce using rule 97 (statements)]
    NOT_OP               [reduce using rule 97 (statements)]
    $default             reduce using rule 17 (beforedecl)

    beforedecl            go to state 7
    declaration           go to state 52
    declarations          go to state 53
    bool_expression       go to state 54
    assign                go to state 55
    expression            go to state 56
    simpleExp             go to state 57
    andExp                go to state 58
    bitRelExp             go to state 59
    relExp                go to state 60
    bitshiftExp           go to state 61
    sumExp                go to state 62
    mulExp                go to state 63
    unaryExp              go to state 64
    value                 go to state 65
    if_statement          go to state 66
    while_statement       go to state 67
    for_statement         go to state 68
    do_statement          go to state 69
    switch_statement      go to state 70
    return_statement      go to state 71
    break_statement       go to state 72
    continue_statement    go to state 73
    expression_statement  go to state 74
    statements            go to state 152
    statement             go to state 76
    enum_statement        go to state 77
    func_call             go to state 78


State 96

   84 do_statement: DO tail_inloop . UNTIL LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON

    UNTIL  shift, and go to state 153


State 97

   24 bool_expression: . relExp
   25                | . TRUE_TOKEN
   26                | . FALSE_TOKEN
   27 assign: . IDENT ASSIGN_OP expression
   28 expression: . assign
   29           | . IDENT INC_OP
   30           | . IDENT DEC_OP
   31           | . simpleExp
   32           | . IDENT
   33           | . bool_expression
   34 simpleExp: . simpleExp OR_OP andExp
   35          | . andExp
   36 andExp: . andExp AND_OP
   37       | . bitRelExp
   38 bitRelExp: . bitRelExp BIT_OR_OP relExp
   39          | . bitRelExp AND relExp
   40          | . bitRelExp BIT_XOR_OP relExp
   41          | . relExp
   50 relExp: . relExp op bitshiftExp
   51       | . bitshiftExp
   52 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   53            | . bitshiftExp BIT_RSHIFT_OP sumExp
   54            | . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL
   85 switch_statement: SWITCH LEFT_PAREN . expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    IDENT           shift, and go to state 98
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    bool_expression  go to state 54
    assign           go to state 55
    expression       go to state 154
    simpleExp        go to state 57
    andExp           go to state 58
    bitRelExp        go to state 59
    relExp           go to state 60
    bitshiftExp      go to state 61
    sumExp           go to state 62
    mulExp           go to state 63
    unaryExp         go to state 64
    value            go to state 65


State 98

   27 assign: IDENT . ASSIGN_OP expression
   29 expression: IDENT . INC_OP
   30           | IDENT . DEC_OP
   32           | IDENT .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON]
   67 unaryExp: IDENT .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, ADD_OP, SUB_OP, MUL_OP, DIV_OP, MOD_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]

    INC_OP     shift, and go to state 89
    DEC_OP     shift, and go to state 90
    ASSIGN_OP  shift, and go to state 155

    RIGHT_PAREN  reduce using rule 32 (expression)
    RIGHT_PAREN  [reduce using rule 67 (unaryExp)]
    SEMICOLON    reduce using rule 32 (expression)
    SEMICOLON    [reduce using rule 67 (unaryExp)]
    COMMA        reduce using rule 32 (expression)
    COMMA        [reduce using rule 67 (unaryExp)]
    COLON        reduce using rule 32 (expression)
    COLON        [reduce using rule 67 (unaryExp)]
    $default     reduce using rule 67 (unaryExp)


State 99

   91 return_val: expression .

    $default  reduce using rule 91 (return_val)


State 100

   93 return_statement: RETURN return_val . SEMICOLON

    SEMICOLON  shift, and go to state 156


State 101

   94 break_statement: BREAK SEMICOLON .

    $default  reduce using rule 94 (break_statement)


State 102

   95 continue_statement: CONTINUE SEMICOLON .

    $default  reduce using rule 95 (continue_statement)


State 103

   69 unaryExp: LEFT_PAREN expression . RIGHT_PAREN

    RIGHT_PAREN  shift, and go to state 157


State 104

   64 unaryExp: INC_OP IDENT .

    $default  reduce using rule 64 (unaryExp)


State 105

   65 unaryExp: DEC_OP IDENT .

    $default  reduce using rule 65 (unaryExp)


State 106

   66 unaryExp: NOT_OP IDENT .

    $default  reduce using rule 66 (unaryExp)


State 107

   21 declarations: declarations declaration .

    $default  reduce using rule 21 (declarations)


State 108

   96 expression_statement: expression SEMICOLON .

    $default  reduce using rule 96 (expression_statement)


State 109

   34 simpleExp: simpleExp OR_OP . andExp
   36 andExp: . andExp AND_OP
   37       | . bitRelExp
   38 bitRelExp: . bitRelExp BIT_OR_OP relExp
   39          | . bitRelExp AND relExp
   40          | . bitRelExp BIT_XOR_OP relExp
   41          | . relExp
   50 relExp: . relExp op bitshiftExp
   51       | . bitshiftExp
   52 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   53            | . bitshiftExp BIT_RSHIFT_OP sumExp
   54            | . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL

    IDENT           shift, and go to state 146
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    andExp       go to state 158
    bitRelExp    go to state 59
    relExp       go to state 159
    bitshiftExp  go to state 61
    sumExp       go to state 62
    mulExp       go to state 63
    unaryExp     go to state 64
    value        go to state 65


State 110

   36 andExp: andExp AND_OP .

    $default  reduce using rule 36 (andExp)


State 111

   38 bitRelExp: bitRelExp BIT_OR_OP . relExp
   50 relExp: . relExp op bitshiftExp
   51       | . bitshiftExp
   52 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   53            | . bitshiftExp BIT_RSHIFT_OP sumExp
   54            | . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL

    IDENT           shift, and go to state 146
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    relExp       go to state 160
    bitshiftExp  go to state 61
    sumExp       go to state 62
    mulExp       go to state 63
    unaryExp     go to state 64
    value        go to state 65


State 112

   39 bitRelExp: bitRelExp AND . relExp
   50 relExp: . relExp op bitshiftExp
   51       | . bitshiftExp
   52 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   53            | . bitshiftExp BIT_RSHIFT_OP sumExp
   54            | . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL

    IDENT           shift, and go to state 146
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    relExp       go to state 161
    bitshiftExp  go to state 61
    sumExp       go to state 62
    mulExp       go to state 63
    unaryExp     go to state 64
    value        go to state 65


State 113

   40 bitRelExp: bitRelExp BIT_XOR_OP . relExp
   50 relExp: . relExp op bitshiftExp
   51       | . bitshiftExp
   52 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   53            | . bitshiftExp BIT_RSHIFT_OP sumExp
   54            | . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL

    IDENT           shift, and go to state 146
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    relExp       go to state 162
    bitshiftExp  go to state 61
    sumExp       go to state 62
    mulExp       go to state 63
    unaryExp     go to state 64
    value        go to state 65


State 114

   48 op: OR_OP .

    $default  reduce using rule 48 (op)


State 115

   49 op: AND_OP .

    $default  reduce using rule 49 (op)


State 116

   42 op: EQ_OP .

    $default  reduce using rule 42 (op)


State 117

   43 op: NE_OP .

    $default  reduce using rule 43 (op)


State 118

   44 op: GT_OP .

    $default  reduce using rule 44 (op)


State 119

   45 op: LT_OP .

    $default  reduce using rule 45 (op)


State 120

   47 op: GE_OP .

    $default  reduce using rule 47 (op)


State 121

   46 op: LE_OP .

    $default  reduce using rule 46 (op)


State 122

   50 relExp: relExp op . bitshiftExp
   52 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   53            | . bitshiftExp BIT_RSHIFT_OP sumExp
   54            | . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL

    IDENT           shift, and go to state 146
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    bitshiftExp  go to state 163
    sumExp       go to state 62
    mulExp       go to state 63
    unaryExp     go to state 64
    value        go to state 65


State 123

   52 bitshiftExp: bitshiftExp BIT_LSHIFT_OP . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL

    IDENT           shift, and go to state 146
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    sumExp    go to state 164
    mulExp    go to state 63
    unaryExp  go to state 64
    value     go to state 65


State 124

   53 bitshiftExp: bitshiftExp BIT_RSHIFT_OP . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL

    IDENT           shift, and go to state 146
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    sumExp    go to state 165
    mulExp    go to state 63
    unaryExp  go to state 64
    value     go to state 65


State 125

   55 pls_min: ADD_OP .

    $default  reduce using rule 55 (pls_min)


State 126

   56 pls_min: SUB_OP .

    $default  reduce using rule 56 (pls_min)


State 127

   60 sumExp: sumExp pls_min . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL

    IDENT           shift, and go to state 146
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    mulExp    go to state 166
    unaryExp  go to state 64
    value     go to state 65


State 128

   57 mul_div: MUL_OP .

    $default  reduce using rule 57 (mul_div)


State 129

   58 mul_div: DIV_OP .

    $default  reduce using rule 58 (mul_div)


State 130

   59 mul_div: MOD_OP .

    $default  reduce using rule 59 (mul_div)


State 131

   62 mulExp: mulExp mul_div . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL

    IDENT           shift, and go to state 146
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    unaryExp  go to state 167
    value     go to state 65


State 132

  118 function_tail: LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET .

    $default  reduce using rule 118 (function_tail)


State 133

   99 statements: statements statement .

    $default  reduce using rule 99 (statements)


State 134

   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL
  127 one_val: IDENT ASSIGN_OP . value

    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37

    value  go to state 168


State 135

  123 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET . SEMICOLON

    SEMICOLON  shift, and go to state 169


State 136

  125 enum_list: enum_list COMMA . one_val
  126 one_val: . IDENT
  127        | . IDENT ASSIGN_OP value

    IDENT  shift, and go to state 79

    one_val  go to state 170


State 137

  122 parameter: type IDENT .

    $default  reduce using rule 122 (parameter)


State 138

    9 type: . INTEGER
   10     | . FLOAT
   11     | . DOUBLE
   12     | . VOID
   13     | . BOOLEAN
   14     | . CHAR
   15     | . STR
  117 function_head: FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN . type

    INTEGER  shift, and go to state 19
    FLOAT    shift, and go to state 20
    DOUBLE   shift, and go to state 21
    VOID     shift, and go to state 22
    BOOLEAN  shift, and go to state 23
    CHAR     shift, and go to state 24
    STR      shift, and go to state 25

    type  go to state 171


State 139

    9 type: . INTEGER
   10     | . FLOAT
   11     | . DOUBLE
   12     | . VOID
   13     | . BOOLEAN
   14     | . CHAR
   15     | . STR
  120 parameters: parameters COMMA . parameter
  122 parameter: . type IDENT

    INTEGER  shift, and go to state 19
    FLOAT    shift, and go to state 20
    DOUBLE   shift, and go to state 21
    VOID     shift, and go to state 22
    BOOLEAN  shift, and go to state 23
    CHAR     shift, and go to state 24
    STR      shift, and go to state 25

    type       go to state 82
    parameter  go to state 172


State 140

   19 declaration: beforedecl type IDENT ASSIGN_OP expression . SEMICOLON

    SEMICOLON  shift, and go to state 173


State 141

  133 argument: expression .

    $default  reduce using rule 133 (argument)


State 142

  128 func_call: IDENT LEFT_PAREN arguments . RIGHT_PAREN SEMICOLON
  131 arguments: arguments . COMMA argument

    RIGHT_PAREN  shift, and go to state 174
    COMMA        shift, and go to state 175


State 143

  130 arguments: argument .

    $default  reduce using rule 130 (arguments)


State 144

   27 assign: IDENT . ASSIGN_OP expression
   29 expression: IDENT . INC_OP
   30           | IDENT . DEC_OP
   32           | IDENT .  [SEMICOLON]
   67 unaryExp: IDENT .  [SEMICOLON, ADD_OP, SUB_OP, MUL_OP, DIV_OP, MOD_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
  129 func_call: IDENT ASSIGN_OP IDENT . LEFT_PAREN arguments RIGHT_PAREN SEMICOLON

    LEFT_PAREN  shift, and go to state 176
    INC_OP      shift, and go to state 89
    DEC_OP      shift, and go to state 90
    ASSIGN_OP   shift, and go to state 155

    SEMICOLON  reduce using rule 32 (expression)
    SEMICOLON  [reduce using rule 67 (unaryExp)]
    $default   reduce using rule 67 (unaryExp)


State 145

   27 assign: IDENT ASSIGN_OP expression .

    $default  reduce using rule 27 (assign)


State 146

   67 unaryExp: IDENT .

    $default  reduce using rule 67 (unaryExp)


State 147

   79 if_statement: IF LEFT_PAREN bool_expression . RIGHT_PAREN tail else_if else_part

    RIGHT_PAREN  shift, and go to state 177


State 148

   24 bool_expression: relExp .  [RIGHT_PAREN, SEMICOLON]
   42 op: . EQ_OP
   43   | . NE_OP
   44   | . GT_OP
   45   | . LT_OP
   46   | . LE_OP
   47   | . GE_OP
   48   | . OR_OP
   49   | . AND_OP
   50 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 114
    AND_OP  shift, and go to state 115
    EQ_OP   shift, and go to state 116
    NE_OP   shift, and go to state 117
    GT_OP   shift, and go to state 118
    LT_OP   shift, and go to state 119
    GE_OP   shift, and go to state 120
    LE_OP   shift, and go to state 121

    $default  reduce using rule 24 (bool_expression)

    op  go to state 122


State 149

   80 while_statement: WHILE LEFT_PAREN bool_expression . RIGHT_PAREN tail_inloop

    RIGHT_PAREN  shift, and go to state 178


State 150

   82 optional_type: type .

    $default  reduce using rule 82 (optional_type)


State 151

   27 assign: . IDENT ASSIGN_OP expression
   83 for_statement: FOR LEFT_PAREN optional_type . assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

    IDENT  shift, and go to state 179

    assign  go to state 180


State 152

   16 beforedecl: . CONST
   17           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STR]
   18 declaration: . beforedecl type IDENT SEMICOLON
   19            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   20 declarations: . declaration
   21             | . declarations declaration
   23 tail_inloop: LEFT_CURLY_BRACKET statements . RIGHT_CURLY_BRACKET
   24 bool_expression: . relExp
   25                | . TRUE_TOKEN
   26                | . FALSE_TOKEN
   27 assign: . IDENT ASSIGN_OP expression
   28 expression: . assign
   29           | . IDENT INC_OP
   30           | . IDENT DEC_OP
   31           | . simpleExp
   32           | . IDENT
   33           | . bool_expression
   34 simpleExp: . simpleExp OR_OP andExp
   35          | . andExp
   36 andExp: . andExp AND_OP
   37       | . bitRelExp
   38 bitRelExp: . bitRelExp BIT_OR_OP relExp
   39          | . bitRelExp AND relExp
   40          | . bitRelExp BIT_XOR_OP relExp
   41          | . relExp
   50 relExp: . relExp op bitshiftExp
   51       | . bitshiftExp
   52 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   53            | . bitshiftExp BIT_RSHIFT_OP sumExp
   54            | . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL
   79 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   80 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   83 for_statement: . FOR LEFT_PAREN optional_type assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   84 do_statement: . DO tail_inloop UNTIL LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   85 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   93 return_statement: . RETURN return_val SEMICOLON
   94 break_statement: . BREAK SEMICOLON
   95 continue_statement: . CONTINUE SEMICOLON
   96 expression_statement: . expression SEMICOLON
   99 statements: statements . statement
  100 statement: . if_statement
  101          | . while_statement
  102          | . for_statement
  103          | . do_statement
  104          | . switch_statement
  105          | . return_statement
  106          | . expression_statement
  107          | . declarations
  108          | . enum_statement
  109          | . func_call
  110          | . break_statement
  111          | . continue_statement
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON
  128 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON
  129          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON

    CONST                shift, and go to state 1
    IDENT                shift, and go to state 33
    CONST_INT            shift, and go to state 34
    CONST_FLOAT          shift, and go to state 35
    CONST_CHAR           shift, and go to state 36
    STRING_LITERAL       shift, and go to state 37
    IF                   shift, and go to state 38
    WHILE                shift, and go to state 39
    FOR                  shift, and go to state 40
    DO                   shift, and go to state 41
    SWITCH               shift, and go to state 42
    RETURN               shift, and go to state 43
    BREAK                shift, and go to state 44
    CONTINUE             shift, and go to state 45
    TRUE_TOKEN           shift, and go to state 46
    FALSE_TOKEN          shift, and go to state 47
    ENUM                 shift, and go to state 2
    LEFT_PAREN           shift, and go to state 48
    RIGHT_CURLY_BRACKET  shift, and go to state 181
    INC_OP               shift, and go to state 49
    DEC_OP               shift, and go to state 50
    NOT_OP               shift, and go to state 51

    $default  reduce using rule 17 (beforedecl)

    beforedecl            go to state 7
    declaration           go to state 52
    declarations          go to state 53
    bool_expression       go to state 54
    assign                go to state 55
    expression            go to state 56
    simpleExp             go to state 57
    andExp                go to state 58
    bitRelExp             go to state 59
    relExp                go to state 60
    bitshiftExp           go to state 61
    sumExp                go to state 62
    mulExp                go to state 63
    unaryExp              go to state 64
    value                 go to state 65
    if_statement          go to state 66
    while_statement       go to state 67
    for_statement         go to state 68
    do_statement          go to state 69
    switch_statement      go to state 70
    return_statement      go to state 71
    break_statement       go to state 72
    continue_statement    go to state 73
    expression_statement  go to state 74
    statement             go to state 133
    enum_statement        go to state 77
    func_call             go to state 78


State 153

   84 do_statement: DO tail_inloop UNTIL . LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON

    LEFT_PAREN  shift, and go to state 182


State 154

   85 switch_statement: SWITCH LEFT_PAREN expression . RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    RIGHT_PAREN  shift, and go to state 183


State 155

   24 bool_expression: . relExp
   25                | . TRUE_TOKEN
   26                | . FALSE_TOKEN
   27 assign: . IDENT ASSIGN_OP expression
   27       | IDENT ASSIGN_OP . expression
   28 expression: . assign
   29           | . IDENT INC_OP
   30           | . IDENT DEC_OP
   31           | . simpleExp
   32           | . IDENT
   33           | . bool_expression
   34 simpleExp: . simpleExp OR_OP andExp
   35          | . andExp
   36 andExp: . andExp AND_OP
   37       | . bitRelExp
   38 bitRelExp: . bitRelExp BIT_OR_OP relExp
   39          | . bitRelExp AND relExp
   40          | . bitRelExp BIT_XOR_OP relExp
   41          | . relExp
   50 relExp: . relExp op bitshiftExp
   51       | . bitshiftExp
   52 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   53            | . bitshiftExp BIT_RSHIFT_OP sumExp
   54            | . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL

    IDENT           shift, and go to state 98
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    bool_expression  go to state 54
    assign           go to state 55
    expression       go to state 145
    simpleExp        go to state 57
    andExp           go to state 58
    bitRelExp        go to state 59
    relExp           go to state 60
    bitshiftExp      go to state 61
    sumExp           go to state 62
    mulExp           go to state 63
    unaryExp         go to state 64
    value            go to state 65


State 156

   93 return_statement: RETURN return_val SEMICOLON .

    $default  reduce using rule 93 (return_statement)


State 157

   69 unaryExp: LEFT_PAREN expression RIGHT_PAREN .

    $default  reduce using rule 69 (unaryExp)


State 158

   34 simpleExp: simpleExp OR_OP andExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP]
   36 andExp: andExp . AND_OP

    AND_OP  shift, and go to state 110

    $default  reduce using rule 34 (simpleExp)


State 159

   41 bitRelExp: relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   42 op: . EQ_OP
   43   | . NE_OP
   44   | . GT_OP
   45   | . LT_OP
   46   | . LE_OP
   47   | . GE_OP
   48   | . OR_OP
   49   | . AND_OP
   50 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 114
    AND_OP  shift, and go to state 115
    EQ_OP   shift, and go to state 116
    NE_OP   shift, and go to state 117
    GT_OP   shift, and go to state 118
    LT_OP   shift, and go to state 119
    GE_OP   shift, and go to state 120
    LE_OP   shift, and go to state 121

    OR_OP     [reduce using rule 41 (bitRelExp)]
    AND_OP    [reduce using rule 41 (bitRelExp)]
    $default  reduce using rule 41 (bitRelExp)

    op  go to state 122


State 160

   38 bitRelExp: bitRelExp BIT_OR_OP relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   42 op: . EQ_OP
   43   | . NE_OP
   44   | . GT_OP
   45   | . LT_OP
   46   | . LE_OP
   47   | . GE_OP
   48   | . OR_OP
   49   | . AND_OP
   50 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 114
    AND_OP  shift, and go to state 115
    EQ_OP   shift, and go to state 116
    NE_OP   shift, and go to state 117
    GT_OP   shift, and go to state 118
    LT_OP   shift, and go to state 119
    GE_OP   shift, and go to state 120
    LE_OP   shift, and go to state 121

    OR_OP     [reduce using rule 38 (bitRelExp)]
    AND_OP    [reduce using rule 38 (bitRelExp)]
    $default  reduce using rule 38 (bitRelExp)

    op  go to state 122


State 161

   39 bitRelExp: bitRelExp AND relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   42 op: . EQ_OP
   43   | . NE_OP
   44   | . GT_OP
   45   | . LT_OP
   46   | . LE_OP
   47   | . GE_OP
   48   | . OR_OP
   49   | . AND_OP
   50 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 114
    AND_OP  shift, and go to state 115
    EQ_OP   shift, and go to state 116
    NE_OP   shift, and go to state 117
    GT_OP   shift, and go to state 118
    LT_OP   shift, and go to state 119
    GE_OP   shift, and go to state 120
    LE_OP   shift, and go to state 121

    OR_OP     [reduce using rule 39 (bitRelExp)]
    AND_OP    [reduce using rule 39 (bitRelExp)]
    $default  reduce using rule 39 (bitRelExp)

    op  go to state 122


State 162

   40 bitRelExp: bitRelExp BIT_XOR_OP relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   42 op: . EQ_OP
   43   | . NE_OP
   44   | . GT_OP
   45   | . LT_OP
   46   | . LE_OP
   47   | . GE_OP
   48   | . OR_OP
   49   | . AND_OP
   50 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 114
    AND_OP  shift, and go to state 115
    EQ_OP   shift, and go to state 116
    NE_OP   shift, and go to state 117
    GT_OP   shift, and go to state 118
    LT_OP   shift, and go to state 119
    GE_OP   shift, and go to state 120
    LE_OP   shift, and go to state 121

    OR_OP     [reduce using rule 40 (bitRelExp)]
    AND_OP    [reduce using rule 40 (bitRelExp)]
    $default  reduce using rule 40 (bitRelExp)

    op  go to state 122


State 163

   50 relExp: relExp op bitshiftExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   52 bitshiftExp: bitshiftExp . BIT_LSHIFT_OP sumExp
   53            | bitshiftExp . BIT_RSHIFT_OP sumExp

    BIT_LSHIFT_OP  shift, and go to state 123
    BIT_RSHIFT_OP  shift, and go to state 124

    $default  reduce using rule 50 (relExp)


State 164

   52 bitshiftExp: bitshiftExp BIT_LSHIFT_OP sumExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   55 pls_min: . ADD_OP
   56        | . SUB_OP
   60 sumExp: sumExp . pls_min mulExp

    ADD_OP  shift, and go to state 125
    SUB_OP  shift, and go to state 126

    $default  reduce using rule 52 (bitshiftExp)

    pls_min  go to state 127


State 165

   53 bitshiftExp: bitshiftExp BIT_RSHIFT_OP sumExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   55 pls_min: . ADD_OP
   56        | . SUB_OP
   60 sumExp: sumExp . pls_min mulExp

    ADD_OP  shift, and go to state 125
    SUB_OP  shift, and go to state 126

    $default  reduce using rule 53 (bitshiftExp)

    pls_min  go to state 127


State 166

   57 mul_div: . MUL_OP
   58        | . DIV_OP
   59        | . MOD_OP
   60 sumExp: sumExp pls_min mulExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, ADD_OP, SUB_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   62 mulExp: mulExp . mul_div unaryExp

    MUL_OP  shift, and go to state 128
    DIV_OP  shift, and go to state 129
    MOD_OP  shift, and go to state 130

    $default  reduce using rule 60 (sumExp)

    mul_div  go to state 131


State 167

   62 mulExp: mulExp mul_div unaryExp .

    $default  reduce using rule 62 (mulExp)


State 168

  127 one_val: IDENT ASSIGN_OP value .

    $default  reduce using rule 127 (one_val)


State 169

  123 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON .

    $default  reduce using rule 123 (enum_statement)


State 170

  125 enum_list: enum_list COMMA one_val .

    $default  reduce using rule 125 (enum_list)


State 171

  117 function_head: FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN type .

    $default  reduce using rule 117 (function_head)


State 172

  120 parameters: parameters COMMA parameter .

    $default  reduce using rule 120 (parameters)


State 173

   19 declaration: beforedecl type IDENT ASSIGN_OP expression SEMICOLON .

    $default  reduce using rule 19 (declaration)


State 174

  128 func_call: IDENT LEFT_PAREN arguments RIGHT_PAREN . SEMICOLON

    SEMICOLON  shift, and go to state 184


State 175

   24 bool_expression: . relExp
   25                | . TRUE_TOKEN
   26                | . FALSE_TOKEN
   27 assign: . IDENT ASSIGN_OP expression
   28 expression: . assign
   29           | . IDENT INC_OP
   30           | . IDENT DEC_OP
   31           | . simpleExp
   32           | . IDENT
   33           | . bool_expression
   34 simpleExp: . simpleExp OR_OP andExp
   35          | . andExp
   36 andExp: . andExp AND_OP
   37       | . bitRelExp
   38 bitRelExp: . bitRelExp BIT_OR_OP relExp
   39          | . bitRelExp AND relExp
   40          | . bitRelExp BIT_XOR_OP relExp
   41          | . relExp
   50 relExp: . relExp op bitshiftExp
   51       | . bitshiftExp
   52 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   53            | . bitshiftExp BIT_RSHIFT_OP sumExp
   54            | . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL
  131 arguments: arguments COMMA . argument
  133 argument: . expression

    IDENT           shift, and go to state 98
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    bool_expression  go to state 54
    assign           go to state 55
    expression       go to state 141
    simpleExp        go to state 57
    andExp           go to state 58
    bitRelExp        go to state 59
    relExp           go to state 60
    bitshiftExp      go to state 61
    sumExp           go to state 62
    mulExp           go to state 63
    unaryExp         go to state 64
    value            go to state 65
    argument         go to state 185


State 176

   24 bool_expression: . relExp
   25                | . TRUE_TOKEN
   26                | . FALSE_TOKEN
   27 assign: . IDENT ASSIGN_OP expression
   28 expression: . assign
   29           | . IDENT INC_OP
   30           | . IDENT DEC_OP
   31           | . simpleExp
   32           | . IDENT
   33           | . bool_expression
   34 simpleExp: . simpleExp OR_OP andExp
   35          | . andExp
   36 andExp: . andExp AND_OP
   37       | . bitRelExp
   38 bitRelExp: . bitRelExp BIT_OR_OP relExp
   39          | . bitRelExp AND relExp
   40          | . bitRelExp BIT_XOR_OP relExp
   41          | . relExp
   50 relExp: . relExp op bitshiftExp
   51       | . bitshiftExp
   52 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   53            | . bitshiftExp BIT_RSHIFT_OP sumExp
   54            | . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL
  129 func_call: IDENT ASSIGN_OP IDENT LEFT_PAREN . arguments RIGHT_PAREN SEMICOLON
  130 arguments: . argument
  131          | . arguments COMMA argument
  132          | . %empty  [RIGHT_PAREN, COMMA]
  133 argument: . expression

    IDENT           shift, and go to state 98
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    $default  reduce using rule 132 (arguments)

    bool_expression  go to state 54
    assign           go to state 55
    expression       go to state 141
    simpleExp        go to state 57
    andExp           go to state 58
    bitRelExp        go to state 59
    relExp           go to state 60
    bitshiftExp      go to state 61
    sumExp           go to state 62
    mulExp           go to state 63
    unaryExp         go to state 64
    value            go to state 65
    arguments        go to state 186
    argument         go to state 143


State 177

   22 tail: . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   79 if_statement: IF LEFT_PAREN bool_expression RIGHT_PAREN . tail else_if else_part

    LEFT_CURLY_BRACKET  shift, and go to state 187

    tail  go to state 188


State 178

   23 tail_inloop: . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   80 while_statement: WHILE LEFT_PAREN bool_expression RIGHT_PAREN . tail_inloop

    LEFT_CURLY_BRACKET  shift, and go to state 95

    tail_inloop  go to state 189


State 179

   27 assign: IDENT . ASSIGN_OP expression

    ASSIGN_OP  shift, and go to state 155


State 180

   83 for_statement: FOR LEFT_PAREN optional_type assign . SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

    SEMICOLON  shift, and go to state 190


State 181

   23 tail_inloop: LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET .

    $default  reduce using rule 23 (tail_inloop)


State 182

   24 bool_expression: . relExp
   25                | . TRUE_TOKEN
   26                | . FALSE_TOKEN
   50 relExp: . relExp op bitshiftExp
   51       | . bitshiftExp
   52 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   53            | . bitshiftExp BIT_RSHIFT_OP sumExp
   54            | . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL
   84 do_statement: DO tail_inloop UNTIL LEFT_PAREN . bool_expression RIGHT_PAREN SEMICOLON

    IDENT           shift, and go to state 146
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    bool_expression  go to state 191
    relExp           go to state 148
    bitshiftExp      go to state 61
    sumExp           go to state 62
    mulExp           go to state 63
    unaryExp         go to state 64
    value            go to state 65


State 183

   85 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN . LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 192


State 184

  128 func_call: IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON .

    $default  reduce using rule 128 (func_call)


State 185

  131 arguments: arguments COMMA argument .

    $default  reduce using rule 131 (arguments)


State 186

  129 func_call: IDENT ASSIGN_OP IDENT LEFT_PAREN arguments . RIGHT_PAREN SEMICOLON
  131 arguments: arguments . COMMA argument

    RIGHT_PAREN  shift, and go to state 193
    COMMA        shift, and go to state 175


State 187

   16 beforedecl: . CONST
   17           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STR]
   18 declaration: . beforedecl type IDENT SEMICOLON
   19            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   20 declarations: . declaration
   21             | . declarations declaration
   22 tail: LEFT_CURLY_BRACKET . statements RIGHT_CURLY_BRACKET
   24 bool_expression: . relExp
   25                | . TRUE_TOKEN
   26                | . FALSE_TOKEN
   27 assign: . IDENT ASSIGN_OP expression
   28 expression: . assign
   29           | . IDENT INC_OP
   30           | . IDENT DEC_OP
   31           | . simpleExp
   32           | . IDENT
   33           | . bool_expression
   34 simpleExp: . simpleExp OR_OP andExp
   35          | . andExp
   36 andExp: . andExp AND_OP
   37       | . bitRelExp
   38 bitRelExp: . bitRelExp BIT_OR_OP relExp
   39          | . bitRelExp AND relExp
   40          | . bitRelExp BIT_XOR_OP relExp
   41          | . relExp
   50 relExp: . relExp op bitshiftExp
   51       | . bitshiftExp
   52 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   53            | . bitshiftExp BIT_RSHIFT_OP sumExp
   54            | . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL
   79 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   80 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   83 for_statement: . FOR LEFT_PAREN optional_type assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   84 do_statement: . DO tail_inloop UNTIL LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   85 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   93 return_statement: . RETURN return_val SEMICOLON
   94 break_statement: . BREAK SEMICOLON
   95 continue_statement: . CONTINUE SEMICOLON
   96 expression_statement: . expression SEMICOLON
   97 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STR, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   98           | . statement
   99           | . statements statement
  100 statement: . if_statement
  101          | . while_statement
  102          | . for_statement
  103          | . do_statement
  104          | . switch_statement
  105          | . return_statement
  106          | . expression_statement
  107          | . declarations
  108          | . enum_statement
  109          | . func_call
  110          | . break_statement
  111          | . continue_statement
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON
  128 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON
  129          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 33
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    IF              shift, and go to state 38
    WHILE           shift, and go to state 39
    FOR             shift, and go to state 40
    DO              shift, and go to state 41
    SWITCH          shift, and go to state 42
    RETURN          shift, and go to state 43
    BREAK           shift, and go to state 44
    CONTINUE        shift, and go to state 45
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    ENUM            shift, and go to state 2
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    INTEGER              reduce using rule 17 (beforedecl)
    INTEGER              [reduce using rule 97 (statements)]
    FLOAT                reduce using rule 17 (beforedecl)
    FLOAT                [reduce using rule 97 (statements)]
    DOUBLE               reduce using rule 17 (beforedecl)
    DOUBLE               [reduce using rule 97 (statements)]
    VOID                 reduce using rule 17 (beforedecl)
    VOID                 [reduce using rule 97 (statements)]
    BOOLEAN              reduce using rule 17 (beforedecl)
    BOOLEAN              [reduce using rule 97 (statements)]
    CHAR                 reduce using rule 17 (beforedecl)
    CHAR                 [reduce using rule 97 (statements)]
    CONST                [reduce using rule 97 (statements)]
    STR                  reduce using rule 17 (beforedecl)
    STR                  [reduce using rule 97 (statements)]
    IDENT                [reduce using rule 97 (statements)]
    CONST_INT            [reduce using rule 97 (statements)]
    CONST_FLOAT          [reduce using rule 97 (statements)]
    CONST_CHAR           [reduce using rule 97 (statements)]
    STRING_LITERAL       [reduce using rule 97 (statements)]
    IF                   [reduce using rule 97 (statements)]
    WHILE                [reduce using rule 97 (statements)]
    FOR                  [reduce using rule 97 (statements)]
    DO                   [reduce using rule 97 (statements)]
    SWITCH               [reduce using rule 97 (statements)]
    RETURN               [reduce using rule 97 (statements)]
    BREAK                [reduce using rule 97 (statements)]
    CONTINUE             [reduce using rule 97 (statements)]
    TRUE_TOKEN           [reduce using rule 97 (statements)]
    FALSE_TOKEN          [reduce using rule 97 (statements)]
    ENUM                 [reduce using rule 97 (statements)]
    LEFT_PAREN           [reduce using rule 97 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 97 (statements)
    INC_OP               [reduce using rule 97 (statements)]
    DEC_OP               [reduce using rule 97 (statements)]
    NOT_OP               [reduce using rule 97 (statements)]
    $default             reduce using rule 17 (beforedecl)

    beforedecl            go to state 7
    declaration           go to state 52
    declarations          go to state 53
    bool_expression       go to state 54
    assign                go to state 55
    expression            go to state 56
    simpleExp             go to state 57
    andExp                go to state 58
    bitRelExp             go to state 59
    relExp                go to state 60
    bitshiftExp           go to state 61
    sumExp                go to state 62
    mulExp                go to state 63
    unaryExp              go to state 64
    value                 go to state 65
    if_statement          go to state 66
    while_statement       go to state 67
    for_statement         go to state 68
    do_statement          go to state 69
    switch_statement      go to state 70
    return_statement      go to state 71
    break_statement       go to state 72
    continue_statement    go to state 73
    expression_statement  go to state 74
    statements            go to state 194
    statement             go to state 76
    enum_statement        go to state 77
    func_call             go to state 78


State 188

   74 else_if: . ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   75        | . else_if ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   76        | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STR, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, CASE, DEFAULT, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   79 if_statement: IF LEFT_PAREN bool_expression RIGHT_PAREN tail . else_if else_part

    ELIF  shift, and go to state 195

    ELIF      [reduce using rule 76 (else_if)]
    $default  reduce using rule 76 (else_if)

    else_if  go to state 196


State 189

   80 while_statement: WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop .

    $default  reduce using rule 80 (while_statement)


State 190

   24 bool_expression: . relExp
   25                | . TRUE_TOKEN
   26                | . FALSE_TOKEN
   50 relExp: . relExp op bitshiftExp
   51       | . bitshiftExp
   52 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   53            | . bitshiftExp BIT_RSHIFT_OP sumExp
   54            | . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL
   83 for_statement: FOR LEFT_PAREN optional_type assign SEMICOLON . bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

    IDENT           shift, and go to state 146
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    bool_expression  go to state 197
    relExp           go to state 148
    bitshiftExp      go to state 61
    sumExp           go to state 62
    mulExp           go to state 63
    unaryExp         go to state 64
    value            go to state 65


State 191

   84 do_statement: DO tail_inloop UNTIL LEFT_PAREN bool_expression . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN  shift, and go to state 198


State 192

   85 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET . cases RIGHT_CURLY_BRACKET
   86 cases: . case
   87      | . cases case
   88      | . cases default
   90 case: . CASE expression COLON statements BREAK SEMICOLON

    CASE  shift, and go to state 199

    cases  go to state 200
    case   go to state 201


State 193

  129 func_call: IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN . SEMICOLON

    SEMICOLON  shift, and go to state 202


State 194

   16 beforedecl: . CONST
   17           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STR]
   18 declaration: . beforedecl type IDENT SEMICOLON
   19            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   20 declarations: . declaration
   21             | . declarations declaration
   22 tail: LEFT_CURLY_BRACKET statements . RIGHT_CURLY_BRACKET
   24 bool_expression: . relExp
   25                | . TRUE_TOKEN
   26                | . FALSE_TOKEN
   27 assign: . IDENT ASSIGN_OP expression
   28 expression: . assign
   29           | . IDENT INC_OP
   30           | . IDENT DEC_OP
   31           | . simpleExp
   32           | . IDENT
   33           | . bool_expression
   34 simpleExp: . simpleExp OR_OP andExp
   35          | . andExp
   36 andExp: . andExp AND_OP
   37       | . bitRelExp
   38 bitRelExp: . bitRelExp BIT_OR_OP relExp
   39          | . bitRelExp AND relExp
   40          | . bitRelExp BIT_XOR_OP relExp
   41          | . relExp
   50 relExp: . relExp op bitshiftExp
   51       | . bitshiftExp
   52 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   53            | . bitshiftExp BIT_RSHIFT_OP sumExp
   54            | . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL
   79 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   80 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   83 for_statement: . FOR LEFT_PAREN optional_type assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   84 do_statement: . DO tail_inloop UNTIL LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   85 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   93 return_statement: . RETURN return_val SEMICOLON
   94 break_statement: . BREAK SEMICOLON
   95 continue_statement: . CONTINUE SEMICOLON
   96 expression_statement: . expression SEMICOLON
   99 statements: statements . statement
  100 statement: . if_statement
  101          | . while_statement
  102          | . for_statement
  103          | . do_statement
  104          | . switch_statement
  105          | . return_statement
  106          | . expression_statement
  107          | . declarations
  108          | . enum_statement
  109          | . func_call
  110          | . break_statement
  111          | . continue_statement
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON
  128 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON
  129          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON

    CONST                shift, and go to state 1
    IDENT                shift, and go to state 33
    CONST_INT            shift, and go to state 34
    CONST_FLOAT          shift, and go to state 35
    CONST_CHAR           shift, and go to state 36
    STRING_LITERAL       shift, and go to state 37
    IF                   shift, and go to state 38
    WHILE                shift, and go to state 39
    FOR                  shift, and go to state 40
    DO                   shift, and go to state 41
    SWITCH               shift, and go to state 42
    RETURN               shift, and go to state 43
    BREAK                shift, and go to state 44
    CONTINUE             shift, and go to state 45
    TRUE_TOKEN           shift, and go to state 46
    FALSE_TOKEN          shift, and go to state 47
    ENUM                 shift, and go to state 2
    LEFT_PAREN           shift, and go to state 48
    RIGHT_CURLY_BRACKET  shift, and go to state 203
    INC_OP               shift, and go to state 49
    DEC_OP               shift, and go to state 50
    NOT_OP               shift, and go to state 51

    $default  reduce using rule 17 (beforedecl)

    beforedecl            go to state 7
    declaration           go to state 52
    declarations          go to state 53
    bool_expression       go to state 54
    assign                go to state 55
    expression            go to state 56
    simpleExp             go to state 57
    andExp                go to state 58
    bitRelExp             go to state 59
    relExp                go to state 60
    bitshiftExp           go to state 61
    sumExp                go to state 62
    mulExp                go to state 63
    unaryExp              go to state 64
    value                 go to state 65
    if_statement          go to state 66
    while_statement       go to state 67
    for_statement         go to state 68
    do_statement          go to state 69
    switch_statement      go to state 70
    return_statement      go to state 71
    break_statement       go to state 72
    continue_statement    go to state 73
    expression_statement  go to state 74
    statement             go to state 133
    enum_statement        go to state 77
    func_call             go to state 78


State 195

   74 else_if: ELIF . LEFT_PAREN bool_expression RIGHT_PAREN tail

    LEFT_PAREN  shift, and go to state 204


State 196

   75 else_if: else_if . ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   77 else_part: . ELSE tail
   78          | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STR, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, CASE, DEFAULT, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   79 if_statement: IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if . else_part

    ELSE  shift, and go to state 205
    ELIF  shift, and go to state 206

    $default  reduce using rule 78 (else_part)

    else_part  go to state 207


State 197

   83 for_statement: FOR LEFT_PAREN optional_type assign SEMICOLON bool_expression . SEMICOLON expression RIGHT_PAREN tail_inloop

    SEMICOLON  shift, and go to state 208


State 198

   84 do_statement: DO tail_inloop UNTIL LEFT_PAREN bool_expression RIGHT_PAREN . SEMICOLON

    SEMICOLON  shift, and go to state 209


State 199

   24 bool_expression: . relExp
   25                | . TRUE_TOKEN
   26                | . FALSE_TOKEN
   27 assign: . IDENT ASSIGN_OP expression
   28 expression: . assign
   29           | . IDENT INC_OP
   30           | . IDENT DEC_OP
   31           | . simpleExp
   32           | . IDENT
   33           | . bool_expression
   34 simpleExp: . simpleExp OR_OP andExp
   35          | . andExp
   36 andExp: . andExp AND_OP
   37       | . bitRelExp
   38 bitRelExp: . bitRelExp BIT_OR_OP relExp
   39          | . bitRelExp AND relExp
   40          | . bitRelExp BIT_XOR_OP relExp
   41          | . relExp
   50 relExp: . relExp op bitshiftExp
   51       | . bitshiftExp
   52 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   53            | . bitshiftExp BIT_RSHIFT_OP sumExp
   54            | . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL
   90 case: CASE . expression COLON statements BREAK SEMICOLON

    IDENT           shift, and go to state 98
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    bool_expression  go to state 54
    assign           go to state 55
    expression       go to state 210
    simpleExp        go to state 57
    andExp           go to state 58
    bitRelExp        go to state 59
    relExp           go to state 60
    bitshiftExp      go to state 61
    sumExp           go to state 62
    mulExp           go to state 63
    unaryExp         go to state 64
    value            go to state 65


State 200

   85 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases . RIGHT_CURLY_BRACKET
   87 cases: cases . case
   88      | cases . default
   89 default: . DEFAULT COLON statements
   90 case: . CASE expression COLON statements BREAK SEMICOLON

    CASE                 shift, and go to state 199
    DEFAULT              shift, and go to state 211
    RIGHT_CURLY_BRACKET  shift, and go to state 212

    default  go to state 213
    case     go to state 214


State 201

   86 cases: case .

    $default  reduce using rule 86 (cases)


State 202

  129 func_call: IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON .

    $default  reduce using rule 129 (func_call)


State 203

   22 tail: LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET .

    $default  reduce using rule 22 (tail)


State 204

   24 bool_expression: . relExp
   25                | . TRUE_TOKEN
   26                | . FALSE_TOKEN
   50 relExp: . relExp op bitshiftExp
   51       | . bitshiftExp
   52 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   53            | . bitshiftExp BIT_RSHIFT_OP sumExp
   54            | . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL
   74 else_if: ELIF LEFT_PAREN . bool_expression RIGHT_PAREN tail

    IDENT           shift, and go to state 146
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    bool_expression  go to state 215
    relExp           go to state 148
    bitshiftExp      go to state 61
    sumExp           go to state 62
    mulExp           go to state 63
    unaryExp         go to state 64
    value            go to state 65


State 205

   22 tail: . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   77 else_part: ELSE . tail

    LEFT_CURLY_BRACKET  shift, and go to state 187

    tail  go to state 216


State 206

   75 else_if: else_if ELIF . LEFT_PAREN bool_expression RIGHT_PAREN tail

    LEFT_PAREN  shift, and go to state 217


State 207

   79 if_statement: IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part .

    $default  reduce using rule 79 (if_statement)


State 208

   24 bool_expression: . relExp
   25                | . TRUE_TOKEN
   26                | . FALSE_TOKEN
   27 assign: . IDENT ASSIGN_OP expression
   28 expression: . assign
   29           | . IDENT INC_OP
   30           | . IDENT DEC_OP
   31           | . simpleExp
   32           | . IDENT
   33           | . bool_expression
   34 simpleExp: . simpleExp OR_OP andExp
   35          | . andExp
   36 andExp: . andExp AND_OP
   37       | . bitRelExp
   38 bitRelExp: . bitRelExp BIT_OR_OP relExp
   39          | . bitRelExp AND relExp
   40          | . bitRelExp BIT_XOR_OP relExp
   41          | . relExp
   50 relExp: . relExp op bitshiftExp
   51       | . bitshiftExp
   52 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   53            | . bitshiftExp BIT_RSHIFT_OP sumExp
   54            | . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL
   83 for_statement: FOR LEFT_PAREN optional_type assign SEMICOLON bool_expression SEMICOLON . expression RIGHT_PAREN tail_inloop

    IDENT           shift, and go to state 98
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    bool_expression  go to state 54
    assign           go to state 55
    expression       go to state 218
    simpleExp        go to state 57
    andExp           go to state 58
    bitRelExp        go to state 59
    relExp           go to state 60
    bitshiftExp      go to state 61
    sumExp           go to state 62
    mulExp           go to state 63
    unaryExp         go to state 64
    value            go to state 65


State 209

   84 do_statement: DO tail_inloop UNTIL LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON .

    $default  reduce using rule 84 (do_statement)


State 210

   90 case: CASE expression . COLON statements BREAK SEMICOLON

    COLON  shift, and go to state 219


State 211

   89 default: DEFAULT . COLON statements

    COLON  shift, and go to state 220


State 212

   85 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .

    $default  reduce using rule 85 (switch_statement)


State 213

   88 cases: cases default .

    $default  reduce using rule 88 (cases)


State 214

   87 cases: cases case .

    $default  reduce using rule 87 (cases)


State 215

   74 else_if: ELIF LEFT_PAREN bool_expression . RIGHT_PAREN tail

    RIGHT_PAREN  shift, and go to state 221


State 216

   77 else_part: ELSE tail .

    $default  reduce using rule 77 (else_part)


State 217

   24 bool_expression: . relExp
   25                | . TRUE_TOKEN
   26                | . FALSE_TOKEN
   50 relExp: . relExp op bitshiftExp
   51       | . bitshiftExp
   52 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   53            | . bitshiftExp BIT_RSHIFT_OP sumExp
   54            | . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL
   75 else_if: else_if ELIF LEFT_PAREN . bool_expression RIGHT_PAREN tail

    IDENT           shift, and go to state 146
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    bool_expression  go to state 222
    relExp           go to state 148
    bitshiftExp      go to state 61
    sumExp           go to state 62
    mulExp           go to state 63
    unaryExp         go to state 64
    value            go to state 65


State 218

   83 for_statement: FOR LEFT_PAREN optional_type assign SEMICOLON bool_expression SEMICOLON expression . RIGHT_PAREN tail_inloop

    RIGHT_PAREN  shift, and go to state 223


State 219

   16 beforedecl: . CONST
   17           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STR]
   18 declaration: . beforedecl type IDENT SEMICOLON
   19            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   20 declarations: . declaration
   21             | . declarations declaration
   24 bool_expression: . relExp
   25                | . TRUE_TOKEN
   26                | . FALSE_TOKEN
   27 assign: . IDENT ASSIGN_OP expression
   28 expression: . assign
   29           | . IDENT INC_OP
   30           | . IDENT DEC_OP
   31           | . simpleExp
   32           | . IDENT
   33           | . bool_expression
   34 simpleExp: . simpleExp OR_OP andExp
   35          | . andExp
   36 andExp: . andExp AND_OP
   37       | . bitRelExp
   38 bitRelExp: . bitRelExp BIT_OR_OP relExp
   39          | . bitRelExp AND relExp
   40          | . bitRelExp BIT_XOR_OP relExp
   41          | . relExp
   50 relExp: . relExp op bitshiftExp
   51       | . bitshiftExp
   52 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   53            | . bitshiftExp BIT_RSHIFT_OP sumExp
   54            | . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL
   79 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   80 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   83 for_statement: . FOR LEFT_PAREN optional_type assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   84 do_statement: . DO tail_inloop UNTIL LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   85 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   90 case: CASE expression COLON . statements BREAK SEMICOLON
   93 return_statement: . RETURN return_val SEMICOLON
   94 break_statement: . BREAK SEMICOLON
   95 continue_statement: . CONTINUE SEMICOLON
   96 expression_statement: . expression SEMICOLON
   97 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STR, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, LEFT_PAREN, INC_OP, DEC_OP, NOT_OP]
   98           | . statement
   99           | . statements statement
  100 statement: . if_statement
  101          | . while_statement
  102          | . for_statement
  103          | . do_statement
  104          | . switch_statement
  105          | . return_statement
  106          | . expression_statement
  107          | . declarations
  108          | . enum_statement
  109          | . func_call
  110          | . break_statement
  111          | . continue_statement
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON
  128 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON
  129          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 33
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    IF              shift, and go to state 38
    WHILE           shift, and go to state 39
    FOR             shift, and go to state 40
    DO              shift, and go to state 41
    SWITCH          shift, and go to state 42
    RETURN          shift, and go to state 43
    BREAK           shift, and go to state 44
    CONTINUE        shift, and go to state 45
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    ENUM            shift, and go to state 2
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    INTEGER         reduce using rule 17 (beforedecl)
    INTEGER         [reduce using rule 97 (statements)]
    FLOAT           reduce using rule 17 (beforedecl)
    FLOAT           [reduce using rule 97 (statements)]
    DOUBLE          reduce using rule 17 (beforedecl)
    DOUBLE          [reduce using rule 97 (statements)]
    VOID            reduce using rule 17 (beforedecl)
    VOID            [reduce using rule 97 (statements)]
    BOOLEAN         reduce using rule 17 (beforedecl)
    BOOLEAN         [reduce using rule 97 (statements)]
    CHAR            reduce using rule 17 (beforedecl)
    CHAR            [reduce using rule 97 (statements)]
    CONST           [reduce using rule 97 (statements)]
    STR             reduce using rule 17 (beforedecl)
    STR             [reduce using rule 97 (statements)]
    IDENT           [reduce using rule 97 (statements)]
    CONST_INT       [reduce using rule 97 (statements)]
    CONST_FLOAT     [reduce using rule 97 (statements)]
    CONST_CHAR      [reduce using rule 97 (statements)]
    STRING_LITERAL  [reduce using rule 97 (statements)]
    IF              [reduce using rule 97 (statements)]
    WHILE           [reduce using rule 97 (statements)]
    FOR             [reduce using rule 97 (statements)]
    DO              [reduce using rule 97 (statements)]
    SWITCH          [reduce using rule 97 (statements)]
    RETURN          [reduce using rule 97 (statements)]
    BREAK           [reduce using rule 97 (statements)]
    CONTINUE        [reduce using rule 97 (statements)]
    TRUE_TOKEN      [reduce using rule 97 (statements)]
    FALSE_TOKEN     [reduce using rule 97 (statements)]
    ENUM            [reduce using rule 97 (statements)]
    LEFT_PAREN      [reduce using rule 97 (statements)]
    INC_OP          [reduce using rule 97 (statements)]
    DEC_OP          [reduce using rule 97 (statements)]
    NOT_OP          [reduce using rule 97 (statements)]
    $default        reduce using rule 17 (beforedecl)

    beforedecl            go to state 7
    declaration           go to state 52
    declarations          go to state 53
    bool_expression       go to state 54
    assign                go to state 55
    expression            go to state 56
    simpleExp             go to state 57
    andExp                go to state 58
    bitRelExp             go to state 59
    relExp                go to state 60
    bitshiftExp           go to state 61
    sumExp                go to state 62
    mulExp                go to state 63
    unaryExp              go to state 64
    value                 go to state 65
    if_statement          go to state 66
    while_statement       go to state 67
    for_statement         go to state 68
    do_statement          go to state 69
    switch_statement      go to state 70
    return_statement      go to state 71
    break_statement       go to state 72
    continue_statement    go to state 73
    expression_statement  go to state 74
    statements            go to state 224
    statement             go to state 76
    enum_statement        go to state 77
    func_call             go to state 78


State 220

   16 beforedecl: . CONST
   17           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STR]
   18 declaration: . beforedecl type IDENT SEMICOLON
   19            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   20 declarations: . declaration
   21             | . declarations declaration
   24 bool_expression: . relExp
   25                | . TRUE_TOKEN
   26                | . FALSE_TOKEN
   27 assign: . IDENT ASSIGN_OP expression
   28 expression: . assign
   29           | . IDENT INC_OP
   30           | . IDENT DEC_OP
   31           | . simpleExp
   32           | . IDENT
   33           | . bool_expression
   34 simpleExp: . simpleExp OR_OP andExp
   35          | . andExp
   36 andExp: . andExp AND_OP
   37       | . bitRelExp
   38 bitRelExp: . bitRelExp BIT_OR_OP relExp
   39          | . bitRelExp AND relExp
   40          | . bitRelExp BIT_XOR_OP relExp
   41          | . relExp
   50 relExp: . relExp op bitshiftExp
   51       | . bitshiftExp
   52 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   53            | . bitshiftExp BIT_RSHIFT_OP sumExp
   54            | . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL
   79 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   80 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   83 for_statement: . FOR LEFT_PAREN optional_type assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   84 do_statement: . DO tail_inloop UNTIL LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   85 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 default: DEFAULT COLON . statements
   93 return_statement: . RETURN return_val SEMICOLON
   94 break_statement: . BREAK SEMICOLON
   95 continue_statement: . CONTINUE SEMICOLON
   96 expression_statement: . expression SEMICOLON
   97 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STR, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, CASE, DEFAULT, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   98           | . statement
   99           | . statements statement
  100 statement: . if_statement
  101          | . while_statement
  102          | . for_statement
  103          | . do_statement
  104          | . switch_statement
  105          | . return_statement
  106          | . expression_statement
  107          | . declarations
  108          | . enum_statement
  109          | . func_call
  110          | . break_statement
  111          | . continue_statement
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON
  128 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON
  129          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 33
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    IF              shift, and go to state 38
    WHILE           shift, and go to state 39
    FOR             shift, and go to state 40
    DO              shift, and go to state 41
    SWITCH          shift, and go to state 42
    RETURN          shift, and go to state 43
    BREAK           shift, and go to state 44
    CONTINUE        shift, and go to state 45
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    ENUM            shift, and go to state 2
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    INTEGER              reduce using rule 17 (beforedecl)
    INTEGER              [reduce using rule 97 (statements)]
    FLOAT                reduce using rule 17 (beforedecl)
    FLOAT                [reduce using rule 97 (statements)]
    DOUBLE               reduce using rule 17 (beforedecl)
    DOUBLE               [reduce using rule 97 (statements)]
    VOID                 reduce using rule 17 (beforedecl)
    VOID                 [reduce using rule 97 (statements)]
    BOOLEAN              reduce using rule 17 (beforedecl)
    BOOLEAN              [reduce using rule 97 (statements)]
    CHAR                 reduce using rule 17 (beforedecl)
    CHAR                 [reduce using rule 97 (statements)]
    CONST                [reduce using rule 97 (statements)]
    STR                  reduce using rule 17 (beforedecl)
    STR                  [reduce using rule 97 (statements)]
    IDENT                [reduce using rule 97 (statements)]
    CONST_INT            [reduce using rule 97 (statements)]
    CONST_FLOAT          [reduce using rule 97 (statements)]
    CONST_CHAR           [reduce using rule 97 (statements)]
    STRING_LITERAL       [reduce using rule 97 (statements)]
    IF                   [reduce using rule 97 (statements)]
    WHILE                [reduce using rule 97 (statements)]
    FOR                  [reduce using rule 97 (statements)]
    DO                   [reduce using rule 97 (statements)]
    SWITCH               [reduce using rule 97 (statements)]
    CASE                 reduce using rule 97 (statements)
    DEFAULT              reduce using rule 97 (statements)
    RETURN               [reduce using rule 97 (statements)]
    BREAK                [reduce using rule 97 (statements)]
    CONTINUE             [reduce using rule 97 (statements)]
    TRUE_TOKEN           [reduce using rule 97 (statements)]
    FALSE_TOKEN          [reduce using rule 97 (statements)]
    ENUM                 [reduce using rule 97 (statements)]
    LEFT_PAREN           [reduce using rule 97 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 97 (statements)
    INC_OP               [reduce using rule 97 (statements)]
    DEC_OP               [reduce using rule 97 (statements)]
    NOT_OP               [reduce using rule 97 (statements)]
    $default             reduce using rule 17 (beforedecl)

    beforedecl            go to state 7
    declaration           go to state 52
    declarations          go to state 53
    bool_expression       go to state 54
    assign                go to state 55
    expression            go to state 56
    simpleExp             go to state 57
    andExp                go to state 58
    bitRelExp             go to state 59
    relExp                go to state 60
    bitshiftExp           go to state 61
    sumExp                go to state 62
    mulExp                go to state 63
    unaryExp              go to state 64
    value                 go to state 65
    if_statement          go to state 66
    while_statement       go to state 67
    for_statement         go to state 68
    do_statement          go to state 69
    switch_statement      go to state 70
    return_statement      go to state 71
    break_statement       go to state 72
    continue_statement    go to state 73
    expression_statement  go to state 74
    statements            go to state 225
    statement             go to state 76
    enum_statement        go to state 77
    func_call             go to state 78


State 221

   22 tail: . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   74 else_if: ELIF LEFT_PAREN bool_expression RIGHT_PAREN . tail

    LEFT_CURLY_BRACKET  shift, and go to state 187

    tail  go to state 226


State 222

   75 else_if: else_if ELIF LEFT_PAREN bool_expression . RIGHT_PAREN tail

    RIGHT_PAREN  shift, and go to state 227


State 223

   23 tail_inloop: . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   83 for_statement: FOR LEFT_PAREN optional_type assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN . tail_inloop

    LEFT_CURLY_BRACKET  shift, and go to state 95

    tail_inloop  go to state 228


State 224

   16 beforedecl: . CONST
   17           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STR]
   18 declaration: . beforedecl type IDENT SEMICOLON
   19            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   20 declarations: . declaration
   21             | . declarations declaration
   24 bool_expression: . relExp
   25                | . TRUE_TOKEN
   26                | . FALSE_TOKEN
   27 assign: . IDENT ASSIGN_OP expression
   28 expression: . assign
   29           | . IDENT INC_OP
   30           | . IDENT DEC_OP
   31           | . simpleExp
   32           | . IDENT
   33           | . bool_expression
   34 simpleExp: . simpleExp OR_OP andExp
   35          | . andExp
   36 andExp: . andExp AND_OP
   37       | . bitRelExp
   38 bitRelExp: . bitRelExp BIT_OR_OP relExp
   39          | . bitRelExp AND relExp
   40          | . bitRelExp BIT_XOR_OP relExp
   41          | . relExp
   50 relExp: . relExp op bitshiftExp
   51       | . bitshiftExp
   52 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   53            | . bitshiftExp BIT_RSHIFT_OP sumExp
   54            | . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL
   79 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   80 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   83 for_statement: . FOR LEFT_PAREN optional_type assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   84 do_statement: . DO tail_inloop UNTIL LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   85 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   90 case: CASE expression COLON statements . BREAK SEMICOLON
   93 return_statement: . RETURN return_val SEMICOLON
   94 break_statement: . BREAK SEMICOLON
   95 continue_statement: . CONTINUE SEMICOLON
   96 expression_statement: . expression SEMICOLON
   99 statements: statements . statement
  100 statement: . if_statement
  101          | . while_statement
  102          | . for_statement
  103          | . do_statement
  104          | . switch_statement
  105          | . return_statement
  106          | . expression_statement
  107          | . declarations
  108          | . enum_statement
  109          | . func_call
  110          | . break_statement
  111          | . continue_statement
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON
  128 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON
  129          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 33
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    IF              shift, and go to state 38
    WHILE           shift, and go to state 39
    FOR             shift, and go to state 40
    DO              shift, and go to state 41
    SWITCH          shift, and go to state 42
    RETURN          shift, and go to state 43
    BREAK           shift, and go to state 229
    CONTINUE        shift, and go to state 45
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    ENUM            shift, and go to state 2
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    $default  reduce using rule 17 (beforedecl)

    beforedecl            go to state 7
    declaration           go to state 52
    declarations          go to state 53
    bool_expression       go to state 54
    assign                go to state 55
    expression            go to state 56
    simpleExp             go to state 57
    andExp                go to state 58
    bitRelExp             go to state 59
    relExp                go to state 60
    bitshiftExp           go to state 61
    sumExp                go to state 62
    mulExp                go to state 63
    unaryExp              go to state 64
    value                 go to state 65
    if_statement          go to state 66
    while_statement       go to state 67
    for_statement         go to state 68
    do_statement          go to state 69
    switch_statement      go to state 70
    return_statement      go to state 71
    break_statement       go to state 72
    continue_statement    go to state 73
    expression_statement  go to state 74
    statement             go to state 133
    enum_statement        go to state 77
    func_call             go to state 78


State 225

   16 beforedecl: . CONST
   17           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STR]
   18 declaration: . beforedecl type IDENT SEMICOLON
   19            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   20 declarations: . declaration
   21             | . declarations declaration
   24 bool_expression: . relExp
   25                | . TRUE_TOKEN
   26                | . FALSE_TOKEN
   27 assign: . IDENT ASSIGN_OP expression
   28 expression: . assign
   29           | . IDENT INC_OP
   30           | . IDENT DEC_OP
   31           | . simpleExp
   32           | . IDENT
   33           | . bool_expression
   34 simpleExp: . simpleExp OR_OP andExp
   35          | . andExp
   36 andExp: . andExp AND_OP
   37       | . bitRelExp
   38 bitRelExp: . bitRelExp BIT_OR_OP relExp
   39          | . bitRelExp AND relExp
   40          | . bitRelExp BIT_XOR_OP relExp
   41          | . relExp
   50 relExp: . relExp op bitshiftExp
   51       | . bitshiftExp
   52 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   53            | . bitshiftExp BIT_RSHIFT_OP sumExp
   54            | . sumExp
   60 sumExp: . sumExp pls_min mulExp
   61       | . mulExp
   62 mulExp: . mulExp mul_div unaryExp
   63       | . unaryExp
   64 unaryExp: . INC_OP IDENT
   65         | . DEC_OP IDENT
   66         | . NOT_OP IDENT
   67         | . IDENT
   68         | . value
   69         | . LEFT_PAREN expression RIGHT_PAREN
   70 value: . CONST_INT
   71      | . CONST_FLOAT
   72      | . CONST_CHAR
   73      | . STRING_LITERAL
   79 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   80 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   83 for_statement: . FOR LEFT_PAREN optional_type assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   84 do_statement: . DO tail_inloop UNTIL LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   85 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 default: DEFAULT COLON statements .  [CASE, DEFAULT, RIGHT_CURLY_BRACKET]
   93 return_statement: . RETURN return_val SEMICOLON
   94 break_statement: . BREAK SEMICOLON
   95 continue_statement: . CONTINUE SEMICOLON
   96 expression_statement: . expression SEMICOLON
   99 statements: statements . statement
  100 statement: . if_statement
  101          | . while_statement
  102          | . for_statement
  103          | . do_statement
  104          | . switch_statement
  105          | . return_statement
  106          | . expression_statement
  107          | . declarations
  108          | . enum_statement
  109          | . func_call
  110          | . break_statement
  111          | . continue_statement
  123 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON
  128 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON
  129          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 33
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    IF              shift, and go to state 38
    WHILE           shift, and go to state 39
    FOR             shift, and go to state 40
    DO              shift, and go to state 41
    SWITCH          shift, and go to state 42
    RETURN          shift, and go to state 43
    BREAK           shift, and go to state 44
    CONTINUE        shift, and go to state 45
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    ENUM            shift, and go to state 2
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    CASE                 reduce using rule 89 (default)
    DEFAULT              reduce using rule 89 (default)
    RIGHT_CURLY_BRACKET  reduce using rule 89 (default)
    $default             reduce using rule 17 (beforedecl)

    beforedecl            go to state 7
    declaration           go to state 52
    declarations          go to state 53
    bool_expression       go to state 54
    assign                go to state 55
    expression            go to state 56
    simpleExp             go to state 57
    andExp                go to state 58
    bitRelExp             go to state 59
    relExp                go to state 60
    bitshiftExp           go to state 61
    sumExp                go to state 62
    mulExp                go to state 63
    unaryExp              go to state 64
    value                 go to state 65
    if_statement          go to state 66
    while_statement       go to state 67
    for_statement         go to state 68
    do_statement          go to state 69
    switch_statement      go to state 70
    return_statement      go to state 71
    break_statement       go to state 72
    continue_statement    go to state 73
    expression_statement  go to state 74
    statement             go to state 133
    enum_statement        go to state 77
    func_call             go to state 78


State 226

   74 else_if: ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail .

    $default  reduce using rule 74 (else_if)


State 227

   22 tail: . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   75 else_if: else_if ELIF LEFT_PAREN bool_expression RIGHT_PAREN . tail

    LEFT_CURLY_BRACKET  shift, and go to state 187

    tail  go to state 230


State 228

   83 for_statement: FOR LEFT_PAREN optional_type assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop .

    $default  reduce using rule 83 (for_statement)


State 229

   90 case: CASE expression COLON statements BREAK . SEMICOLON
   94 break_statement: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 231


State 230

   75 else_if: else_if ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail .

    $default  reduce using rule 75 (else_if)


State 231

   90 case: CASE expression COLON statements BREAK SEMICOLON .  [CASE, DEFAULT, RIGHT_CURLY_BRACKET]
   94 break_statement: BREAK SEMICOLON .  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STR, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, LEFT_PAREN, INC_OP, DEC_OP, NOT_OP]

    CASE                 reduce using rule 90 (case)
    DEFAULT              reduce using rule 90 (case)
    RIGHT_CURLY_BRACKET  reduce using rule 90 (case)
    $default             reduce using rule 94 (break_statement)
