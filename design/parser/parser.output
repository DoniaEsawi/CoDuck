Terminals unused in grammar

    CONST
    LEFT_SQ_BRACKET
    RIGHT_SQ_BRACKET
    QUESTION_MARK
    DOT
    BIT_NOT_OP
    BIT_RSHIFT_OPS


State 146 conflicts: 1 shift/reduce
State 147 conflicts: 1 shift/reduce
State 148 conflicts: 1 shift/reduce
State 149 conflicts: 1 shift/reduce
State 150 conflicts: 1 shift/reduce
State 151 conflicts: 1 shift/reduce
State 152 conflicts: 1 shift/reduce
State 153 conflicts: 1 shift/reduce
State 154 conflicts: 1 shift/reduce
State 155 conflicts: 18 shift/reduce
State 156 conflicts: 18 shift/reduce
State 157 conflicts: 18 shift/reduce


Grammar

    0 $accept: program $end

    1 program: declarations statements RETURN SEMICOLON functions_optional

    2 functions_optional: functions
    3                   | ε

    4 type: INTEGER
    5     | FLOAT
    6     | DOUBLE
    7     | VOID
    8     | BOOLEAN
    9     | CHAR
   10     | STR

   11 $@1: ε

   12 $@2: ε

   13 declaration: type $@1 names $@2 SEMICOLON

   14 names: names COMMA variable
   15      | names COMMA init
   16      | variable
   17      | init

   18 init: var_init

   19 var_init: IDENT ASSIGN_OP value

   20 variable: IDENT

   21 declarations: declarations declaration
   22             | declaration

   23 expression: expression ADD_OP expression
   24           | expression SUB_OP expression
   25           | expression MUL_OP expression
   26           | expression DIV_OP expression
   27           | expression MOD_OP expression
   28           | expression BIT_OR_OP expression
   29           | expression BIT_AND_OP expression
   30           | expression BIT_XOR_OP expression
   31           | expression BIT_LSHIFT_OP expression
   32           | expression BIT_RSHIFT_OP expression
   33           | expression bool_op expression
   34           | expression rel_op expression
   35           | LEFT_PAREN expression RIGHT_PAREN
   36           | unary_expression
   37           | func_call
   38           | variable
   39           | value

   40 unary_expression: INC_OP IDENT
   41                 | DEC_OP IDENT
   42                 | NOT_OP IDENT
   43                 | IDENT INC_OP
   44                 | IDENT DEC_OP

   45 rel_op: EQ_OP
   46       | NE_OP
   47       | GT_OP
   48       | LT_OP
   49       | LE_OP
   50       | GE_OP

   51 bool_op: OR_OP
   52        | AND_OP

   53 value: CONST_INT
   54      | CONST_FLOAT
   55      | CONST_CHAR
   56      | STRING_LITERAL
   57      | TRUE_TOKEN
   58      | FALSE_TOKEN

   59 tail: LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET

   60 else_if: ELIF LEFT_PAREN expression RIGHT_PAREN tail
   61        | else_if ELIF LEFT_PAREN expression RIGHT_PAREN tail

   62 else_part: ELSE tail
   63          | ε

   64 if_statement: IF LEFT_PAREN expression RIGHT_PAREN tail else_if else_part
   65             | IF LEFT_PAREN expression RIGHT_PAREN tail else_part

   66 while_statement: WHILE LEFT_PAREN expression RIGHT_PAREN tail

   67 optional_type: ε
   68              | type

   69 assignment: variable ASSIGN_OP expression

   70 for_statement: FOR LEFT_PAREN optional_type assignment SEMICOLON expression SEMICOLON expression RIGHT_PAREN tail

   71 do_statement: DO tail UNTIL LEFT_PAREN expression RIGHT_PAREN SEMICOLON

   72 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

   73 cases: cases case
   74      | case
   75      | cases default

   76 default: DEFAULT COLON statements

   77 case: CASE expression COLON statements

   78 break_statement: BREAK SEMICOLON

   79 continue_statement: CONTINUE SEMICOLON

   80 statements: statements statement
   81           | statement

   82 statement: if_statement
   83          | while_statement
   84          | for_statement
   85          | do_statement
   86          | switch_statement
   87          | enum_statement
   88          | func_call SEMICOLON
   89          | break_statement
   90          | continue_statement
   91          | assignment SEMICOLON
   92          | IDENT INC_OP SEMICOLON
   93          | IDENT DEC_OP SEMICOLON
   94          | INC_OP IDENT SEMICOLON
   95          | DEC_OP IDENT SEMICOLON

   96 functions: functions function
   97          | function

   98 $@3: ε

   99 function: $@3 function_head function_tail

  100 param_empty: parameters
  101            | ε

  102 function_head: FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN type

  103 function_tail: LEFT_CURLY_BRACKET declarations_statements_optional return_optional RIGHT_CURLY_BRACKET

  104 declarations_statements: declarations_statements statement
  105                        | declarations_statements declaration
  106                        | statement
  107                        | declaration

  108 declarations_statements_optional: declarations_statements
  109                                 | ε

  110 return_optional: RETURN return_val SEMICOLON
  111                | ε

  112 return_val: expression
  113           | ε

  114 parameters: parameters COMMA parameter
  115           | parameter

  116 $@4: ε

  117 parameter: $@4 type variable

  118 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON

  119 enum_list: one_val
  120          | enum_list COMMA one_val

  121 one_val: IDENT
  122        | var_init

  123 func_call: IDENT LEFT_PAREN arguments RIGHT_PAREN

  124 arguments: argument
  125          | ε

  126 argument: argument COMMA expression
  127         | expression


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INTEGER <val> (258) 4
    FLOAT <val> (259) 5
    DOUBLE <val> (260) 6
    VOID <val> (261) 7
    BOOLEAN <val> (262) 8
    CHAR <val> (263) 9
    CONST <val> (264)
    STR <val> (265) 10
    IDENT <symbol_table_item> (266) 19 20 40 41 42 43 44 92 93 94 95 102 118 121 123
    CONST_INT <val> (267) 53
    CONST_FLOAT <val> (268) 54
    CONST_CHAR <val> (269) 55
    STRING_LITERAL <val> (270) 56
    IF <val> (271) 64 65
    ELSE <val> (272) 62
    ELIF <val> (273) 60 61
    WHILE <val> (274) 66
    FOR <val> (275) 70
    DO <val> (276) 71
    SWITCH <val> (277) 72
    CASE <val> (278) 77
    DEFAULT <val> (279) 76
    RETURN <val> (280) 1 110
    BREAK <val> (281) 78
    CONTINUE <val> (282) 79
    TRUE_TOKEN <val> (283) 57
    FALSE_TOKEN <val> (284) 58
    ENUM <val> (285) 118
    FUNC <val> (286) 102
    UNTIL <val> (287) 71
    LEFT_PAREN <val> (288) 35 60 61 64 65 66 70 71 72 102 123
    RIGHT_PAREN <val> (289) 35 60 61 64 65 66 70 71 72 102 123
    LEFT_CURLY_BRACKET <val> (290) 59 72 103 118
    RIGHT_CURLY_BRACKET <val> (291) 59 72 103 118
    LEFT_SQ_BRACKET <val> (292)
    RIGHT_SQ_BRACKET <val> (293)
    SEMICOLON <val> (294) 1 13 70 71 78 79 88 91 92 93 94 95 110 118
    COMMA <val> (295) 14 15 114 120 126
    COLON <val> (296) 76 77
    QUESTION_MARK <val> (297)
    DOT <val> (298)
    ADD_OP <val> (299) 23
    SUB_OP <val> (300) 24
    MUL_OP <val> (301) 25
    DIV_OP <val> (302) 26
    MOD_OP <val> (303) 27
    INC_OP <val> (304) 40 43 92 94
    DEC_OP <val> (305) 41 44 93 95
    OR_OP <val> (306) 51
    AND_OP <val> (307) 52
    NOT_OP <val> (308) 42
    BIT_OR_OP <val> (309) 28
    BIT_AND_OP <val> (310) 29
    BIT_XOR_OP <val> (311) 30
    BIT_NOT_OP <val> (312)
    BIT_LSHIFT_OP <val> (313) 31
    BIT_RSHIFT_OP <val> (314) 32
    EQ_OP <val> (315) 45
    NE_OP <val> (316) 46
    GT_OP <val> (317) 47
    LT_OP <val> (318) 48
    GE_OP <val> (319) 50
    LE_OP <val> (320) 49
    ASSIGN_OP <val> (321) 19 69
    BIT_RSHIFT_OPS (322)


Nonterminals, with rules where they appear

    $accept (68)
        on left: 0
    program <node> (69)
        on left: 1
        on right: 0
    functions_optional (70)
        on left: 2 3
        on right: 1
    type <data_type> (71)
        on left: 4 5 6 7 8 9 10
        on right: 13 68 102 117
    declaration <node> (72)
        on left: 13
        on right: 21 22 105 107
    $@1 (73)
        on left: 11
        on right: 13
    $@2 (74)
        on left: 12
        on right: 13
    names (75)
        on left: 14 15 16 17
        on right: 13 14 15
    init <symbol_table_item> (76)
        on left: 18
        on right: 15 17
    var_init <symbol_table_item> (77)
        on left: 19
        on right: 18 122
    variable <symbol_table_item> (78)
        on left: 20
        on right: 14 16 38 69 117
    declarations <node> (79)
        on left: 21 22
        on right: 1 21
    expression (80)
        on left: 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39
        on right: 23 24 25 26 27 28 29 30 31 32 33 34 35 60 61 64 65 66 69 70 71 72 77 112 126 127
    unary_expression (81)
        on left: 40 41 42 43 44
        on right: 36
    rel_op (82)
        on left: 45 46 47 48 49 50
        on right: 34
    bool_op (83)
        on left: 51 52
        on right: 33
    value <node> (84)
        on left: 53 54 55 56 57 58
        on right: 19 39
    tail (85)
        on left: 59
        on right: 60 61 62 64 65 66 70 71
    else_if (86)
        on left: 60 61
        on right: 61 64
    else_part (87)
        on left: 62 63
        on right: 64 65
    if_statement (88)
        on left: 64 65
        on right: 82
    while_statement (89)
        on left: 66
        on right: 83
    optional_type (90)
        on left: 67 68
        on right: 70
    assignment (91)
        on left: 69
        on right: 70 91
    for_statement (92)
        on left: 70
        on right: 84
    do_statement (93)
        on left: 71
        on right: 85
    switch_statement (94)
        on left: 72
        on right: 86
    cases (95)
        on left: 73 74 75
        on right: 72 73 75
    default (96)
        on left: 76
        on right: 75
    case (97)
        on left: 77
        on right: 73 74
    break_statement (98)
        on left: 78
        on right: 89
    continue_statement (99)
        on left: 79
        on right: 90
    statements (100)
        on left: 80 81
        on right: 1 59 76 77 80
    statement (101)
        on left: 82 83 84 85 86 87 88 89 90 91 92 93 94 95
        on right: 80 81 104 106
    functions (102)
        on left: 96 97
        on right: 2 96
    function (103)
        on left: 99
        on right: 96 97
    $@3 (104)
        on left: 98
        on right: 99
    param_empty (105)
        on left: 100 101
        on right: 102
    function_head (106)
        on left: 102
        on right: 99
    function_tail (107)
        on left: 103
        on right: 99
    declarations_statements (108)
        on left: 104 105 106 107
        on right: 104 105 108
    declarations_statements_optional (109)
        on left: 108 109
        on right: 103
    return_optional (110)
        on left: 110 111
        on right: 103
    return_val (111)
        on left: 112 113
        on right: 110
    parameters (112)
        on left: 114 115
        on right: 100 114
    parameter (113)
        on left: 117
        on right: 114 115
    $@4 (114)
        on left: 116
        on right: 117
    enum_statement (115)
        on left: 118
        on right: 87
    enum_list (116)
        on left: 119 120
        on right: 118 120
    one_val (117)
        on left: 121 122
        on right: 119 120
    func_call (118)
        on left: 123
        on right: 37 88
    arguments (119)
        on left: 124 125
        on right: 123
    argument (120)
        on left: 126 127
        on right: 124 126


State 0

    0 $accept: • program $end

    INTEGER  shift, and go to state 1
    FLOAT    shift, and go to state 2
    DOUBLE   shift, and go to state 3
    VOID     shift, and go to state 4
    BOOLEAN  shift, and go to state 5
    CHAR     shift, and go to state 6
    STR      shift, and go to state 7

    program       go to state 8
    type          go to state 9
    declaration   go to state 10
    declarations  go to state 11


State 1

    4 type: INTEGER •

    $default  reduce using rule 4 (type)


State 2

    5 type: FLOAT •

    $default  reduce using rule 5 (type)


State 3

    6 type: DOUBLE •

    $default  reduce using rule 6 (type)


State 4

    7 type: VOID •

    $default  reduce using rule 7 (type)


State 5

    8 type: BOOLEAN •

    $default  reduce using rule 8 (type)


State 6

    9 type: CHAR •

    $default  reduce using rule 9 (type)


State 7

   10 type: STR •

    $default  reduce using rule 10 (type)


State 8

    0 $accept: program • $end

    $end  shift, and go to state 12


State 9

   13 declaration: type • $@1 names $@2 SEMICOLON

    $default  reduce using rule 11 ($@1)

    $@1  go to state 13


State 10

   22 declarations: declaration •

    $default  reduce using rule 22 (declarations)


State 11

    1 program: declarations • statements RETURN SEMICOLON functions_optional
   21 declarations: declarations • declaration

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    DOUBLE    shift, and go to state 3
    VOID      shift, and go to state 4
    BOOLEAN   shift, and go to state 5
    CHAR      shift, and go to state 6
    STR       shift, and go to state 7
    IDENT     shift, and go to state 14
    IF        shift, and go to state 15
    WHILE     shift, and go to state 16
    FOR       shift, and go to state 17
    DO        shift, and go to state 18
    SWITCH    shift, and go to state 19
    BREAK     shift, and go to state 20
    CONTINUE  shift, and go to state 21
    ENUM      shift, and go to state 22
    INC_OP    shift, and go to state 23
    DEC_OP    shift, and go to state 24

    type                go to state 9
    declaration         go to state 25
    variable            go to state 26
    if_statement        go to state 27
    while_statement     go to state 28
    assignment          go to state 29
    for_statement       go to state 30
    do_statement        go to state 31
    switch_statement    go to state 32
    break_statement     go to state 33
    continue_statement  go to state 34
    statements          go to state 35
    statement           go to state 36
    enum_statement      go to state 37
    func_call           go to state 38


State 12

    0 $accept: program $end •

    $default  accept


State 13

   13 declaration: type $@1 • names $@2 SEMICOLON

    IDENT  shift, and go to state 39

    names     go to state 40
    init      go to state 41
    var_init  go to state 42
    variable  go to state 43


State 14

   20 variable: IDENT •
   92 statement: IDENT • INC_OP SEMICOLON
   93          | IDENT • DEC_OP SEMICOLON
  123 func_call: IDENT • LEFT_PAREN arguments RIGHT_PAREN

    LEFT_PAREN  shift, and go to state 44
    INC_OP      shift, and go to state 45
    DEC_OP      shift, and go to state 46

    $default  reduce using rule 20 (variable)


State 15

   64 if_statement: IF • LEFT_PAREN expression RIGHT_PAREN tail else_if else_part
   65             | IF • LEFT_PAREN expression RIGHT_PAREN tail else_part

    LEFT_PAREN  shift, and go to state 47


State 16

   66 while_statement: WHILE • LEFT_PAREN expression RIGHT_PAREN tail

    LEFT_PAREN  shift, and go to state 48


State 17

   70 for_statement: FOR • LEFT_PAREN optional_type assignment SEMICOLON expression SEMICOLON expression RIGHT_PAREN tail

    LEFT_PAREN  shift, and go to state 49


State 18

   71 do_statement: DO • tail UNTIL LEFT_PAREN expression RIGHT_PAREN SEMICOLON

    LEFT_CURLY_BRACKET  shift, and go to state 50

    tail  go to state 51


State 19

   72 switch_statement: SWITCH • LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    LEFT_PAREN  shift, and go to state 52


State 20

   78 break_statement: BREAK • SEMICOLON

    SEMICOLON  shift, and go to state 53


State 21

   79 continue_statement: CONTINUE • SEMICOLON

    SEMICOLON  shift, and go to state 54


State 22

  118 enum_statement: ENUM • IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON

    IDENT  shift, and go to state 55


State 23

   94 statement: INC_OP • IDENT SEMICOLON

    IDENT  shift, and go to state 56


State 24

   95 statement: DEC_OP • IDENT SEMICOLON

    IDENT  shift, and go to state 57


State 25

   21 declarations: declarations declaration •

    $default  reduce using rule 21 (declarations)


State 26

   69 assignment: variable • ASSIGN_OP expression

    ASSIGN_OP  shift, and go to state 58


State 27

   82 statement: if_statement •

    $default  reduce using rule 82 (statement)


State 28

   83 statement: while_statement •

    $default  reduce using rule 83 (statement)


State 29

   91 statement: assignment • SEMICOLON

    SEMICOLON  shift, and go to state 59


State 30

   84 statement: for_statement •

    $default  reduce using rule 84 (statement)


State 31

   85 statement: do_statement •

    $default  reduce using rule 85 (statement)


State 32

   86 statement: switch_statement •

    $default  reduce using rule 86 (statement)


State 33

   89 statement: break_statement •

    $default  reduce using rule 89 (statement)


State 34

   90 statement: continue_statement •

    $default  reduce using rule 90 (statement)


State 35

    1 program: declarations statements • RETURN SEMICOLON functions_optional
   80 statements: statements • statement

    IDENT     shift, and go to state 14
    IF        shift, and go to state 15
    WHILE     shift, and go to state 16
    FOR       shift, and go to state 17
    DO        shift, and go to state 18
    SWITCH    shift, and go to state 19
    RETURN    shift, and go to state 60
    BREAK     shift, and go to state 20
    CONTINUE  shift, and go to state 21
    ENUM      shift, and go to state 22
    INC_OP    shift, and go to state 23
    DEC_OP    shift, and go to state 24

    variable            go to state 26
    if_statement        go to state 27
    while_statement     go to state 28
    assignment          go to state 29
    for_statement       go to state 30
    do_statement        go to state 31
    switch_statement    go to state 32
    break_statement     go to state 33
    continue_statement  go to state 34
    statement           go to state 61
    enum_statement      go to state 37
    func_call           go to state 38


State 36

   81 statements: statement •

    $default  reduce using rule 81 (statements)


State 37

   87 statement: enum_statement •

    $default  reduce using rule 87 (statement)


State 38

   88 statement: func_call • SEMICOLON

    SEMICOLON  shift, and go to state 62


State 39

   19 var_init: IDENT • ASSIGN_OP value
   20 variable: IDENT •

    ASSIGN_OP  shift, and go to state 63

    $default  reduce using rule 20 (variable)


State 40

   13 declaration: type $@1 names • $@2 SEMICOLON
   14 names: names • COMMA variable
   15      | names • COMMA init

    COMMA  shift, and go to state 64

    $default  reduce using rule 12 ($@2)

    $@2  go to state 65


State 41

   17 names: init •

    $default  reduce using rule 17 (names)


State 42

   18 init: var_init •

    $default  reduce using rule 18 (init)


State 43

   16 names: variable •

    $default  reduce using rule 16 (names)


State 44

  123 func_call: IDENT LEFT_PAREN • arguments RIGHT_PAREN

    IDENT           shift, and go to state 66
    CONST_INT       shift, and go to state 67
    CONST_FLOAT     shift, and go to state 68
    CONST_CHAR      shift, and go to state 69
    STRING_LITERAL  shift, and go to state 70
    TRUE_TOKEN      shift, and go to state 71
    FALSE_TOKEN     shift, and go to state 72
    LEFT_PAREN      shift, and go to state 73
    INC_OP          shift, and go to state 74
    DEC_OP          shift, and go to state 75
    NOT_OP          shift, and go to state 76

    $default  reduce using rule 125 (arguments)

    variable          go to state 77
    expression        go to state 78
    unary_expression  go to state 79
    value             go to state 80
    func_call         go to state 81
    arguments         go to state 82
    argument          go to state 83


State 45

   92 statement: IDENT INC_OP • SEMICOLON

    SEMICOLON  shift, and go to state 84


State 46

   93 statement: IDENT DEC_OP • SEMICOLON

    SEMICOLON  shift, and go to state 85


State 47

   64 if_statement: IF LEFT_PAREN • expression RIGHT_PAREN tail else_if else_part
   65             | IF LEFT_PAREN • expression RIGHT_PAREN tail else_part

    IDENT           shift, and go to state 66
    CONST_INT       shift, and go to state 67
    CONST_FLOAT     shift, and go to state 68
    CONST_CHAR      shift, and go to state 69
    STRING_LITERAL  shift, and go to state 70
    TRUE_TOKEN      shift, and go to state 71
    FALSE_TOKEN     shift, and go to state 72
    LEFT_PAREN      shift, and go to state 73
    INC_OP          shift, and go to state 74
    DEC_OP          shift, and go to state 75
    NOT_OP          shift, and go to state 76

    variable          go to state 77
    expression        go to state 86
    unary_expression  go to state 79
    value             go to state 80
    func_call         go to state 81


State 48

   66 while_statement: WHILE LEFT_PAREN • expression RIGHT_PAREN tail

    IDENT           shift, and go to state 66
    CONST_INT       shift, and go to state 67
    CONST_FLOAT     shift, and go to state 68
    CONST_CHAR      shift, and go to state 69
    STRING_LITERAL  shift, and go to state 70
    TRUE_TOKEN      shift, and go to state 71
    FALSE_TOKEN     shift, and go to state 72
    LEFT_PAREN      shift, and go to state 73
    INC_OP          shift, and go to state 74
    DEC_OP          shift, and go to state 75
    NOT_OP          shift, and go to state 76

    variable          go to state 77
    expression        go to state 87
    unary_expression  go to state 79
    value             go to state 80
    func_call         go to state 81


State 49

   70 for_statement: FOR LEFT_PAREN • optional_type assignment SEMICOLON expression SEMICOLON expression RIGHT_PAREN tail

    INTEGER  shift, and go to state 1
    FLOAT    shift, and go to state 2
    DOUBLE   shift, and go to state 3
    VOID     shift, and go to state 4
    BOOLEAN  shift, and go to state 5
    CHAR     shift, and go to state 6
    STR      shift, and go to state 7

    $default  reduce using rule 67 (optional_type)

    type           go to state 88
    optional_type  go to state 89


State 50

   59 tail: LEFT_CURLY_BRACKET • statements RIGHT_CURLY_BRACKET

    IDENT     shift, and go to state 14
    IF        shift, and go to state 15
    WHILE     shift, and go to state 16
    FOR       shift, and go to state 17
    DO        shift, and go to state 18
    SWITCH    shift, and go to state 19
    BREAK     shift, and go to state 20
    CONTINUE  shift, and go to state 21
    ENUM      shift, and go to state 22
    INC_OP    shift, and go to state 23
    DEC_OP    shift, and go to state 24

    variable            go to state 26
    if_statement        go to state 27
    while_statement     go to state 28
    assignment          go to state 29
    for_statement       go to state 30
    do_statement        go to state 31
    switch_statement    go to state 32
    break_statement     go to state 33
    continue_statement  go to state 34
    statements          go to state 90
    statement           go to state 36
    enum_statement      go to state 37
    func_call           go to state 38


State 51

   71 do_statement: DO tail • UNTIL LEFT_PAREN expression RIGHT_PAREN SEMICOLON

    UNTIL  shift, and go to state 91


State 52

   72 switch_statement: SWITCH LEFT_PAREN • expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    IDENT           shift, and go to state 66
    CONST_INT       shift, and go to state 67
    CONST_FLOAT     shift, and go to state 68
    CONST_CHAR      shift, and go to state 69
    STRING_LITERAL  shift, and go to state 70
    TRUE_TOKEN      shift, and go to state 71
    FALSE_TOKEN     shift, and go to state 72
    LEFT_PAREN      shift, and go to state 73
    INC_OP          shift, and go to state 74
    DEC_OP          shift, and go to state 75
    NOT_OP          shift, and go to state 76

    variable          go to state 77
    expression        go to state 92
    unary_expression  go to state 79
    value             go to state 80
    func_call         go to state 81


State 53

   78 break_statement: BREAK SEMICOLON •

    $default  reduce using rule 78 (break_statement)


State 54

   79 continue_statement: CONTINUE SEMICOLON •

    $default  reduce using rule 79 (continue_statement)


State 55

  118 enum_statement: ENUM IDENT • LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON

    LEFT_CURLY_BRACKET  shift, and go to state 93


State 56

   94 statement: INC_OP IDENT • SEMICOLON

    SEMICOLON  shift, and go to state 94


State 57

   95 statement: DEC_OP IDENT • SEMICOLON

    SEMICOLON  shift, and go to state 95


State 58

   69 assignment: variable ASSIGN_OP • expression

    IDENT           shift, and go to state 66
    CONST_INT       shift, and go to state 67
    CONST_FLOAT     shift, and go to state 68
    CONST_CHAR      shift, and go to state 69
    STRING_LITERAL  shift, and go to state 70
    TRUE_TOKEN      shift, and go to state 71
    FALSE_TOKEN     shift, and go to state 72
    LEFT_PAREN      shift, and go to state 73
    INC_OP          shift, and go to state 74
    DEC_OP          shift, and go to state 75
    NOT_OP          shift, and go to state 76

    variable          go to state 77
    expression        go to state 96
    unary_expression  go to state 79
    value             go to state 80
    func_call         go to state 81


State 59

   91 statement: assignment SEMICOLON •

    $default  reduce using rule 91 (statement)


State 60

    1 program: declarations statements RETURN • SEMICOLON functions_optional

    SEMICOLON  shift, and go to state 97


State 61

   80 statements: statements statement •

    $default  reduce using rule 80 (statements)


State 62

   88 statement: func_call SEMICOLON •

    $default  reduce using rule 88 (statement)


State 63

   19 var_init: IDENT ASSIGN_OP • value

    CONST_INT       shift, and go to state 67
    CONST_FLOAT     shift, and go to state 68
    CONST_CHAR      shift, and go to state 69
    STRING_LITERAL  shift, and go to state 70
    TRUE_TOKEN      shift, and go to state 71
    FALSE_TOKEN     shift, and go to state 72

    value  go to state 98


State 64

   14 names: names COMMA • variable
   15      | names COMMA • init

    IDENT  shift, and go to state 39

    init      go to state 99
    var_init  go to state 42
    variable  go to state 100


State 65

   13 declaration: type $@1 names $@2 • SEMICOLON

    SEMICOLON  shift, and go to state 101


State 66

   20 variable: IDENT •
   43 unary_expression: IDENT • INC_OP
   44                 | IDENT • DEC_OP
  123 func_call: IDENT • LEFT_PAREN arguments RIGHT_PAREN

    LEFT_PAREN  shift, and go to state 44
    INC_OP      shift, and go to state 102
    DEC_OP      shift, and go to state 103

    $default  reduce using rule 20 (variable)


State 67

   53 value: CONST_INT •

    $default  reduce using rule 53 (value)


State 68

   54 value: CONST_FLOAT •

    $default  reduce using rule 54 (value)


State 69

   55 value: CONST_CHAR •

    $default  reduce using rule 55 (value)


State 70

   56 value: STRING_LITERAL •

    $default  reduce using rule 56 (value)


State 71

   57 value: TRUE_TOKEN •

    $default  reduce using rule 57 (value)


State 72

   58 value: FALSE_TOKEN •

    $default  reduce using rule 58 (value)


State 73

   35 expression: LEFT_PAREN • expression RIGHT_PAREN

    IDENT           shift, and go to state 66
    CONST_INT       shift, and go to state 67
    CONST_FLOAT     shift, and go to state 68
    CONST_CHAR      shift, and go to state 69
    STRING_LITERAL  shift, and go to state 70
    TRUE_TOKEN      shift, and go to state 71
    FALSE_TOKEN     shift, and go to state 72
    LEFT_PAREN      shift, and go to state 73
    INC_OP          shift, and go to state 74
    DEC_OP          shift, and go to state 75
    NOT_OP          shift, and go to state 76

    variable          go to state 77
    expression        go to state 104
    unary_expression  go to state 79
    value             go to state 80
    func_call         go to state 81


State 74

   40 unary_expression: INC_OP • IDENT

    IDENT  shift, and go to state 105


State 75

   41 unary_expression: DEC_OP • IDENT

    IDENT  shift, and go to state 106


State 76

   42 unary_expression: NOT_OP • IDENT

    IDENT  shift, and go to state 107


State 77

   38 expression: variable •

    $default  reduce using rule 38 (expression)


State 78

   23 expression: expression • ADD_OP expression
   24           | expression • SUB_OP expression
   25           | expression • MUL_OP expression
   26           | expression • DIV_OP expression
   27           | expression • MOD_OP expression
   28           | expression • BIT_OR_OP expression
   29           | expression • BIT_AND_OP expression
   30           | expression • BIT_XOR_OP expression
   31           | expression • BIT_LSHIFT_OP expression
   32           | expression • BIT_RSHIFT_OP expression
   33           | expression • bool_op expression
   34           | expression • rel_op expression
  127 argument: expression •

    ADD_OP         shift, and go to state 108
    SUB_OP         shift, and go to state 109
    MUL_OP         shift, and go to state 110
    DIV_OP         shift, and go to state 111
    MOD_OP         shift, and go to state 112
    OR_OP          shift, and go to state 113
    AND_OP         shift, and go to state 114
    BIT_OR_OP      shift, and go to state 115
    BIT_AND_OP     shift, and go to state 116
    BIT_XOR_OP     shift, and go to state 117
    BIT_LSHIFT_OP  shift, and go to state 118
    BIT_RSHIFT_OP  shift, and go to state 119
    EQ_OP          shift, and go to state 120
    NE_OP          shift, and go to state 121
    GT_OP          shift, and go to state 122
    LT_OP          shift, and go to state 123
    GE_OP          shift, and go to state 124
    LE_OP          shift, and go to state 125

    $default  reduce using rule 127 (argument)

    rel_op   go to state 126
    bool_op  go to state 127


State 79

   36 expression: unary_expression •

    $default  reduce using rule 36 (expression)


State 80

   39 expression: value •

    $default  reduce using rule 39 (expression)


State 81

   37 expression: func_call •

    $default  reduce using rule 37 (expression)


State 82

  123 func_call: IDENT LEFT_PAREN arguments • RIGHT_PAREN

    RIGHT_PAREN  shift, and go to state 128


State 83

  124 arguments: argument •
  126 argument: argument • COMMA expression

    COMMA  shift, and go to state 129

    $default  reduce using rule 124 (arguments)


State 84

   92 statement: IDENT INC_OP SEMICOLON •

    $default  reduce using rule 92 (statement)


State 85

   93 statement: IDENT DEC_OP SEMICOLON •

    $default  reduce using rule 93 (statement)


State 86

   23 expression: expression • ADD_OP expression
   24           | expression • SUB_OP expression
   25           | expression • MUL_OP expression
   26           | expression • DIV_OP expression
   27           | expression • MOD_OP expression
   28           | expression • BIT_OR_OP expression
   29           | expression • BIT_AND_OP expression
   30           | expression • BIT_XOR_OP expression
   31           | expression • BIT_LSHIFT_OP expression
   32           | expression • BIT_RSHIFT_OP expression
   33           | expression • bool_op expression
   34           | expression • rel_op expression
   64 if_statement: IF LEFT_PAREN expression • RIGHT_PAREN tail else_if else_part
   65             | IF LEFT_PAREN expression • RIGHT_PAREN tail else_part

    RIGHT_PAREN    shift, and go to state 130
    ADD_OP         shift, and go to state 108
    SUB_OP         shift, and go to state 109
    MUL_OP         shift, and go to state 110
    DIV_OP         shift, and go to state 111
    MOD_OP         shift, and go to state 112
    OR_OP          shift, and go to state 113
    AND_OP         shift, and go to state 114
    BIT_OR_OP      shift, and go to state 115
    BIT_AND_OP     shift, and go to state 116
    BIT_XOR_OP     shift, and go to state 117
    BIT_LSHIFT_OP  shift, and go to state 118
    BIT_RSHIFT_OP  shift, and go to state 119
    EQ_OP          shift, and go to state 120
    NE_OP          shift, and go to state 121
    GT_OP          shift, and go to state 122
    LT_OP          shift, and go to state 123
    GE_OP          shift, and go to state 124
    LE_OP          shift, and go to state 125

    rel_op   go to state 126
    bool_op  go to state 127


State 87

   23 expression: expression • ADD_OP expression
   24           | expression • SUB_OP expression
   25           | expression • MUL_OP expression
   26           | expression • DIV_OP expression
   27           | expression • MOD_OP expression
   28           | expression • BIT_OR_OP expression
   29           | expression • BIT_AND_OP expression
   30           | expression • BIT_XOR_OP expression
   31           | expression • BIT_LSHIFT_OP expression
   32           | expression • BIT_RSHIFT_OP expression
   33           | expression • bool_op expression
   34           | expression • rel_op expression
   66 while_statement: WHILE LEFT_PAREN expression • RIGHT_PAREN tail

    RIGHT_PAREN    shift, and go to state 131
    ADD_OP         shift, and go to state 108
    SUB_OP         shift, and go to state 109
    MUL_OP         shift, and go to state 110
    DIV_OP         shift, and go to state 111
    MOD_OP         shift, and go to state 112
    OR_OP          shift, and go to state 113
    AND_OP         shift, and go to state 114
    BIT_OR_OP      shift, and go to state 115
    BIT_AND_OP     shift, and go to state 116
    BIT_XOR_OP     shift, and go to state 117
    BIT_LSHIFT_OP  shift, and go to state 118
    BIT_RSHIFT_OP  shift, and go to state 119
    EQ_OP          shift, and go to state 120
    NE_OP          shift, and go to state 121
    GT_OP          shift, and go to state 122
    LT_OP          shift, and go to state 123
    GE_OP          shift, and go to state 124
    LE_OP          shift, and go to state 125

    rel_op   go to state 126
    bool_op  go to state 127


State 88

   68 optional_type: type •

    $default  reduce using rule 68 (optional_type)


State 89

   70 for_statement: FOR LEFT_PAREN optional_type • assignment SEMICOLON expression SEMICOLON expression RIGHT_PAREN tail

    IDENT  shift, and go to state 132

    variable    go to state 26
    assignment  go to state 133


State 90

   59 tail: LEFT_CURLY_BRACKET statements • RIGHT_CURLY_BRACKET
   80 statements: statements • statement

    IDENT                shift, and go to state 14
    IF                   shift, and go to state 15
    WHILE                shift, and go to state 16
    FOR                  shift, and go to state 17
    DO                   shift, and go to state 18
    SWITCH               shift, and go to state 19
    BREAK                shift, and go to state 20
    CONTINUE             shift, and go to state 21
    ENUM                 shift, and go to state 22
    RIGHT_CURLY_BRACKET  shift, and go to state 134
    INC_OP               shift, and go to state 23
    DEC_OP               shift, and go to state 24

    variable            go to state 26
    if_statement        go to state 27
    while_statement     go to state 28
    assignment          go to state 29
    for_statement       go to state 30
    do_statement        go to state 31
    switch_statement    go to state 32
    break_statement     go to state 33
    continue_statement  go to state 34
    statement           go to state 61
    enum_statement      go to state 37
    func_call           go to state 38


State 91

   71 do_statement: DO tail UNTIL • LEFT_PAREN expression RIGHT_PAREN SEMICOLON

    LEFT_PAREN  shift, and go to state 135


State 92

   23 expression: expression • ADD_OP expression
   24           | expression • SUB_OP expression
   25           | expression • MUL_OP expression
   26           | expression • DIV_OP expression
   27           | expression • MOD_OP expression
   28           | expression • BIT_OR_OP expression
   29           | expression • BIT_AND_OP expression
   30           | expression • BIT_XOR_OP expression
   31           | expression • BIT_LSHIFT_OP expression
   32           | expression • BIT_RSHIFT_OP expression
   33           | expression • bool_op expression
   34           | expression • rel_op expression
   72 switch_statement: SWITCH LEFT_PAREN expression • RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    RIGHT_PAREN    shift, and go to state 136
    ADD_OP         shift, and go to state 108
    SUB_OP         shift, and go to state 109
    MUL_OP         shift, and go to state 110
    DIV_OP         shift, and go to state 111
    MOD_OP         shift, and go to state 112
    OR_OP          shift, and go to state 113
    AND_OP         shift, and go to state 114
    BIT_OR_OP      shift, and go to state 115
    BIT_AND_OP     shift, and go to state 116
    BIT_XOR_OP     shift, and go to state 117
    BIT_LSHIFT_OP  shift, and go to state 118
    BIT_RSHIFT_OP  shift, and go to state 119
    EQ_OP          shift, and go to state 120
    NE_OP          shift, and go to state 121
    GT_OP          shift, and go to state 122
    LT_OP          shift, and go to state 123
    GE_OP          shift, and go to state 124
    LE_OP          shift, and go to state 125

    rel_op   go to state 126
    bool_op  go to state 127


State 93

  118 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET • enum_list RIGHT_CURLY_BRACKET SEMICOLON

    IDENT  shift, and go to state 137

    var_init   go to state 138
    enum_list  go to state 139
    one_val    go to state 140


State 94

   94 statement: INC_OP IDENT SEMICOLON •

    $default  reduce using rule 94 (statement)


State 95

   95 statement: DEC_OP IDENT SEMICOLON •

    $default  reduce using rule 95 (statement)


State 96

   23 expression: expression • ADD_OP expression
   24           | expression • SUB_OP expression
   25           | expression • MUL_OP expression
   26           | expression • DIV_OP expression
   27           | expression • MOD_OP expression
   28           | expression • BIT_OR_OP expression
   29           | expression • BIT_AND_OP expression
   30           | expression • BIT_XOR_OP expression
   31           | expression • BIT_LSHIFT_OP expression
   32           | expression • BIT_RSHIFT_OP expression
   33           | expression • bool_op expression
   34           | expression • rel_op expression
   69 assignment: variable ASSIGN_OP expression •

    ADD_OP         shift, and go to state 108
    SUB_OP         shift, and go to state 109
    MUL_OP         shift, and go to state 110
    DIV_OP         shift, and go to state 111
    MOD_OP         shift, and go to state 112
    OR_OP          shift, and go to state 113
    AND_OP         shift, and go to state 114
    BIT_OR_OP      shift, and go to state 115
    BIT_AND_OP     shift, and go to state 116
    BIT_XOR_OP     shift, and go to state 117
    BIT_LSHIFT_OP  shift, and go to state 118
    BIT_RSHIFT_OP  shift, and go to state 119
    EQ_OP          shift, and go to state 120
    NE_OP          shift, and go to state 121
    GT_OP          shift, and go to state 122
    LT_OP          shift, and go to state 123
    GE_OP          shift, and go to state 124
    LE_OP          shift, and go to state 125

    $default  reduce using rule 69 (assignment)

    rel_op   go to state 126
    bool_op  go to state 127


State 97

    1 program: declarations statements RETURN SEMICOLON • functions_optional

    FUNC      reduce using rule 98 ($@3)
    $default  reduce using rule 3 (functions_optional)

    functions_optional  go to state 141
    functions           go to state 142
    function            go to state 143
    $@3                 go to state 144


State 98

   19 var_init: IDENT ASSIGN_OP value •

    $default  reduce using rule 19 (var_init)


State 99

   15 names: names COMMA init •

    $default  reduce using rule 15 (names)


State 100

   14 names: names COMMA variable •

    $default  reduce using rule 14 (names)


State 101

   13 declaration: type $@1 names $@2 SEMICOLON •

    $default  reduce using rule 13 (declaration)


State 102

   43 unary_expression: IDENT INC_OP •

    $default  reduce using rule 43 (unary_expression)


State 103

   44 unary_expression: IDENT DEC_OP •

    $default  reduce using rule 44 (unary_expression)


State 104

   23 expression: expression • ADD_OP expression
   24           | expression • SUB_OP expression
   25           | expression • MUL_OP expression
   26           | expression • DIV_OP expression
   27           | expression • MOD_OP expression
   28           | expression • BIT_OR_OP expression
   29           | expression • BIT_AND_OP expression
   30           | expression • BIT_XOR_OP expression
   31           | expression • BIT_LSHIFT_OP expression
   32           | expression • BIT_RSHIFT_OP expression
   33           | expression • bool_op expression
   34           | expression • rel_op expression
   35           | LEFT_PAREN expression • RIGHT_PAREN

    RIGHT_PAREN    shift, and go to state 145
    ADD_OP         shift, and go to state 108
    SUB_OP         shift, and go to state 109
    MUL_OP         shift, and go to state 110
    DIV_OP         shift, and go to state 111
    MOD_OP         shift, and go to state 112
    OR_OP          shift, and go to state 113
    AND_OP         shift, and go to state 114
    BIT_OR_OP      shift, and go to state 115
    BIT_AND_OP     shift, and go to state 116
    BIT_XOR_OP     shift, and go to state 117
    BIT_LSHIFT_OP  shift, and go to state 118
    BIT_RSHIFT_OP  shift, and go to state 119
    EQ_OP          shift, and go to state 120
    NE_OP          shift, and go to state 121
    GT_OP          shift, and go to state 122
    LT_OP          shift, and go to state 123
    GE_OP          shift, and go to state 124
    LE_OP          shift, and go to state 125

    rel_op   go to state 126
    bool_op  go to state 127


State 105

   40 unary_expression: INC_OP IDENT •

    $default  reduce using rule 40 (unary_expression)


State 106

   41 unary_expression: DEC_OP IDENT •

    $default  reduce using rule 41 (unary_expression)


State 107

   42 unary_expression: NOT_OP IDENT •

    $default  reduce using rule 42 (unary_expression)


State 108

   23 expression: expression ADD_OP • expression

    IDENT           shift, and go to state 66
    CONST_INT       shift, and go to state 67
    CONST_FLOAT     shift, and go to state 68
    CONST_CHAR      shift, and go to state 69
    STRING_LITERAL  shift, and go to state 70
    TRUE_TOKEN      shift, and go to state 71
    FALSE_TOKEN     shift, and go to state 72
    LEFT_PAREN      shift, and go to state 73
    INC_OP          shift, and go to state 74
    DEC_OP          shift, and go to state 75
    NOT_OP          shift, and go to state 76

    variable          go to state 77
    expression        go to state 146
    unary_expression  go to state 79
    value             go to state 80
    func_call         go to state 81


State 109

   24 expression: expression SUB_OP • expression

    IDENT           shift, and go to state 66
    CONST_INT       shift, and go to state 67
    CONST_FLOAT     shift, and go to state 68
    CONST_CHAR      shift, and go to state 69
    STRING_LITERAL  shift, and go to state 70
    TRUE_TOKEN      shift, and go to state 71
    FALSE_TOKEN     shift, and go to state 72
    LEFT_PAREN      shift, and go to state 73
    INC_OP          shift, and go to state 74
    DEC_OP          shift, and go to state 75
    NOT_OP          shift, and go to state 76

    variable          go to state 77
    expression        go to state 147
    unary_expression  go to state 79
    value             go to state 80
    func_call         go to state 81


State 110

   25 expression: expression MUL_OP • expression

    IDENT           shift, and go to state 66
    CONST_INT       shift, and go to state 67
    CONST_FLOAT     shift, and go to state 68
    CONST_CHAR      shift, and go to state 69
    STRING_LITERAL  shift, and go to state 70
    TRUE_TOKEN      shift, and go to state 71
    FALSE_TOKEN     shift, and go to state 72
    LEFT_PAREN      shift, and go to state 73
    INC_OP          shift, and go to state 74
    DEC_OP          shift, and go to state 75
    NOT_OP          shift, and go to state 76

    variable          go to state 77
    expression        go to state 148
    unary_expression  go to state 79
    value             go to state 80
    func_call         go to state 81


State 111

   26 expression: expression DIV_OP • expression

    IDENT           shift, and go to state 66
    CONST_INT       shift, and go to state 67
    CONST_FLOAT     shift, and go to state 68
    CONST_CHAR      shift, and go to state 69
    STRING_LITERAL  shift, and go to state 70
    TRUE_TOKEN      shift, and go to state 71
    FALSE_TOKEN     shift, and go to state 72
    LEFT_PAREN      shift, and go to state 73
    INC_OP          shift, and go to state 74
    DEC_OP          shift, and go to state 75
    NOT_OP          shift, and go to state 76

    variable          go to state 77
    expression        go to state 149
    unary_expression  go to state 79
    value             go to state 80
    func_call         go to state 81


State 112

   27 expression: expression MOD_OP • expression

    IDENT           shift, and go to state 66
    CONST_INT       shift, and go to state 67
    CONST_FLOAT     shift, and go to state 68
    CONST_CHAR      shift, and go to state 69
    STRING_LITERAL  shift, and go to state 70
    TRUE_TOKEN      shift, and go to state 71
    FALSE_TOKEN     shift, and go to state 72
    LEFT_PAREN      shift, and go to state 73
    INC_OP          shift, and go to state 74
    DEC_OP          shift, and go to state 75
    NOT_OP          shift, and go to state 76

    variable          go to state 77
    expression        go to state 150
    unary_expression  go to state 79
    value             go to state 80
    func_call         go to state 81


State 113

   51 bool_op: OR_OP •

    $default  reduce using rule 51 (bool_op)


State 114

   52 bool_op: AND_OP •

    $default  reduce using rule 52 (bool_op)


State 115

   28 expression: expression BIT_OR_OP • expression

    IDENT           shift, and go to state 66
    CONST_INT       shift, and go to state 67
    CONST_FLOAT     shift, and go to state 68
    CONST_CHAR      shift, and go to state 69
    STRING_LITERAL  shift, and go to state 70
    TRUE_TOKEN      shift, and go to state 71
    FALSE_TOKEN     shift, and go to state 72
    LEFT_PAREN      shift, and go to state 73
    INC_OP          shift, and go to state 74
    DEC_OP          shift, and go to state 75
    NOT_OP          shift, and go to state 76

    variable          go to state 77
    expression        go to state 151
    unary_expression  go to state 79
    value             go to state 80
    func_call         go to state 81


State 116

   29 expression: expression BIT_AND_OP • expression

    IDENT           shift, and go to state 66
    CONST_INT       shift, and go to state 67
    CONST_FLOAT     shift, and go to state 68
    CONST_CHAR      shift, and go to state 69
    STRING_LITERAL  shift, and go to state 70
    TRUE_TOKEN      shift, and go to state 71
    FALSE_TOKEN     shift, and go to state 72
    LEFT_PAREN      shift, and go to state 73
    INC_OP          shift, and go to state 74
    DEC_OP          shift, and go to state 75
    NOT_OP          shift, and go to state 76

    variable          go to state 77
    expression        go to state 152
    unary_expression  go to state 79
    value             go to state 80
    func_call         go to state 81


State 117

   30 expression: expression BIT_XOR_OP • expression

    IDENT           shift, and go to state 66
    CONST_INT       shift, and go to state 67
    CONST_FLOAT     shift, and go to state 68
    CONST_CHAR      shift, and go to state 69
    STRING_LITERAL  shift, and go to state 70
    TRUE_TOKEN      shift, and go to state 71
    FALSE_TOKEN     shift, and go to state 72
    LEFT_PAREN      shift, and go to state 73
    INC_OP          shift, and go to state 74
    DEC_OP          shift, and go to state 75
    NOT_OP          shift, and go to state 76

    variable          go to state 77
    expression        go to state 153
    unary_expression  go to state 79
    value             go to state 80
    func_call         go to state 81


State 118

   31 expression: expression BIT_LSHIFT_OP • expression

    IDENT           shift, and go to state 66
    CONST_INT       shift, and go to state 67
    CONST_FLOAT     shift, and go to state 68
    CONST_CHAR      shift, and go to state 69
    STRING_LITERAL  shift, and go to state 70
    TRUE_TOKEN      shift, and go to state 71
    FALSE_TOKEN     shift, and go to state 72
    LEFT_PAREN      shift, and go to state 73
    INC_OP          shift, and go to state 74
    DEC_OP          shift, and go to state 75
    NOT_OP          shift, and go to state 76

    variable          go to state 77
    expression        go to state 154
    unary_expression  go to state 79
    value             go to state 80
    func_call         go to state 81


State 119

   32 expression: expression BIT_RSHIFT_OP • expression

    IDENT           shift, and go to state 66
    CONST_INT       shift, and go to state 67
    CONST_FLOAT     shift, and go to state 68
    CONST_CHAR      shift, and go to state 69
    STRING_LITERAL  shift, and go to state 70
    TRUE_TOKEN      shift, and go to state 71
    FALSE_TOKEN     shift, and go to state 72
    LEFT_PAREN      shift, and go to state 73
    INC_OP          shift, and go to state 74
    DEC_OP          shift, and go to state 75
    NOT_OP          shift, and go to state 76

    variable          go to state 77
    expression        go to state 155
    unary_expression  go to state 79
    value             go to state 80
    func_call         go to state 81


State 120

   45 rel_op: EQ_OP •

    $default  reduce using rule 45 (rel_op)


State 121

   46 rel_op: NE_OP •

    $default  reduce using rule 46 (rel_op)


State 122

   47 rel_op: GT_OP •

    $default  reduce using rule 47 (rel_op)


State 123

   48 rel_op: LT_OP •

    $default  reduce using rule 48 (rel_op)


State 124

   50 rel_op: GE_OP •

    $default  reduce using rule 50 (rel_op)


State 125

   49 rel_op: LE_OP •

    $default  reduce using rule 49 (rel_op)


State 126

   34 expression: expression rel_op • expression

    IDENT           shift, and go to state 66
    CONST_INT       shift, and go to state 67
    CONST_FLOAT     shift, and go to state 68
    CONST_CHAR      shift, and go to state 69
    STRING_LITERAL  shift, and go to state 70
    TRUE_TOKEN      shift, and go to state 71
    FALSE_TOKEN     shift, and go to state 72
    LEFT_PAREN      shift, and go to state 73
    INC_OP          shift, and go to state 74
    DEC_OP          shift, and go to state 75
    NOT_OP          shift, and go to state 76

    variable          go to state 77
    expression        go to state 156
    unary_expression  go to state 79
    value             go to state 80
    func_call         go to state 81


State 127

   33 expression: expression bool_op • expression

    IDENT           shift, and go to state 66
    CONST_INT       shift, and go to state 67
    CONST_FLOAT     shift, and go to state 68
    CONST_CHAR      shift, and go to state 69
    STRING_LITERAL  shift, and go to state 70
    TRUE_TOKEN      shift, and go to state 71
    FALSE_TOKEN     shift, and go to state 72
    LEFT_PAREN      shift, and go to state 73
    INC_OP          shift, and go to state 74
    DEC_OP          shift, and go to state 75
    NOT_OP          shift, and go to state 76

    variable          go to state 77
    expression        go to state 157
    unary_expression  go to state 79
    value             go to state 80
    func_call         go to state 81


State 128

  123 func_call: IDENT LEFT_PAREN arguments RIGHT_PAREN •

    $default  reduce using rule 123 (func_call)


State 129

  126 argument: argument COMMA • expression

    IDENT           shift, and go to state 66
    CONST_INT       shift, and go to state 67
    CONST_FLOAT     shift, and go to state 68
    CONST_CHAR      shift, and go to state 69
    STRING_LITERAL  shift, and go to state 70
    TRUE_TOKEN      shift, and go to state 71
    FALSE_TOKEN     shift, and go to state 72
    LEFT_PAREN      shift, and go to state 73
    INC_OP          shift, and go to state 74
    DEC_OP          shift, and go to state 75
    NOT_OP          shift, and go to state 76

    variable          go to state 77
    expression        go to state 158
    unary_expression  go to state 79
    value             go to state 80
    func_call         go to state 81


State 130

   64 if_statement: IF LEFT_PAREN expression RIGHT_PAREN • tail else_if else_part
   65             | IF LEFT_PAREN expression RIGHT_PAREN • tail else_part

    LEFT_CURLY_BRACKET  shift, and go to state 50

    tail  go to state 159


State 131

   66 while_statement: WHILE LEFT_PAREN expression RIGHT_PAREN • tail

    LEFT_CURLY_BRACKET  shift, and go to state 50

    tail  go to state 160


State 132

   20 variable: IDENT •

    $default  reduce using rule 20 (variable)


State 133

   70 for_statement: FOR LEFT_PAREN optional_type assignment • SEMICOLON expression SEMICOLON expression RIGHT_PAREN tail

    SEMICOLON  shift, and go to state 161


State 134

   59 tail: LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET •

    $default  reduce using rule 59 (tail)


State 135

   71 do_statement: DO tail UNTIL LEFT_PAREN • expression RIGHT_PAREN SEMICOLON

    IDENT           shift, and go to state 66
    CONST_INT       shift, and go to state 67
    CONST_FLOAT     shift, and go to state 68
    CONST_CHAR      shift, and go to state 69
    STRING_LITERAL  shift, and go to state 70
    TRUE_TOKEN      shift, and go to state 71
    FALSE_TOKEN     shift, and go to state 72
    LEFT_PAREN      shift, and go to state 73
    INC_OP          shift, and go to state 74
    DEC_OP          shift, and go to state 75
    NOT_OP          shift, and go to state 76

    variable          go to state 77
    expression        go to state 162
    unary_expression  go to state 79
    value             go to state 80
    func_call         go to state 81


State 136

   72 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN • LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 163


State 137

   19 var_init: IDENT • ASSIGN_OP value
  121 one_val: IDENT •

    ASSIGN_OP  shift, and go to state 63

    $default  reduce using rule 121 (one_val)


State 138

  122 one_val: var_init •

    $default  reduce using rule 122 (one_val)


State 139

  118 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET enum_list • RIGHT_CURLY_BRACKET SEMICOLON
  120 enum_list: enum_list • COMMA one_val

    RIGHT_CURLY_BRACKET  shift, and go to state 164
    COMMA                shift, and go to state 165


State 140

  119 enum_list: one_val •

    $default  reduce using rule 119 (enum_list)


State 141

    1 program: declarations statements RETURN SEMICOLON functions_optional •

    $default  reduce using rule 1 (program)


State 142

    2 functions_optional: functions •
   96 functions: functions • function

    FUNC      reduce using rule 98 ($@3)
    $default  reduce using rule 2 (functions_optional)

    function  go to state 166
    $@3       go to state 144


State 143

   97 functions: function •

    $default  reduce using rule 97 (functions)


State 144

   99 function: $@3 • function_head function_tail

    FUNC  shift, and go to state 167

    function_head  go to state 168


State 145

   35 expression: LEFT_PAREN expression RIGHT_PAREN •

    $default  reduce using rule 35 (expression)


State 146

   23 expression: expression • ADD_OP expression
   23           | expression ADD_OP expression •
   24           | expression • SUB_OP expression
   25           | expression • MUL_OP expression
   26           | expression • DIV_OP expression
   27           | expression • MOD_OP expression
   28           | expression • BIT_OR_OP expression
   29           | expression • BIT_AND_OP expression
   30           | expression • BIT_XOR_OP expression
   31           | expression • BIT_LSHIFT_OP expression
   32           | expression • BIT_RSHIFT_OP expression
   33           | expression • bool_op expression
   34           | expression • rel_op expression

    OR_OP          shift, and go to state 113
    AND_OP         shift, and go to state 114
    BIT_OR_OP      shift, and go to state 115
    BIT_AND_OP     shift, and go to state 116
    BIT_XOR_OP     shift, and go to state 117
    BIT_LSHIFT_OP  shift, and go to state 118
    BIT_RSHIFT_OP  shift, and go to state 119
    EQ_OP          shift, and go to state 120
    NE_OP          shift, and go to state 121
    GT_OP          shift, and go to state 122
    LT_OP          shift, and go to state 123
    GE_OP          shift, and go to state 124
    LE_OP          shift, and go to state 125

    BIT_RSHIFT_OP  [reduce using rule 23 (expression)]
    $default       reduce using rule 23 (expression)

    rel_op   go to state 126
    bool_op  go to state 127


State 147

   23 expression: expression • ADD_OP expression
   24           | expression • SUB_OP expression
   24           | expression SUB_OP expression •
   25           | expression • MUL_OP expression
   26           | expression • DIV_OP expression
   27           | expression • MOD_OP expression
   28           | expression • BIT_OR_OP expression
   29           | expression • BIT_AND_OP expression
   30           | expression • BIT_XOR_OP expression
   31           | expression • BIT_LSHIFT_OP expression
   32           | expression • BIT_RSHIFT_OP expression
   33           | expression • bool_op expression
   34           | expression • rel_op expression

    OR_OP          shift, and go to state 113
    AND_OP         shift, and go to state 114
    BIT_OR_OP      shift, and go to state 115
    BIT_AND_OP     shift, and go to state 116
    BIT_XOR_OP     shift, and go to state 117
    BIT_LSHIFT_OP  shift, and go to state 118
    BIT_RSHIFT_OP  shift, and go to state 119
    EQ_OP          shift, and go to state 120
    NE_OP          shift, and go to state 121
    GT_OP          shift, and go to state 122
    LT_OP          shift, and go to state 123
    GE_OP          shift, and go to state 124
    LE_OP          shift, and go to state 125

    BIT_RSHIFT_OP  [reduce using rule 24 (expression)]
    $default       reduce using rule 24 (expression)

    rel_op   go to state 126
    bool_op  go to state 127


State 148

   23 expression: expression • ADD_OP expression
   24           | expression • SUB_OP expression
   25           | expression • MUL_OP expression
   25           | expression MUL_OP expression •
   26           | expression • DIV_OP expression
   27           | expression • MOD_OP expression
   28           | expression • BIT_OR_OP expression
   29           | expression • BIT_AND_OP expression
   30           | expression • BIT_XOR_OP expression
   31           | expression • BIT_LSHIFT_OP expression
   32           | expression • BIT_RSHIFT_OP expression
   33           | expression • bool_op expression
   34           | expression • rel_op expression

    ADD_OP         shift, and go to state 108
    SUB_OP         shift, and go to state 109
    OR_OP          shift, and go to state 113
    AND_OP         shift, and go to state 114
    BIT_OR_OP      shift, and go to state 115
    BIT_AND_OP     shift, and go to state 116
    BIT_XOR_OP     shift, and go to state 117
    BIT_LSHIFT_OP  shift, and go to state 118
    BIT_RSHIFT_OP  shift, and go to state 119
    EQ_OP          shift, and go to state 120
    NE_OP          shift, and go to state 121
    GT_OP          shift, and go to state 122
    LT_OP          shift, and go to state 123
    GE_OP          shift, and go to state 124
    LE_OP          shift, and go to state 125

    BIT_RSHIFT_OP  [reduce using rule 25 (expression)]
    $default       reduce using rule 25 (expression)

    rel_op   go to state 126
    bool_op  go to state 127


State 149

   23 expression: expression • ADD_OP expression
   24           | expression • SUB_OP expression
   25           | expression • MUL_OP expression
   26           | expression • DIV_OP expression
   26           | expression DIV_OP expression •
   27           | expression • MOD_OP expression
   28           | expression • BIT_OR_OP expression
   29           | expression • BIT_AND_OP expression
   30           | expression • BIT_XOR_OP expression
   31           | expression • BIT_LSHIFT_OP expression
   32           | expression • BIT_RSHIFT_OP expression
   33           | expression • bool_op expression
   34           | expression • rel_op expression

    ADD_OP         shift, and go to state 108
    SUB_OP         shift, and go to state 109
    OR_OP          shift, and go to state 113
    AND_OP         shift, and go to state 114
    BIT_OR_OP      shift, and go to state 115
    BIT_AND_OP     shift, and go to state 116
    BIT_XOR_OP     shift, and go to state 117
    BIT_LSHIFT_OP  shift, and go to state 118
    BIT_RSHIFT_OP  shift, and go to state 119
    EQ_OP          shift, and go to state 120
    NE_OP          shift, and go to state 121
    GT_OP          shift, and go to state 122
    LT_OP          shift, and go to state 123
    GE_OP          shift, and go to state 124
    LE_OP          shift, and go to state 125

    BIT_RSHIFT_OP  [reduce using rule 26 (expression)]
    $default       reduce using rule 26 (expression)

    rel_op   go to state 126
    bool_op  go to state 127


State 150

   23 expression: expression • ADD_OP expression
   24           | expression • SUB_OP expression
   25           | expression • MUL_OP expression
   26           | expression • DIV_OP expression
   27           | expression • MOD_OP expression
   27           | expression MOD_OP expression •
   28           | expression • BIT_OR_OP expression
   29           | expression • BIT_AND_OP expression
   30           | expression • BIT_XOR_OP expression
   31           | expression • BIT_LSHIFT_OP expression
   32           | expression • BIT_RSHIFT_OP expression
   33           | expression • bool_op expression
   34           | expression • rel_op expression

    ADD_OP         shift, and go to state 108
    SUB_OP         shift, and go to state 109
    OR_OP          shift, and go to state 113
    AND_OP         shift, and go to state 114
    BIT_OR_OP      shift, and go to state 115
    BIT_AND_OP     shift, and go to state 116
    BIT_XOR_OP     shift, and go to state 117
    BIT_LSHIFT_OP  shift, and go to state 118
    BIT_RSHIFT_OP  shift, and go to state 119
    EQ_OP          shift, and go to state 120
    NE_OP          shift, and go to state 121
    GT_OP          shift, and go to state 122
    LT_OP          shift, and go to state 123
    GE_OP          shift, and go to state 124
    LE_OP          shift, and go to state 125

    BIT_RSHIFT_OP  [reduce using rule 27 (expression)]
    $default       reduce using rule 27 (expression)

    rel_op   go to state 126
    bool_op  go to state 127


State 151

   23 expression: expression • ADD_OP expression
   24           | expression • SUB_OP expression
   25           | expression • MUL_OP expression
   26           | expression • DIV_OP expression
   27           | expression • MOD_OP expression
   28           | expression • BIT_OR_OP expression
   28           | expression BIT_OR_OP expression •
   29           | expression • BIT_AND_OP expression
   30           | expression • BIT_XOR_OP expression
   31           | expression • BIT_LSHIFT_OP expression
   32           | expression • BIT_RSHIFT_OP expression
   33           | expression • bool_op expression
   34           | expression • rel_op expression

    BIT_RSHIFT_OP  shift, and go to state 119

    BIT_RSHIFT_OP  [reduce using rule 28 (expression)]
    $default       reduce using rule 28 (expression)

    rel_op   go to state 126
    bool_op  go to state 127


State 152

   23 expression: expression • ADD_OP expression
   24           | expression • SUB_OP expression
   25           | expression • MUL_OP expression
   26           | expression • DIV_OP expression
   27           | expression • MOD_OP expression
   28           | expression • BIT_OR_OP expression
   29           | expression • BIT_AND_OP expression
   29           | expression BIT_AND_OP expression •
   30           | expression • BIT_XOR_OP expression
   31           | expression • BIT_LSHIFT_OP expression
   32           | expression • BIT_RSHIFT_OP expression
   33           | expression • bool_op expression
   34           | expression • rel_op expression

    BIT_RSHIFT_OP  shift, and go to state 119

    BIT_RSHIFT_OP  [reduce using rule 29 (expression)]
    $default       reduce using rule 29 (expression)

    rel_op   go to state 126
    bool_op  go to state 127


State 153

   23 expression: expression • ADD_OP expression
   24           | expression • SUB_OP expression
   25           | expression • MUL_OP expression
   26           | expression • DIV_OP expression
   27           | expression • MOD_OP expression
   28           | expression • BIT_OR_OP expression
   29           | expression • BIT_AND_OP expression
   30           | expression • BIT_XOR_OP expression
   30           | expression BIT_XOR_OP expression •
   31           | expression • BIT_LSHIFT_OP expression
   32           | expression • BIT_RSHIFT_OP expression
   33           | expression • bool_op expression
   34           | expression • rel_op expression

    BIT_RSHIFT_OP  shift, and go to state 119

    BIT_RSHIFT_OP  [reduce using rule 30 (expression)]
    $default       reduce using rule 30 (expression)

    rel_op   go to state 126
    bool_op  go to state 127


State 154

   23 expression: expression • ADD_OP expression
   24           | expression • SUB_OP expression
   25           | expression • MUL_OP expression
   26           | expression • DIV_OP expression
   27           | expression • MOD_OP expression
   28           | expression • BIT_OR_OP expression
   29           | expression • BIT_AND_OP expression
   30           | expression • BIT_XOR_OP expression
   31           | expression • BIT_LSHIFT_OP expression
   31           | expression BIT_LSHIFT_OP expression •
   32           | expression • BIT_RSHIFT_OP expression
   33           | expression • bool_op expression
   34           | expression • rel_op expression

    BIT_RSHIFT_OP  shift, and go to state 119

    BIT_RSHIFT_OP  [reduce using rule 31 (expression)]
    $default       reduce using rule 31 (expression)

    rel_op   go to state 126
    bool_op  go to state 127


State 155

   23 expression: expression • ADD_OP expression
   24           | expression • SUB_OP expression
   25           | expression • MUL_OP expression
   26           | expression • DIV_OP expression
   27           | expression • MOD_OP expression
   28           | expression • BIT_OR_OP expression
   29           | expression • BIT_AND_OP expression
   30           | expression • BIT_XOR_OP expression
   31           | expression • BIT_LSHIFT_OP expression
   32           | expression • BIT_RSHIFT_OP expression
   32           | expression BIT_RSHIFT_OP expression •
   33           | expression • bool_op expression
   34           | expression • rel_op expression

    ADD_OP         shift, and go to state 108
    SUB_OP         shift, and go to state 109
    MUL_OP         shift, and go to state 110
    DIV_OP         shift, and go to state 111
    MOD_OP         shift, and go to state 112
    OR_OP          shift, and go to state 113
    AND_OP         shift, and go to state 114
    BIT_OR_OP      shift, and go to state 115
    BIT_AND_OP     shift, and go to state 116
    BIT_XOR_OP     shift, and go to state 117
    BIT_LSHIFT_OP  shift, and go to state 118
    BIT_RSHIFT_OP  shift, and go to state 119
    EQ_OP          shift, and go to state 120
    NE_OP          shift, and go to state 121
    GT_OP          shift, and go to state 122
    LT_OP          shift, and go to state 123
    GE_OP          shift, and go to state 124
    LE_OP          shift, and go to state 125

    ADD_OP         [reduce using rule 32 (expression)]
    SUB_OP         [reduce using rule 32 (expression)]
    MUL_OP         [reduce using rule 32 (expression)]
    DIV_OP         [reduce using rule 32 (expression)]
    MOD_OP         [reduce using rule 32 (expression)]
    OR_OP          [reduce using rule 32 (expression)]
    AND_OP         [reduce using rule 32 (expression)]
    BIT_OR_OP      [reduce using rule 32 (expression)]
    BIT_AND_OP     [reduce using rule 32 (expression)]
    BIT_XOR_OP     [reduce using rule 32 (expression)]
    BIT_LSHIFT_OP  [reduce using rule 32 (expression)]
    BIT_RSHIFT_OP  [reduce using rule 32 (expression)]
    EQ_OP          [reduce using rule 32 (expression)]
    NE_OP          [reduce using rule 32 (expression)]
    GT_OP          [reduce using rule 32 (expression)]
    LT_OP          [reduce using rule 32 (expression)]
    GE_OP          [reduce using rule 32 (expression)]
    LE_OP          [reduce using rule 32 (expression)]
    $default       reduce using rule 32 (expression)

    rel_op   go to state 126
    bool_op  go to state 127


State 156

   23 expression: expression • ADD_OP expression
   24           | expression • SUB_OP expression
   25           | expression • MUL_OP expression
   26           | expression • DIV_OP expression
   27           | expression • MOD_OP expression
   28           | expression • BIT_OR_OP expression
   29           | expression • BIT_AND_OP expression
   30           | expression • BIT_XOR_OP expression
   31           | expression • BIT_LSHIFT_OP expression
   32           | expression • BIT_RSHIFT_OP expression
   33           | expression • bool_op expression
   34           | expression • rel_op expression
   34           | expression rel_op expression •

    ADD_OP         shift, and go to state 108
    SUB_OP         shift, and go to state 109
    MUL_OP         shift, and go to state 110
    DIV_OP         shift, and go to state 111
    MOD_OP         shift, and go to state 112
    OR_OP          shift, and go to state 113
    AND_OP         shift, and go to state 114
    BIT_OR_OP      shift, and go to state 115
    BIT_AND_OP     shift, and go to state 116
    BIT_XOR_OP     shift, and go to state 117
    BIT_LSHIFT_OP  shift, and go to state 118
    BIT_RSHIFT_OP  shift, and go to state 119
    EQ_OP          shift, and go to state 120
    NE_OP          shift, and go to state 121
    GT_OP          shift, and go to state 122
    LT_OP          shift, and go to state 123
    GE_OP          shift, and go to state 124
    LE_OP          shift, and go to state 125

    ADD_OP         [reduce using rule 34 (expression)]
    SUB_OP         [reduce using rule 34 (expression)]
    MUL_OP         [reduce using rule 34 (expression)]
    DIV_OP         [reduce using rule 34 (expression)]
    MOD_OP         [reduce using rule 34 (expression)]
    OR_OP          [reduce using rule 34 (expression)]
    AND_OP         [reduce using rule 34 (expression)]
    BIT_OR_OP      [reduce using rule 34 (expression)]
    BIT_AND_OP     [reduce using rule 34 (expression)]
    BIT_XOR_OP     [reduce using rule 34 (expression)]
    BIT_LSHIFT_OP  [reduce using rule 34 (expression)]
    BIT_RSHIFT_OP  [reduce using rule 34 (expression)]
    EQ_OP          [reduce using rule 34 (expression)]
    NE_OP          [reduce using rule 34 (expression)]
    GT_OP          [reduce using rule 34 (expression)]
    LT_OP          [reduce using rule 34 (expression)]
    GE_OP          [reduce using rule 34 (expression)]
    LE_OP          [reduce using rule 34 (expression)]
    $default       reduce using rule 34 (expression)

    rel_op   go to state 126
    bool_op  go to state 127


State 157

   23 expression: expression • ADD_OP expression
   24           | expression • SUB_OP expression
   25           | expression • MUL_OP expression
   26           | expression • DIV_OP expression
   27           | expression • MOD_OP expression
   28           | expression • BIT_OR_OP expression
   29           | expression • BIT_AND_OP expression
   30           | expression • BIT_XOR_OP expression
   31           | expression • BIT_LSHIFT_OP expression
   32           | expression • BIT_RSHIFT_OP expression
   33           | expression • bool_op expression
   33           | expression bool_op expression •
   34           | expression • rel_op expression

    ADD_OP         shift, and go to state 108
    SUB_OP         shift, and go to state 109
    MUL_OP         shift, and go to state 110
    DIV_OP         shift, and go to state 111
    MOD_OP         shift, and go to state 112
    OR_OP          shift, and go to state 113
    AND_OP         shift, and go to state 114
    BIT_OR_OP      shift, and go to state 115
    BIT_AND_OP     shift, and go to state 116
    BIT_XOR_OP     shift, and go to state 117
    BIT_LSHIFT_OP  shift, and go to state 118
    BIT_RSHIFT_OP  shift, and go to state 119
    EQ_OP          shift, and go to state 120
    NE_OP          shift, and go to state 121
    GT_OP          shift, and go to state 122
    LT_OP          shift, and go to state 123
    GE_OP          shift, and go to state 124
    LE_OP          shift, and go to state 125

    ADD_OP         [reduce using rule 33 (expression)]
    SUB_OP         [reduce using rule 33 (expression)]
    MUL_OP         [reduce using rule 33 (expression)]
    DIV_OP         [reduce using rule 33 (expression)]
    MOD_OP         [reduce using rule 33 (expression)]
    OR_OP          [reduce using rule 33 (expression)]
    AND_OP         [reduce using rule 33 (expression)]
    BIT_OR_OP      [reduce using rule 33 (expression)]
    BIT_AND_OP     [reduce using rule 33 (expression)]
    BIT_XOR_OP     [reduce using rule 33 (expression)]
    BIT_LSHIFT_OP  [reduce using rule 33 (expression)]
    BIT_RSHIFT_OP  [reduce using rule 33 (expression)]
    EQ_OP          [reduce using rule 33 (expression)]
    NE_OP          [reduce using rule 33 (expression)]
    GT_OP          [reduce using rule 33 (expression)]
    LT_OP          [reduce using rule 33 (expression)]
    GE_OP          [reduce using rule 33 (expression)]
    LE_OP          [reduce using rule 33 (expression)]
    $default       reduce using rule 33 (expression)

    rel_op   go to state 126
    bool_op  go to state 127


State 158

   23 expression: expression • ADD_OP expression
   24           | expression • SUB_OP expression
   25           | expression • MUL_OP expression
   26           | expression • DIV_OP expression
   27           | expression • MOD_OP expression
   28           | expression • BIT_OR_OP expression
   29           | expression • BIT_AND_OP expression
   30           | expression • BIT_XOR_OP expression
   31           | expression • BIT_LSHIFT_OP expression
   32           | expression • BIT_RSHIFT_OP expression
   33           | expression • bool_op expression
   34           | expression • rel_op expression
  126 argument: argument COMMA expression •

    ADD_OP         shift, and go to state 108
    SUB_OP         shift, and go to state 109
    MUL_OP         shift, and go to state 110
    DIV_OP         shift, and go to state 111
    MOD_OP         shift, and go to state 112
    OR_OP          shift, and go to state 113
    AND_OP         shift, and go to state 114
    BIT_OR_OP      shift, and go to state 115
    BIT_AND_OP     shift, and go to state 116
    BIT_XOR_OP     shift, and go to state 117
    BIT_LSHIFT_OP  shift, and go to state 118
    BIT_RSHIFT_OP  shift, and go to state 119
    EQ_OP          shift, and go to state 120
    NE_OP          shift, and go to state 121
    GT_OP          shift, and go to state 122
    LT_OP          shift, and go to state 123
    GE_OP          shift, and go to state 124
    LE_OP          shift, and go to state 125

    $default  reduce using rule 126 (argument)

    rel_op   go to state 126
    bool_op  go to state 127


State 159

   64 if_statement: IF LEFT_PAREN expression RIGHT_PAREN tail • else_if else_part
   65             | IF LEFT_PAREN expression RIGHT_PAREN tail • else_part

    ELSE  shift, and go to state 169
    ELIF  shift, and go to state 170

    $default  reduce using rule 63 (else_part)

    else_if    go to state 171
    else_part  go to state 172


State 160

   66 while_statement: WHILE LEFT_PAREN expression RIGHT_PAREN tail •

    $default  reduce using rule 66 (while_statement)


State 161

   70 for_statement: FOR LEFT_PAREN optional_type assignment SEMICOLON • expression SEMICOLON expression RIGHT_PAREN tail

    IDENT           shift, and go to state 66
    CONST_INT       shift, and go to state 67
    CONST_FLOAT     shift, and go to state 68
    CONST_CHAR      shift, and go to state 69
    STRING_LITERAL  shift, and go to state 70
    TRUE_TOKEN      shift, and go to state 71
    FALSE_TOKEN     shift, and go to state 72
    LEFT_PAREN      shift, and go to state 73
    INC_OP          shift, and go to state 74
    DEC_OP          shift, and go to state 75
    NOT_OP          shift, and go to state 76

    variable          go to state 77
    expression        go to state 173
    unary_expression  go to state 79
    value             go to state 80
    func_call         go to state 81


State 162

   23 expression: expression • ADD_OP expression
   24           | expression • SUB_OP expression
   25           | expression • MUL_OP expression
   26           | expression • DIV_OP expression
   27           | expression • MOD_OP expression
   28           | expression • BIT_OR_OP expression
   29           | expression • BIT_AND_OP expression
   30           | expression • BIT_XOR_OP expression
   31           | expression • BIT_LSHIFT_OP expression
   32           | expression • BIT_RSHIFT_OP expression
   33           | expression • bool_op expression
   34           | expression • rel_op expression
   71 do_statement: DO tail UNTIL LEFT_PAREN expression • RIGHT_PAREN SEMICOLON

    RIGHT_PAREN    shift, and go to state 174
    ADD_OP         shift, and go to state 108
    SUB_OP         shift, and go to state 109
    MUL_OP         shift, and go to state 110
    DIV_OP         shift, and go to state 111
    MOD_OP         shift, and go to state 112
    OR_OP          shift, and go to state 113
    AND_OP         shift, and go to state 114
    BIT_OR_OP      shift, and go to state 115
    BIT_AND_OP     shift, and go to state 116
    BIT_XOR_OP     shift, and go to state 117
    BIT_LSHIFT_OP  shift, and go to state 118
    BIT_RSHIFT_OP  shift, and go to state 119
    EQ_OP          shift, and go to state 120
    NE_OP          shift, and go to state 121
    GT_OP          shift, and go to state 122
    LT_OP          shift, and go to state 123
    GE_OP          shift, and go to state 124
    LE_OP          shift, and go to state 125

    rel_op   go to state 126
    bool_op  go to state 127


State 163

   72 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET • cases RIGHT_CURLY_BRACKET

    CASE  shift, and go to state 175

    cases  go to state 176
    case   go to state 177


State 164

  118 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET • SEMICOLON

    SEMICOLON  shift, and go to state 178


State 165

  120 enum_list: enum_list COMMA • one_val

    IDENT  shift, and go to state 137

    var_init  go to state 138
    one_val   go to state 179


State 166

   96 functions: functions function •

    $default  reduce using rule 96 (functions)


State 167

  102 function_head: FUNC • IDENT LEFT_PAREN param_empty RIGHT_PAREN type

    IDENT  shift, and go to state 180


State 168

   99 function: $@3 function_head • function_tail

    LEFT_CURLY_BRACKET  shift, and go to state 181

    function_tail  go to state 182


State 169

   62 else_part: ELSE • tail

    LEFT_CURLY_BRACKET  shift, and go to state 50

    tail  go to state 183


State 170

   60 else_if: ELIF • LEFT_PAREN expression RIGHT_PAREN tail

    LEFT_PAREN  shift, and go to state 184


State 171

   61 else_if: else_if • ELIF LEFT_PAREN expression RIGHT_PAREN tail
   64 if_statement: IF LEFT_PAREN expression RIGHT_PAREN tail else_if • else_part

    ELSE  shift, and go to state 169
    ELIF  shift, and go to state 185

    $default  reduce using rule 63 (else_part)

    else_part  go to state 186


State 172

   65 if_statement: IF LEFT_PAREN expression RIGHT_PAREN tail else_part •

    $default  reduce using rule 65 (if_statement)


State 173

   23 expression: expression • ADD_OP expression
   24           | expression • SUB_OP expression
   25           | expression • MUL_OP expression
   26           | expression • DIV_OP expression
   27           | expression • MOD_OP expression
   28           | expression • BIT_OR_OP expression
   29           | expression • BIT_AND_OP expression
   30           | expression • BIT_XOR_OP expression
   31           | expression • BIT_LSHIFT_OP expression
   32           | expression • BIT_RSHIFT_OP expression
   33           | expression • bool_op expression
   34           | expression • rel_op expression
   70 for_statement: FOR LEFT_PAREN optional_type assignment SEMICOLON expression • SEMICOLON expression RIGHT_PAREN tail

    SEMICOLON      shift, and go to state 187
    ADD_OP         shift, and go to state 108
    SUB_OP         shift, and go to state 109
    MUL_OP         shift, and go to state 110
    DIV_OP         shift, and go to state 111
    MOD_OP         shift, and go to state 112
    OR_OP          shift, and go to state 113
    AND_OP         shift, and go to state 114
    BIT_OR_OP      shift, and go to state 115
    BIT_AND_OP     shift, and go to state 116
    BIT_XOR_OP     shift, and go to state 117
    BIT_LSHIFT_OP  shift, and go to state 118
    BIT_RSHIFT_OP  shift, and go to state 119
    EQ_OP          shift, and go to state 120
    NE_OP          shift, and go to state 121
    GT_OP          shift, and go to state 122
    LT_OP          shift, and go to state 123
    GE_OP          shift, and go to state 124
    LE_OP          shift, and go to state 125

    rel_op   go to state 126
    bool_op  go to state 127


State 174

   71 do_statement: DO tail UNTIL LEFT_PAREN expression RIGHT_PAREN • SEMICOLON

    SEMICOLON  shift, and go to state 188


State 175

   77 case: CASE • expression COLON statements

    IDENT           shift, and go to state 66
    CONST_INT       shift, and go to state 67
    CONST_FLOAT     shift, and go to state 68
    CONST_CHAR      shift, and go to state 69
    STRING_LITERAL  shift, and go to state 70
    TRUE_TOKEN      shift, and go to state 71
    FALSE_TOKEN     shift, and go to state 72
    LEFT_PAREN      shift, and go to state 73
    INC_OP          shift, and go to state 74
    DEC_OP          shift, and go to state 75
    NOT_OP          shift, and go to state 76

    variable          go to state 77
    expression        go to state 189
    unary_expression  go to state 79
    value             go to state 80
    func_call         go to state 81


State 176

   72 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases • RIGHT_CURLY_BRACKET
   73 cases: cases • case
   75      | cases • default

    CASE                 shift, and go to state 175
    DEFAULT              shift, and go to state 190
    RIGHT_CURLY_BRACKET  shift, and go to state 191

    default  go to state 192
    case     go to state 193


State 177

   74 cases: case •

    $default  reduce using rule 74 (cases)


State 178

  118 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON •

    $default  reduce using rule 118 (enum_statement)


State 179

  120 enum_list: enum_list COMMA one_val •

    $default  reduce using rule 120 (enum_list)


State 180

  102 function_head: FUNC IDENT • LEFT_PAREN param_empty RIGHT_PAREN type

    LEFT_PAREN  shift, and go to state 194


State 181

  103 function_tail: LEFT_CURLY_BRACKET • declarations_statements_optional return_optional RIGHT_CURLY_BRACKET

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    DOUBLE    shift, and go to state 3
    VOID      shift, and go to state 4
    BOOLEAN   shift, and go to state 5
    CHAR      shift, and go to state 6
    STR       shift, and go to state 7
    IDENT     shift, and go to state 14
    IF        shift, and go to state 15
    WHILE     shift, and go to state 16
    FOR       shift, and go to state 17
    DO        shift, and go to state 18
    SWITCH    shift, and go to state 19
    BREAK     shift, and go to state 20
    CONTINUE  shift, and go to state 21
    ENUM      shift, and go to state 22
    INC_OP    shift, and go to state 23
    DEC_OP    shift, and go to state 24

    $default  reduce using rule 109 (declarations_statements_optional)

    type                              go to state 9
    declaration                       go to state 195
    variable                          go to state 26
    if_statement                      go to state 27
    while_statement                   go to state 28
    assignment                        go to state 29
    for_statement                     go to state 30
    do_statement                      go to state 31
    switch_statement                  go to state 32
    break_statement                   go to state 33
    continue_statement                go to state 34
    statement                         go to state 196
    declarations_statements           go to state 197
    declarations_statements_optional  go to state 198
    enum_statement                    go to state 37
    func_call                         go to state 38


State 182

   99 function: $@3 function_head function_tail •

    $default  reduce using rule 99 (function)


State 183

   62 else_part: ELSE tail •

    $default  reduce using rule 62 (else_part)


State 184

   60 else_if: ELIF LEFT_PAREN • expression RIGHT_PAREN tail

    IDENT           shift, and go to state 66
    CONST_INT       shift, and go to state 67
    CONST_FLOAT     shift, and go to state 68
    CONST_CHAR      shift, and go to state 69
    STRING_LITERAL  shift, and go to state 70
    TRUE_TOKEN      shift, and go to state 71
    FALSE_TOKEN     shift, and go to state 72
    LEFT_PAREN      shift, and go to state 73
    INC_OP          shift, and go to state 74
    DEC_OP          shift, and go to state 75
    NOT_OP          shift, and go to state 76

    variable          go to state 77
    expression        go to state 199
    unary_expression  go to state 79
    value             go to state 80
    func_call         go to state 81


State 185

   61 else_if: else_if ELIF • LEFT_PAREN expression RIGHT_PAREN tail

    LEFT_PAREN  shift, and go to state 200


State 186

   64 if_statement: IF LEFT_PAREN expression RIGHT_PAREN tail else_if else_part •

    $default  reduce using rule 64 (if_statement)


State 187

   70 for_statement: FOR LEFT_PAREN optional_type assignment SEMICOLON expression SEMICOLON • expression RIGHT_PAREN tail

    IDENT           shift, and go to state 66
    CONST_INT       shift, and go to state 67
    CONST_FLOAT     shift, and go to state 68
    CONST_CHAR      shift, and go to state 69
    STRING_LITERAL  shift, and go to state 70
    TRUE_TOKEN      shift, and go to state 71
    FALSE_TOKEN     shift, and go to state 72
    LEFT_PAREN      shift, and go to state 73
    INC_OP          shift, and go to state 74
    DEC_OP          shift, and go to state 75
    NOT_OP          shift, and go to state 76

    variable          go to state 77
    expression        go to state 201
    unary_expression  go to state 79
    value             go to state 80
    func_call         go to state 81


State 188

   71 do_statement: DO tail UNTIL LEFT_PAREN expression RIGHT_PAREN SEMICOLON •

    $default  reduce using rule 71 (do_statement)


State 189

   23 expression: expression • ADD_OP expression
   24           | expression • SUB_OP expression
   25           | expression • MUL_OP expression
   26           | expression • DIV_OP expression
   27           | expression • MOD_OP expression
   28           | expression • BIT_OR_OP expression
   29           | expression • BIT_AND_OP expression
   30           | expression • BIT_XOR_OP expression
   31           | expression • BIT_LSHIFT_OP expression
   32           | expression • BIT_RSHIFT_OP expression
   33           | expression • bool_op expression
   34           | expression • rel_op expression
   77 case: CASE expression • COLON statements

    COLON          shift, and go to state 202
    ADD_OP         shift, and go to state 108
    SUB_OP         shift, and go to state 109
    MUL_OP         shift, and go to state 110
    DIV_OP         shift, and go to state 111
    MOD_OP         shift, and go to state 112
    OR_OP          shift, and go to state 113
    AND_OP         shift, and go to state 114
    BIT_OR_OP      shift, and go to state 115
    BIT_AND_OP     shift, and go to state 116
    BIT_XOR_OP     shift, and go to state 117
    BIT_LSHIFT_OP  shift, and go to state 118
    BIT_RSHIFT_OP  shift, and go to state 119
    EQ_OP          shift, and go to state 120
    NE_OP          shift, and go to state 121
    GT_OP          shift, and go to state 122
    LT_OP          shift, and go to state 123
    GE_OP          shift, and go to state 124
    LE_OP          shift, and go to state 125

    rel_op   go to state 126
    bool_op  go to state 127


State 190

   76 default: DEFAULT • COLON statements

    COLON  shift, and go to state 203


State 191

   72 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET •

    $default  reduce using rule 72 (switch_statement)


State 192

   75 cases: cases default •

    $default  reduce using rule 75 (cases)


State 193

   73 cases: cases case •

    $default  reduce using rule 73 (cases)


State 194

  102 function_head: FUNC IDENT LEFT_PAREN • param_empty RIGHT_PAREN type

    RIGHT_PAREN  reduce using rule 101 (param_empty)
    $default     reduce using rule 116 ($@4)

    param_empty  go to state 204
    parameters   go to state 205
    parameter    go to state 206
    $@4          go to state 207


State 195

  107 declarations_statements: declaration •

    $default  reduce using rule 107 (declarations_statements)


State 196

  106 declarations_statements: statement •

    $default  reduce using rule 106 (declarations_statements)


State 197

  104 declarations_statements: declarations_statements • statement
  105                        | declarations_statements • declaration
  108 declarations_statements_optional: declarations_statements •

    INTEGER   shift, and go to state 1
    FLOAT     shift, and go to state 2
    DOUBLE    shift, and go to state 3
    VOID      shift, and go to state 4
    BOOLEAN   shift, and go to state 5
    CHAR      shift, and go to state 6
    STR       shift, and go to state 7
    IDENT     shift, and go to state 14
    IF        shift, and go to state 15
    WHILE     shift, and go to state 16
    FOR       shift, and go to state 17
    DO        shift, and go to state 18
    SWITCH    shift, and go to state 19
    BREAK     shift, and go to state 20
    CONTINUE  shift, and go to state 21
    ENUM      shift, and go to state 22
    INC_OP    shift, and go to state 23
    DEC_OP    shift, and go to state 24

    $default  reduce using rule 108 (declarations_statements_optional)

    type                go to state 9
    declaration         go to state 208
    variable            go to state 26
    if_statement        go to state 27
    while_statement     go to state 28
    assignment          go to state 29
    for_statement       go to state 30
    do_statement        go to state 31
    switch_statement    go to state 32
    break_statement     go to state 33
    continue_statement  go to state 34
    statement           go to state 209
    enum_statement      go to state 37
    func_call           go to state 38


State 198

  103 function_tail: LEFT_CURLY_BRACKET declarations_statements_optional • return_optional RIGHT_CURLY_BRACKET

    RETURN  shift, and go to state 210

    $default  reduce using rule 111 (return_optional)

    return_optional  go to state 211


State 199

   23 expression: expression • ADD_OP expression
   24           | expression • SUB_OP expression
   25           | expression • MUL_OP expression
   26           | expression • DIV_OP expression
   27           | expression • MOD_OP expression
   28           | expression • BIT_OR_OP expression
   29           | expression • BIT_AND_OP expression
   30           | expression • BIT_XOR_OP expression
   31           | expression • BIT_LSHIFT_OP expression
   32           | expression • BIT_RSHIFT_OP expression
   33           | expression • bool_op expression
   34           | expression • rel_op expression
   60 else_if: ELIF LEFT_PAREN expression • RIGHT_PAREN tail

    RIGHT_PAREN    shift, and go to state 212
    ADD_OP         shift, and go to state 108
    SUB_OP         shift, and go to state 109
    MUL_OP         shift, and go to state 110
    DIV_OP         shift, and go to state 111
    MOD_OP         shift, and go to state 112
    OR_OP          shift, and go to state 113
    AND_OP         shift, and go to state 114
    BIT_OR_OP      shift, and go to state 115
    BIT_AND_OP     shift, and go to state 116
    BIT_XOR_OP     shift, and go to state 117
    BIT_LSHIFT_OP  shift, and go to state 118
    BIT_RSHIFT_OP  shift, and go to state 119
    EQ_OP          shift, and go to state 120
    NE_OP          shift, and go to state 121
    GT_OP          shift, and go to state 122
    LT_OP          shift, and go to state 123
    GE_OP          shift, and go to state 124
    LE_OP          shift, and go to state 125

    rel_op   go to state 126
    bool_op  go to state 127


State 200

   61 else_if: else_if ELIF LEFT_PAREN • expression RIGHT_PAREN tail

    IDENT           shift, and go to state 66
    CONST_INT       shift, and go to state 67
    CONST_FLOAT     shift, and go to state 68
    CONST_CHAR      shift, and go to state 69
    STRING_LITERAL  shift, and go to state 70
    TRUE_TOKEN      shift, and go to state 71
    FALSE_TOKEN     shift, and go to state 72
    LEFT_PAREN      shift, and go to state 73
    INC_OP          shift, and go to state 74
    DEC_OP          shift, and go to state 75
    NOT_OP          shift, and go to state 76

    variable          go to state 77
    expression        go to state 213
    unary_expression  go to state 79
    value             go to state 80
    func_call         go to state 81


State 201

   23 expression: expression • ADD_OP expression
   24           | expression • SUB_OP expression
   25           | expression • MUL_OP expression
   26           | expression • DIV_OP expression
   27           | expression • MOD_OP expression
   28           | expression • BIT_OR_OP expression
   29           | expression • BIT_AND_OP expression
   30           | expression • BIT_XOR_OP expression
   31           | expression • BIT_LSHIFT_OP expression
   32           | expression • BIT_RSHIFT_OP expression
   33           | expression • bool_op expression
   34           | expression • rel_op expression
   70 for_statement: FOR LEFT_PAREN optional_type assignment SEMICOLON expression SEMICOLON expression • RIGHT_PAREN tail

    RIGHT_PAREN    shift, and go to state 214
    ADD_OP         shift, and go to state 108
    SUB_OP         shift, and go to state 109
    MUL_OP         shift, and go to state 110
    DIV_OP         shift, and go to state 111
    MOD_OP         shift, and go to state 112
    OR_OP          shift, and go to state 113
    AND_OP         shift, and go to state 114
    BIT_OR_OP      shift, and go to state 115
    BIT_AND_OP     shift, and go to state 116
    BIT_XOR_OP     shift, and go to state 117
    BIT_LSHIFT_OP  shift, and go to state 118
    BIT_RSHIFT_OP  shift, and go to state 119
    EQ_OP          shift, and go to state 120
    NE_OP          shift, and go to state 121
    GT_OP          shift, and go to state 122
    LT_OP          shift, and go to state 123
    GE_OP          shift, and go to state 124
    LE_OP          shift, and go to state 125

    rel_op   go to state 126
    bool_op  go to state 127


State 202

   77 case: CASE expression COLON • statements

    IDENT     shift, and go to state 14
    IF        shift, and go to state 15
    WHILE     shift, and go to state 16
    FOR       shift, and go to state 17
    DO        shift, and go to state 18
    SWITCH    shift, and go to state 19
    BREAK     shift, and go to state 20
    CONTINUE  shift, and go to state 21
    ENUM      shift, and go to state 22
    INC_OP    shift, and go to state 23
    DEC_OP    shift, and go to state 24

    variable            go to state 26
    if_statement        go to state 27
    while_statement     go to state 28
    assignment          go to state 29
    for_statement       go to state 30
    do_statement        go to state 31
    switch_statement    go to state 32
    break_statement     go to state 33
    continue_statement  go to state 34
    statements          go to state 215
    statement           go to state 36
    enum_statement      go to state 37
    func_call           go to state 38


State 203

   76 default: DEFAULT COLON • statements

    IDENT     shift, and go to state 14
    IF        shift, and go to state 15
    WHILE     shift, and go to state 16
    FOR       shift, and go to state 17
    DO        shift, and go to state 18
    SWITCH    shift, and go to state 19
    BREAK     shift, and go to state 20
    CONTINUE  shift, and go to state 21
    ENUM      shift, and go to state 22
    INC_OP    shift, and go to state 23
    DEC_OP    shift, and go to state 24

    variable            go to state 26
    if_statement        go to state 27
    while_statement     go to state 28
    assignment          go to state 29
    for_statement       go to state 30
    do_statement        go to state 31
    switch_statement    go to state 32
    break_statement     go to state 33
    continue_statement  go to state 34
    statements          go to state 216
    statement           go to state 36
    enum_statement      go to state 37
    func_call           go to state 38


State 204

  102 function_head: FUNC IDENT LEFT_PAREN param_empty • RIGHT_PAREN type

    RIGHT_PAREN  shift, and go to state 217


State 205

  100 param_empty: parameters •
  114 parameters: parameters • COMMA parameter

    COMMA  shift, and go to state 218

    $default  reduce using rule 100 (param_empty)


State 206

  115 parameters: parameter •

    $default  reduce using rule 115 (parameters)


State 207

  117 parameter: $@4 • type variable

    INTEGER  shift, and go to state 1
    FLOAT    shift, and go to state 2
    DOUBLE   shift, and go to state 3
    VOID     shift, and go to state 4
    BOOLEAN  shift, and go to state 5
    CHAR     shift, and go to state 6
    STR      shift, and go to state 7

    type  go to state 219


State 208

  105 declarations_statements: declarations_statements declaration •

    $default  reduce using rule 105 (declarations_statements)


State 209

  104 declarations_statements: declarations_statements statement •

    $default  reduce using rule 104 (declarations_statements)


State 210

  110 return_optional: RETURN • return_val SEMICOLON

    IDENT           shift, and go to state 66
    CONST_INT       shift, and go to state 67
    CONST_FLOAT     shift, and go to state 68
    CONST_CHAR      shift, and go to state 69
    STRING_LITERAL  shift, and go to state 70
    TRUE_TOKEN      shift, and go to state 71
    FALSE_TOKEN     shift, and go to state 72
    LEFT_PAREN      shift, and go to state 73
    INC_OP          shift, and go to state 74
    DEC_OP          shift, and go to state 75
    NOT_OP          shift, and go to state 76

    $default  reduce using rule 113 (return_val)

    variable          go to state 77
    expression        go to state 220
    unary_expression  go to state 79
    value             go to state 80
    return_val        go to state 221
    func_call         go to state 81


State 211

  103 function_tail: LEFT_CURLY_BRACKET declarations_statements_optional return_optional • RIGHT_CURLY_BRACKET

    RIGHT_CURLY_BRACKET  shift, and go to state 222


State 212

   60 else_if: ELIF LEFT_PAREN expression RIGHT_PAREN • tail

    LEFT_CURLY_BRACKET  shift, and go to state 50

    tail  go to state 223


State 213

   23 expression: expression • ADD_OP expression
   24           | expression • SUB_OP expression
   25           | expression • MUL_OP expression
   26           | expression • DIV_OP expression
   27           | expression • MOD_OP expression
   28           | expression • BIT_OR_OP expression
   29           | expression • BIT_AND_OP expression
   30           | expression • BIT_XOR_OP expression
   31           | expression • BIT_LSHIFT_OP expression
   32           | expression • BIT_RSHIFT_OP expression
   33           | expression • bool_op expression
   34           | expression • rel_op expression
   61 else_if: else_if ELIF LEFT_PAREN expression • RIGHT_PAREN tail

    RIGHT_PAREN    shift, and go to state 224
    ADD_OP         shift, and go to state 108
    SUB_OP         shift, and go to state 109
    MUL_OP         shift, and go to state 110
    DIV_OP         shift, and go to state 111
    MOD_OP         shift, and go to state 112
    OR_OP          shift, and go to state 113
    AND_OP         shift, and go to state 114
    BIT_OR_OP      shift, and go to state 115
    BIT_AND_OP     shift, and go to state 116
    BIT_XOR_OP     shift, and go to state 117
    BIT_LSHIFT_OP  shift, and go to state 118
    BIT_RSHIFT_OP  shift, and go to state 119
    EQ_OP          shift, and go to state 120
    NE_OP          shift, and go to state 121
    GT_OP          shift, and go to state 122
    LT_OP          shift, and go to state 123
    GE_OP          shift, and go to state 124
    LE_OP          shift, and go to state 125

    rel_op   go to state 126
    bool_op  go to state 127


State 214

   70 for_statement: FOR LEFT_PAREN optional_type assignment SEMICOLON expression SEMICOLON expression RIGHT_PAREN • tail

    LEFT_CURLY_BRACKET  shift, and go to state 50

    tail  go to state 225


State 215

   77 case: CASE expression COLON statements •
   80 statements: statements • statement

    IDENT     shift, and go to state 14
    IF        shift, and go to state 15
    WHILE     shift, and go to state 16
    FOR       shift, and go to state 17
    DO        shift, and go to state 18
    SWITCH    shift, and go to state 19
    BREAK     shift, and go to state 20
    CONTINUE  shift, and go to state 21
    ENUM      shift, and go to state 22
    INC_OP    shift, and go to state 23
    DEC_OP    shift, and go to state 24

    $default  reduce using rule 77 (case)

    variable            go to state 26
    if_statement        go to state 27
    while_statement     go to state 28
    assignment          go to state 29
    for_statement       go to state 30
    do_statement        go to state 31
    switch_statement    go to state 32
    break_statement     go to state 33
    continue_statement  go to state 34
    statement           go to state 61
    enum_statement      go to state 37
    func_call           go to state 38


State 216

   76 default: DEFAULT COLON statements •
   80 statements: statements • statement

    IDENT     shift, and go to state 14
    IF        shift, and go to state 15
    WHILE     shift, and go to state 16
    FOR       shift, and go to state 17
    DO        shift, and go to state 18
    SWITCH    shift, and go to state 19
    BREAK     shift, and go to state 20
    CONTINUE  shift, and go to state 21
    ENUM      shift, and go to state 22
    INC_OP    shift, and go to state 23
    DEC_OP    shift, and go to state 24

    $default  reduce using rule 76 (default)

    variable            go to state 26
    if_statement        go to state 27
    while_statement     go to state 28
    assignment          go to state 29
    for_statement       go to state 30
    do_statement        go to state 31
    switch_statement    go to state 32
    break_statement     go to state 33
    continue_statement  go to state 34
    statement           go to state 61
    enum_statement      go to state 37
    func_call           go to state 38


State 217

  102 function_head: FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN • type

    INTEGER  shift, and go to state 1
    FLOAT    shift, and go to state 2
    DOUBLE   shift, and go to state 3
    VOID     shift, and go to state 4
    BOOLEAN  shift, and go to state 5
    CHAR     shift, and go to state 6
    STR      shift, and go to state 7

    type  go to state 226


State 218

  114 parameters: parameters COMMA • parameter

    $default  reduce using rule 116 ($@4)

    parameter  go to state 227
    $@4        go to state 207


State 219

  117 parameter: $@4 type • variable

    IDENT  shift, and go to state 132

    variable  go to state 228


State 220

   23 expression: expression • ADD_OP expression
   24           | expression • SUB_OP expression
   25           | expression • MUL_OP expression
   26           | expression • DIV_OP expression
   27           | expression • MOD_OP expression
   28           | expression • BIT_OR_OP expression
   29           | expression • BIT_AND_OP expression
   30           | expression • BIT_XOR_OP expression
   31           | expression • BIT_LSHIFT_OP expression
   32           | expression • BIT_RSHIFT_OP expression
   33           | expression • bool_op expression
   34           | expression • rel_op expression
  112 return_val: expression •

    ADD_OP         shift, and go to state 108
    SUB_OP         shift, and go to state 109
    MUL_OP         shift, and go to state 110
    DIV_OP         shift, and go to state 111
    MOD_OP         shift, and go to state 112
    OR_OP          shift, and go to state 113
    AND_OP         shift, and go to state 114
    BIT_OR_OP      shift, and go to state 115
    BIT_AND_OP     shift, and go to state 116
    BIT_XOR_OP     shift, and go to state 117
    BIT_LSHIFT_OP  shift, and go to state 118
    BIT_RSHIFT_OP  shift, and go to state 119
    EQ_OP          shift, and go to state 120
    NE_OP          shift, and go to state 121
    GT_OP          shift, and go to state 122
    LT_OP          shift, and go to state 123
    GE_OP          shift, and go to state 124
    LE_OP          shift, and go to state 125

    $default  reduce using rule 112 (return_val)

    rel_op   go to state 126
    bool_op  go to state 127


State 221

  110 return_optional: RETURN return_val • SEMICOLON

    SEMICOLON  shift, and go to state 229


State 222

  103 function_tail: LEFT_CURLY_BRACKET declarations_statements_optional return_optional RIGHT_CURLY_BRACKET •

    $default  reduce using rule 103 (function_tail)


State 223

   60 else_if: ELIF LEFT_PAREN expression RIGHT_PAREN tail •

    $default  reduce using rule 60 (else_if)


State 224

   61 else_if: else_if ELIF LEFT_PAREN expression RIGHT_PAREN • tail

    LEFT_CURLY_BRACKET  shift, and go to state 50

    tail  go to state 230


State 225

   70 for_statement: FOR LEFT_PAREN optional_type assignment SEMICOLON expression SEMICOLON expression RIGHT_PAREN tail •

    $default  reduce using rule 70 (for_statement)


State 226

  102 function_head: FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN type •

    $default  reduce using rule 102 (function_head)


State 227

  114 parameters: parameters COMMA parameter •

    $default  reduce using rule 114 (parameters)


State 228

  117 parameter: $@4 type variable •

    $default  reduce using rule 117 (parameter)


State 229

  110 return_optional: RETURN return_val SEMICOLON •

    $default  reduce using rule 110 (return_optional)


State 230

   61 else_if: else_if ELIF LEFT_PAREN expression RIGHT_PAREN tail •

    $default  reduce using rule 61 (else_if)
