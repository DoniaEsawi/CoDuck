Terminals unused in grammar

    UNTIL
    LEFT_SQ_BRACKET
    RIGHT_SQ_BRACKET
    QUESTION_MARK
    DOT
    BIT_NOT_OP


Rules useless in parser due to conflicts

    1 program: program


State 4 conflicts: 1 shift/reduce
State 28 conflicts: 21 shift/reduce, 7 reduce/reduce
State 31 conflicts: 1 reduce/reduce
State 33 conflicts: 1 reduce/reduce
State 52 conflicts: 1 shift/reduce, 7 reduce/reduce
State 59 conflicts: 2 shift/reduce, 4 reduce/reduce
State 94 conflicts: 21 shift/reduce, 7 reduce/reduce
State 97 conflicts: 4 reduce/reduce
State 142 conflicts: 1 reduce/reduce
State 157 conflicts: 2 shift/reduce
State 158 conflicts: 2 shift/reduce
State 159 conflicts: 2 shift/reduce
State 160 conflicts: 2 shift/reduce
State 184 conflicts: 21 shift/reduce, 7 reduce/reduce
State 185 conflicts: 1 shift/reduce
State 216 conflicts: 21 shift/reduce, 7 reduce/reduce
State 217 conflicts: 21 shift/reduce, 7 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: program
    2        | functions
    3        | globals

    4 globals: declarations
    5        | enum_statements

    6 enum_statements: enum_statements enum_statement
    7                | enum_statement

    8 type: INTEGER
    9     | FLOAT
   10     | DOUBLE
   11     | VOID
   12     | BOOLEAN
   13     | CHAR
   14     | STR

   15 beforedecl: CONST
   16           | %empty

   17 declaration: beforedecl type IDENT SEMICOLON
   18            | beforedecl type IDENT ASSIGN_OP expression SEMICOLON

   19 declarations: declaration
   20             | declarations declaration

   21 tail: LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET

   22 tail_inloop: LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET

   23 bool_expression: relExp
   24                | TRUE_TOKEN
   25                | FALSE_TOKEN

   26 assign: IDENT ASSIGN_OP expression

   27 expression: assign
   28           | IDENT INC_OP
   29           | IDENT DEC_OP
   30           | simpleExp
   31           | IDENT
   32           | bool_expression

   33 simpleExp: simpleExp OR_OP andExp
   34          | andExp

   35 andExp: andExp AND_OP
   36       | bitRelExp

   37 bitRelExp: bitRelExp BIT_OR_OP relExp
   38          | bitRelExp AND relExp
   39          | bitRelExp BIT_XOR_OP relExp
   40          | relExp

   41 op: EQ_OP
   42   | NE_OP
   43   | GT_OP
   44   | LT_OP
   45   | LE_OP
   46   | GE_OP
   47   | OR_OP
   48   | AND_OP

   49 relExp: relExp op bitshiftExp
   50       | bitshiftExp

   51 bitshiftExp: bitshiftExp BIT_LSHIFT_OP sumExp
   52            | bitshiftExp BIT_RSHIFT_OP sumExp
   53            | sumExp

   54 pls_min: ADD_OP
   55        | SUB_OP

   56 mul_div: MUL_OP
   57        | DIV_OP
   58        | MOD_OP

   59 sumExp: sumExp pls_min mulExp
   60       | mulExp

   61 mulExp: mulExp mul_div unaryExp
   62       | unaryExp

   63 unaryExp: INC_OP IDENT
   64         | DEC_OP IDENT
   65         | NOT_OP IDENT
   66         | IDENT
   67         | value
   68         | LEFT_PAREN expression RIGHT_PAREN

   69 value: CONST_INT
   70      | CONST_FLOAT
   71      | CONST_CHAR
   72      | STRING_LITERAL

   73 else_if: ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   74        | else_if ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   75        | %empty

   76 else_part: ELSE tail
   77          | %empty

   78 if_statement: IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part

   79 while_statement: WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop

   80 optional_type: %empty
   81              | type

   82 for_statement: FOR LEFT_PAREN optional_type assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

   83 do_statement: DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON

   84 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

   85 cases: case
   86      | cases case
   87      | cases default

   88 default: DEFAULT COLON statements

   89 case: CASE expression COLON statements BREAK SEMICOLON

   90 return_val: expression
   91           | %empty

   92 return_statement: RETURN return_val SEMICOLON

   93 break_statement: BREAK SEMICOLON

   94 continue_statement: CONTINUE SEMICOLON

   95 expression_statement: expression SEMICOLON

   96 statements: %empty
   97           | statement
   98           | statements statement

   99 statement: if_statement
  100          | while_statement
  101          | for_statement
  102          | do_statement
  103          | switch_statement
  104          | return_statement
  105          | expression_statement
  106          | declarations
  107          | enum_statement
  108          | func_call
  109          | break_statement
  110          | continue_statement

  111 functions: functions function
  112          | function

  113 function: function_head function_tail

  114 param_empty: parameters
  115            | %empty

  116 function_head: FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN type

  117 function_tail: LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET

  118 parameters: parameter
  119           | parameters COMMA parameter
  120           | %empty

  121 parameter: type IDENT

  122 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET

  123 enum_list: one_val
  124          | enum_list COMMA one_val

  125 one_val: IDENT
  126        | IDENT ASSIGN_OP value

  127 func_call: IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON
  128          | IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON

  129 arguments: argument
  130          | arguments COMMA argument
  131          | %empty

  132 argument: expression


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INTEGER <int_val> (258) 8
    FLOAT <int_val> (259) 9
    DOUBLE <int_val> (260) 10
    VOID <int_val> (261) 11
    BOOLEAN <int_val> (262) 12
    CHAR <int_val> (263) 13
    CONST <int_val> (264) 15
    STR <int_val> (265) 14
    IDENT <symbol_table_item> (266) 17 18 26 28 29 31 63 64 65 66 116 121 122 125 126 127 128
    CONST_INT <int_val> (267) 69
    CONST_FLOAT <double_val> (268) 70
    CONST_CHAR <char_val> (269) 71
    STRING_LITERAL <str_val> (270) 72
    IF <int_val> (271) 78
    ELSE <int_val> (272) 76
    ELIF <int_val> (273) 73 74
    WHILE <int_val> (274) 79 83
    FOR <int_val> (275) 82
    DO <int_val> (276) 83
    SWITCH <int_val> (277) 84
    CASE <int_val> (278) 89
    DEFAULT <int_val> (279) 88
    RETURN <int_val> (280) 92
    BREAK <int_val> (281) 89 93
    CONTINUE <int_val> (282) 94
    TRUE_TOKEN <int_val> (283) 24
    FALSE_TOKEN <int_val> (284) 25
    ENUM <int_val> (285) 122
    FUNC <int_val> (286) 116
    UNTIL <int_val> (287)
    LEFT_PAREN <int_val> (288) 68 73 74 78 79 82 83 84 116 127 128
    RIGHT_PAREN <int_val> (289) 68 73 74 78 79 82 83 84 116 127 128
    LEFT_CURLY_BRACKET <int_val> (290) 21 22 84 117 122
    RIGHT_CURLY_BRACKET <int_val> (291) 21 22 84 117 122
    LEFT_SQ_BRACKET <int_val> (292)
    RIGHT_SQ_BRACKET <int_val> (293)
    SEMICOLON <int_val> (294) 17 18 82 83 89 92 93 94 95 127 128
    COMMA <int_val> (295) 119 124 130
    COLON <int_val> (296) 88 89
    QUESTION_MARK <int_val> (297)
    DOT <int_val> (298)
    ADD_OP <int_val> (299) 54
    SUB_OP <int_val> (300) 55
    MUL_OP <int_val> (301) 56
    DIV_OP <int_val> (302) 57
    MOD_OP <int_val> (303) 58
    INC_OP <int_val> (304) 28 63
    DEC_OP <int_val> (305) 29 64
    OR_OP <int_val> (306) 33 47
    AND_OP <int_val> (307) 35 48
    NOT_OP <int_val> (308) 65
    BIT_OR_OP <int_val> (309) 37
    AND <int_val> (310) 38
    BIT_XOR_OP <int_val> (311) 39
    BIT_NOT_OP <int_val> (312)
    BIT_LSHIFT_OP <int_val> (313) 51
    BIT_RSHIFT_OP <int_val> (314) 52
    EQ_OP <int_val> (315) 41
    NE_OP <int_val> (316) 42
    GT_OP <int_val> (317) 43
    LT_OP <int_val> (318) 44
    GE_OP <int_val> (319) 46
    LE_OP <int_val> (320) 45
    ASSIGN_OP <int_val> (321) 18 26 126 128


Nonterminals, with rules where they appear

    $accept (67)
        on left: 0
    program (68)
        on left: 1 2 3
        on right: 0 1
    globals (69)
        on left: 4 5
        on right: 3
    enum_statements (70)
        on left: 6 7
        on right: 5 6
    type (71)
        on left: 8 9 10 11 12 13 14
        on right: 17 18 81 116 121
    beforedecl (72)
        on left: 15 16
        on right: 17 18
    declaration (73)
        on left: 17 18
        on right: 19 20
    declarations (74)
        on left: 19 20
        on right: 4 20 106
    tail (75)
        on left: 21
        on right: 73 74 76 78
    tail_inloop (76)
        on left: 22
        on right: 79 82 83
    bool_expression (77)
        on left: 23 24 25
        on right: 32 73 74 78 79 82 83
    assign (78)
        on left: 26
        on right: 27 82
    expression (79)
        on left: 27 28 29 30 31 32
        on right: 18 26 68 82 84 89 90 95 132
    simpleExp (80)
        on left: 33 34
        on right: 30 33
    andExp (81)
        on left: 35 36
        on right: 33 34 35
    bitRelExp (82)
        on left: 37 38 39 40
        on right: 36 37 38 39
    op (83)
        on left: 41 42 43 44 45 46 47 48
        on right: 49
    relExp (84)
        on left: 49 50
        on right: 23 37 38 39 40 49
    bitshiftExp (85)
        on left: 51 52 53
        on right: 49 50 51 52
    pls_min (86)
        on left: 54 55
        on right: 59
    mul_div (87)
        on left: 56 57 58
        on right: 61
    sumExp (88)
        on left: 59 60
        on right: 51 52 53 59
    mulExp (89)
        on left: 61 62
        on right: 59 60 61
    unaryExp (90)
        on left: 63 64 65 66 67 68
        on right: 61 62
    value (91)
        on left: 69 70 71 72
        on right: 67 126
    else_if (92)
        on left: 73 74 75
        on right: 74 78
    else_part (93)
        on left: 76 77
        on right: 78
    if_statement (94)
        on left: 78
        on right: 99
    while_statement (95)
        on left: 79
        on right: 100
    optional_type (96)
        on left: 80 81
        on right: 82
    for_statement (97)
        on left: 82
        on right: 101
    do_statement (98)
        on left: 83
        on right: 102
    switch_statement (99)
        on left: 84
        on right: 103
    cases (100)
        on left: 85 86 87
        on right: 84 86 87
    default (101)
        on left: 88
        on right: 87
    case (102)
        on left: 89
        on right: 85 86
    return_val (103)
        on left: 90 91
        on right: 92
    return_statement (104)
        on left: 92
        on right: 104
    break_statement (105)
        on left: 93
        on right: 109
    continue_statement (106)
        on left: 94
        on right: 110
    expression_statement (107)
        on left: 95
        on right: 105
    statements (108)
        on left: 96 97 98
        on right: 21 22 88 89 98 117
    statement (109)
        on left: 99 100 101 102 103 104 105 106 107 108 109 110
        on right: 97 98
    functions (110)
        on left: 111 112
        on right: 2 111
    function (111)
        on left: 113
        on right: 111 112
    param_empty (112)
        on left: 114 115
        on right: 116
    function_head (113)
        on left: 116
        on right: 113
    function_tail (114)
        on left: 117
        on right: 113
    parameters (115)
        on left: 118 119 120
        on right: 114 119
    parameter (116)
        on left: 121
        on right: 118 119
    enum_statement (117)
        on left: 122
        on right: 6 7 107
    enum_list (118)
        on left: 123 124
        on right: 122 124
    one_val (119)
        on left: 125 126
        on right: 123 124
    func_call (120)
        on left: 127 128
        on right: 108
    arguments (121)
        on left: 129 130 131
        on right: 127 128 130
    argument (122)
        on left: 132
        on right: 129 130


State 0

    0 $accept: . program $end
    1 program: . program
    2        | . functions
    3        | . globals
    4 globals: . declarations
    5        | . enum_statements
    6 enum_statements: . enum_statements enum_statement
    7                | . enum_statement
   15 beforedecl: . CONST
   16           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STR]
   17 declaration: . beforedecl type IDENT SEMICOLON
   18            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   19 declarations: . declaration
   20             | . declarations declaration
  111 functions: . functions function
  112          | . function
  113 function: . function_head function_tail
  116 function_head: . FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN type
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET

    CONST  shift, and go to state 1
    ENUM   shift, and go to state 2
    FUNC   shift, and go to state 3

    $default  reduce using rule 16 (beforedecl)

    program          go to state 4
    globals          go to state 5
    enum_statements  go to state 6
    beforedecl       go to state 7
    declaration      go to state 8
    declarations     go to state 9
    functions        go to state 10
    function         go to state 11
    function_head    go to state 12
    enum_statement   go to state 13


State 1

   15 beforedecl: CONST .

    $default  reduce using rule 15 (beforedecl)


State 2

  122 enum_statement: ENUM . IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET

    IDENT  shift, and go to state 14


State 3

  116 function_head: FUNC . IDENT LEFT_PAREN param_empty RIGHT_PAREN type

    IDENT  shift, and go to state 15


State 4

    0 $accept: program . $end
    1 program: program .  [$end]

    $end  shift, and go to state 16

    $end  [reduce using rule 1 (program)]


State 5

    3 program: globals .

    $default  reduce using rule 3 (program)


State 6

    5 globals: enum_statements .  [$end]
    6 enum_statements: enum_statements . enum_statement
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET

    ENUM  shift, and go to state 2

    $default  reduce using rule 5 (globals)

    enum_statement  go to state 17


State 7

    8 type: . INTEGER
    9     | . FLOAT
   10     | . DOUBLE
   11     | . VOID
   12     | . BOOLEAN
   13     | . CHAR
   14     | . STR
   17 declaration: beforedecl . type IDENT SEMICOLON
   18            | beforedecl . type IDENT ASSIGN_OP expression SEMICOLON

    INTEGER  shift, and go to state 18
    FLOAT    shift, and go to state 19
    DOUBLE   shift, and go to state 20
    VOID     shift, and go to state 21
    BOOLEAN  shift, and go to state 22
    CHAR     shift, and go to state 23
    STR      shift, and go to state 24

    type  go to state 25


State 8

   19 declarations: declaration .

    $default  reduce using rule 19 (declarations)


State 9

    4 globals: declarations .  [$end]
   15 beforedecl: . CONST
   16           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STR]
   17 declaration: . beforedecl type IDENT SEMICOLON
   18            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   20 declarations: declarations . declaration

    CONST  shift, and go to state 1

    $end      reduce using rule 4 (globals)
    $default  reduce using rule 16 (beforedecl)

    beforedecl   go to state 7
    declaration  go to state 26


State 10

    2 program: functions .  [$end]
  111 functions: functions . function
  113 function: . function_head function_tail
  116 function_head: . FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN type

    FUNC  shift, and go to state 3

    $default  reduce using rule 2 (program)

    function       go to state 27
    function_head  go to state 12


State 11

  112 functions: function .

    $default  reduce using rule 112 (functions)


State 12

  113 function: function_head . function_tail
  117 function_tail: . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 28

    function_tail  go to state 29


State 13

    7 enum_statements: enum_statement .

    $default  reduce using rule 7 (enum_statements)


State 14

  122 enum_statement: ENUM IDENT . LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 30


State 15

  116 function_head: FUNC IDENT . LEFT_PAREN param_empty RIGHT_PAREN type

    LEFT_PAREN  shift, and go to state 31


State 16

    0 $accept: program $end .

    $default  accept


State 17

    6 enum_statements: enum_statements enum_statement .

    $default  reduce using rule 6 (enum_statements)


State 18

    8 type: INTEGER .

    $default  reduce using rule 8 (type)


State 19

    9 type: FLOAT .

    $default  reduce using rule 9 (type)


State 20

   10 type: DOUBLE .

    $default  reduce using rule 10 (type)


State 21

   11 type: VOID .

    $default  reduce using rule 11 (type)


State 22

   12 type: BOOLEAN .

    $default  reduce using rule 12 (type)


State 23

   13 type: CHAR .

    $default  reduce using rule 13 (type)


State 24

   14 type: STR .

    $default  reduce using rule 14 (type)


State 25

   17 declaration: beforedecl type . IDENT SEMICOLON
   18            | beforedecl type . IDENT ASSIGN_OP expression SEMICOLON

    IDENT  shift, and go to state 32


State 26

   20 declarations: declarations declaration .

    $default  reduce using rule 20 (declarations)


State 27

  111 functions: functions function .

    $default  reduce using rule 111 (functions)


State 28

   15 beforedecl: . CONST
   16           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STR]
   17 declaration: . beforedecl type IDENT SEMICOLON
   18            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   19 declarations: . declaration
   20             | . declarations declaration
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   78 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   79 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   82 for_statement: . FOR LEFT_PAREN optional_type assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   83 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   84 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   92 return_statement: . RETURN return_val SEMICOLON
   93 break_statement: . BREAK SEMICOLON
   94 continue_statement: . CONTINUE SEMICOLON
   95 expression_statement: . expression SEMICOLON
   96 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STR, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   97           | . statement
   98           | . statements statement
   99 statement: . if_statement
  100          | . while_statement
  101          | . for_statement
  102          | . do_statement
  103          | . switch_statement
  104          | . return_statement
  105          | . expression_statement
  106          | . declarations
  107          | . enum_statement
  108          | . func_call
  109          | . break_statement
  110          | . continue_statement
  117 function_tail: LEFT_CURLY_BRACKET . statements RIGHT_CURLY_BRACKET
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 33
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    IF              shift, and go to state 38
    WHILE           shift, and go to state 39
    FOR             shift, and go to state 40
    DO              shift, and go to state 41
    SWITCH          shift, and go to state 42
    RETURN          shift, and go to state 43
    BREAK           shift, and go to state 44
    CONTINUE        shift, and go to state 45
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    ENUM            shift, and go to state 2
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    INTEGER              reduce using rule 16 (beforedecl)
    INTEGER              [reduce using rule 96 (statements)]
    FLOAT                reduce using rule 16 (beforedecl)
    FLOAT                [reduce using rule 96 (statements)]
    DOUBLE               reduce using rule 16 (beforedecl)
    DOUBLE               [reduce using rule 96 (statements)]
    VOID                 reduce using rule 16 (beforedecl)
    VOID                 [reduce using rule 96 (statements)]
    BOOLEAN              reduce using rule 16 (beforedecl)
    BOOLEAN              [reduce using rule 96 (statements)]
    CHAR                 reduce using rule 16 (beforedecl)
    CHAR                 [reduce using rule 96 (statements)]
    CONST                [reduce using rule 96 (statements)]
    STR                  reduce using rule 16 (beforedecl)
    STR                  [reduce using rule 96 (statements)]
    IDENT                [reduce using rule 96 (statements)]
    CONST_INT            [reduce using rule 96 (statements)]
    CONST_FLOAT          [reduce using rule 96 (statements)]
    CONST_CHAR           [reduce using rule 96 (statements)]
    STRING_LITERAL       [reduce using rule 96 (statements)]
    IF                   [reduce using rule 96 (statements)]
    WHILE                [reduce using rule 96 (statements)]
    FOR                  [reduce using rule 96 (statements)]
    DO                   [reduce using rule 96 (statements)]
    SWITCH               [reduce using rule 96 (statements)]
    RETURN               [reduce using rule 96 (statements)]
    BREAK                [reduce using rule 96 (statements)]
    CONTINUE             [reduce using rule 96 (statements)]
    TRUE_TOKEN           [reduce using rule 96 (statements)]
    FALSE_TOKEN          [reduce using rule 96 (statements)]
    ENUM                 [reduce using rule 96 (statements)]
    LEFT_PAREN           [reduce using rule 96 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 96 (statements)
    INC_OP               [reduce using rule 96 (statements)]
    DEC_OP               [reduce using rule 96 (statements)]
    NOT_OP               [reduce using rule 96 (statements)]
    $default             reduce using rule 16 (beforedecl)

    beforedecl            go to state 7
    declaration           go to state 8
    declarations          go to state 52
    bool_expression       go to state 53
    assign                go to state 54
    expression            go to state 55
    simpleExp             go to state 56
    andExp                go to state 57
    bitRelExp             go to state 58
    relExp                go to state 59
    bitshiftExp           go to state 60
    sumExp                go to state 61
    mulExp                go to state 62
    unaryExp              go to state 63
    value                 go to state 64
    if_statement          go to state 65
    while_statement       go to state 66
    for_statement         go to state 67
    do_statement          go to state 68
    switch_statement      go to state 69
    return_statement      go to state 70
    break_statement       go to state 71
    continue_statement    go to state 72
    expression_statement  go to state 73
    statements            go to state 74
    statement             go to state 75
    enum_statement        go to state 76
    func_call             go to state 77


State 29

  113 function: function_head function_tail .

    $default  reduce using rule 113 (function)


State 30

  122 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET . enum_list RIGHT_CURLY_BRACKET
  123 enum_list: . one_val
  124          | . enum_list COMMA one_val
  125 one_val: . IDENT
  126        | . IDENT ASSIGN_OP value

    IDENT  shift, and go to state 78

    enum_list  go to state 79
    one_val    go to state 80


State 31

    8 type: . INTEGER
    9     | . FLOAT
   10     | . DOUBLE
   11     | . VOID
   12     | . BOOLEAN
   13     | . CHAR
   14     | . STR
  114 param_empty: . parameters
  115            | . %empty  [RIGHT_PAREN]
  116 function_head: FUNC IDENT LEFT_PAREN . param_empty RIGHT_PAREN type
  118 parameters: . parameter
  119           | . parameters COMMA parameter
  120           | . %empty  [RIGHT_PAREN, COMMA]
  121 parameter: . type IDENT

    INTEGER  shift, and go to state 18
    FLOAT    shift, and go to state 19
    DOUBLE   shift, and go to state 20
    VOID     shift, and go to state 21
    BOOLEAN  shift, and go to state 22
    CHAR     shift, and go to state 23
    STR      shift, and go to state 24

    RIGHT_PAREN  reduce using rule 115 (param_empty)
    RIGHT_PAREN  [reduce using rule 120 (parameters)]
    COMMA        reduce using rule 120 (parameters)
    $default     reduce using rule 115 (param_empty)

    type         go to state 81
    param_empty  go to state 82
    parameters   go to state 83
    parameter    go to state 84


State 32

   17 declaration: beforedecl type IDENT . SEMICOLON
   18            | beforedecl type IDENT . ASSIGN_OP expression SEMICOLON

    SEMICOLON  shift, and go to state 85
    ASSIGN_OP  shift, and go to state 86


State 33

   26 assign: IDENT . ASSIGN_OP expression
   28 expression: IDENT . INC_OP
   29           | IDENT . DEC_OP
   31           | IDENT .  [SEMICOLON]
   66 unaryExp: IDENT .  [SEMICOLON, ADD_OP, SUB_OP, MUL_OP, DIV_OP, MOD_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
  127 func_call: IDENT . LEFT_PAREN arguments RIGHT_PAREN SEMICOLON
  128          | IDENT . ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON

    LEFT_PAREN  shift, and go to state 87
    INC_OP      shift, and go to state 88
    DEC_OP      shift, and go to state 89
    ASSIGN_OP   shift, and go to state 90

    SEMICOLON  reduce using rule 31 (expression)
    SEMICOLON  [reduce using rule 66 (unaryExp)]
    $default   reduce using rule 66 (unaryExp)


State 34

   69 value: CONST_INT .

    $default  reduce using rule 69 (value)


State 35

   70 value: CONST_FLOAT .

    $default  reduce using rule 70 (value)


State 36

   71 value: CONST_CHAR .

    $default  reduce using rule 71 (value)


State 37

   72 value: STRING_LITERAL .

    $default  reduce using rule 72 (value)


State 38

   78 if_statement: IF . LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part

    LEFT_PAREN  shift, and go to state 91


State 39

   79 while_statement: WHILE . LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop

    LEFT_PAREN  shift, and go to state 92


State 40

   82 for_statement: FOR . LEFT_PAREN optional_type assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

    LEFT_PAREN  shift, and go to state 93


State 41

   22 tail_inloop: . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   83 do_statement: DO . tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON

    LEFT_CURLY_BRACKET  shift, and go to state 94

    tail_inloop  go to state 95


State 42

   84 switch_statement: SWITCH . LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    LEFT_PAREN  shift, and go to state 96


State 43

   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   90 return_val: . expression
   91           | . %empty  [SEMICOLON]
   92 return_statement: RETURN . return_val SEMICOLON

    IDENT           shift, and go to state 97
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    $default  reduce using rule 91 (return_val)

    bool_expression  go to state 53
    assign           go to state 54
    expression       go to state 98
    simpleExp        go to state 56
    andExp           go to state 57
    bitRelExp        go to state 58
    relExp           go to state 59
    bitshiftExp      go to state 60
    sumExp           go to state 61
    mulExp           go to state 62
    unaryExp         go to state 63
    value            go to state 64
    return_val       go to state 99


State 44

   93 break_statement: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 100


State 45

   94 continue_statement: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 101


State 46

   24 bool_expression: TRUE_TOKEN .

    $default  reduce using rule 24 (bool_expression)


State 47

   25 bool_expression: FALSE_TOKEN .

    $default  reduce using rule 25 (bool_expression)


State 48

   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   68         | LEFT_PAREN . expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL

    IDENT           shift, and go to state 97
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    bool_expression  go to state 53
    assign           go to state 54
    expression       go to state 102
    simpleExp        go to state 56
    andExp           go to state 57
    bitRelExp        go to state 58
    relExp           go to state 59
    bitshiftExp      go to state 60
    sumExp           go to state 61
    mulExp           go to state 62
    unaryExp         go to state 63
    value            go to state 64


State 49

   63 unaryExp: INC_OP . IDENT

    IDENT  shift, and go to state 103


State 50

   64 unaryExp: DEC_OP . IDENT

    IDENT  shift, and go to state 104


State 51

   65 unaryExp: NOT_OP . IDENT

    IDENT  shift, and go to state 105


State 52

   15 beforedecl: . CONST
   16           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STR]
   17 declaration: . beforedecl type IDENT SEMICOLON
   18            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   20 declarations: declarations . declaration
  106 statement: declarations .  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STR, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, CASE, DEFAULT, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]

    CONST  shift, and go to state 1

    INTEGER   reduce using rule 16 (beforedecl)
    INTEGER   [reduce using rule 106 (statement)]
    FLOAT     reduce using rule 16 (beforedecl)
    FLOAT     [reduce using rule 106 (statement)]
    DOUBLE    reduce using rule 16 (beforedecl)
    DOUBLE    [reduce using rule 106 (statement)]
    VOID      reduce using rule 16 (beforedecl)
    VOID      [reduce using rule 106 (statement)]
    BOOLEAN   reduce using rule 16 (beforedecl)
    BOOLEAN   [reduce using rule 106 (statement)]
    CHAR      reduce using rule 16 (beforedecl)
    CHAR      [reduce using rule 106 (statement)]
    CONST     [reduce using rule 106 (statement)]
    STR       reduce using rule 16 (beforedecl)
    STR       [reduce using rule 106 (statement)]
    $default  reduce using rule 106 (statement)

    beforedecl   go to state 7
    declaration  go to state 26


State 53

   32 expression: bool_expression .

    $default  reduce using rule 32 (expression)


State 54

   27 expression: assign .

    $default  reduce using rule 27 (expression)


State 55

   95 expression_statement: expression . SEMICOLON

    SEMICOLON  shift, and go to state 106


State 56

   30 expression: simpleExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON]
   33 simpleExp: simpleExp . OR_OP andExp

    OR_OP  shift, and go to state 107

    $default  reduce using rule 30 (expression)


State 57

   34 simpleExp: andExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP]
   35 andExp: andExp . AND_OP

    AND_OP  shift, and go to state 108

    $default  reduce using rule 34 (simpleExp)


State 58

   36 andExp: bitRelExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP]
   37 bitRelExp: bitRelExp . BIT_OR_OP relExp
   38          | bitRelExp . AND relExp
   39          | bitRelExp . BIT_XOR_OP relExp

    BIT_OR_OP   shift, and go to state 109
    AND         shift, and go to state 110
    BIT_XOR_OP  shift, and go to state 111

    $default  reduce using rule 36 (andExp)


State 59

   23 bool_expression: relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON]
   40 bitRelExp: relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   41 op: . EQ_OP
   42   | . NE_OP
   43   | . GT_OP
   44   | . LT_OP
   45   | . LE_OP
   46   | . GE_OP
   47   | . OR_OP
   48   | . AND_OP
   49 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 112
    AND_OP  shift, and go to state 113
    EQ_OP   shift, and go to state 114
    NE_OP   shift, and go to state 115
    GT_OP   shift, and go to state 116
    LT_OP   shift, and go to state 117
    GE_OP   shift, and go to state 118
    LE_OP   shift, and go to state 119

    RIGHT_PAREN  reduce using rule 23 (bool_expression)
    RIGHT_PAREN  [reduce using rule 40 (bitRelExp)]
    SEMICOLON    reduce using rule 23 (bool_expression)
    SEMICOLON    [reduce using rule 40 (bitRelExp)]
    COMMA        reduce using rule 23 (bool_expression)
    COMMA        [reduce using rule 40 (bitRelExp)]
    COLON        reduce using rule 23 (bool_expression)
    COLON        [reduce using rule 40 (bitRelExp)]
    OR_OP        [reduce using rule 40 (bitRelExp)]
    AND_OP       [reduce using rule 40 (bitRelExp)]
    BIT_OR_OP    reduce using rule 40 (bitRelExp)
    AND          reduce using rule 40 (bitRelExp)
    BIT_XOR_OP   reduce using rule 40 (bitRelExp)
    $default     reduce using rule 23 (bool_expression)

    op  go to state 120


State 60

   50 relExp: bitshiftExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   51 bitshiftExp: bitshiftExp . BIT_LSHIFT_OP sumExp
   52            | bitshiftExp . BIT_RSHIFT_OP sumExp

    BIT_LSHIFT_OP  shift, and go to state 121
    BIT_RSHIFT_OP  shift, and go to state 122

    $default  reduce using rule 50 (relExp)


State 61

   53 bitshiftExp: sumExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   54 pls_min: . ADD_OP
   55        | . SUB_OP
   59 sumExp: sumExp . pls_min mulExp

    ADD_OP  shift, and go to state 123
    SUB_OP  shift, and go to state 124

    $default  reduce using rule 53 (bitshiftExp)

    pls_min  go to state 125


State 62

   56 mul_div: . MUL_OP
   57        | . DIV_OP
   58        | . MOD_OP
   60 sumExp: mulExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, ADD_OP, SUB_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   61 mulExp: mulExp . mul_div unaryExp

    MUL_OP  shift, and go to state 126
    DIV_OP  shift, and go to state 127
    MOD_OP  shift, and go to state 128

    $default  reduce using rule 60 (sumExp)

    mul_div  go to state 129


State 63

   62 mulExp: unaryExp .

    $default  reduce using rule 62 (mulExp)


State 64

   67 unaryExp: value .

    $default  reduce using rule 67 (unaryExp)


State 65

   99 statement: if_statement .

    $default  reduce using rule 99 (statement)


State 66

  100 statement: while_statement .

    $default  reduce using rule 100 (statement)


State 67

  101 statement: for_statement .

    $default  reduce using rule 101 (statement)


State 68

  102 statement: do_statement .

    $default  reduce using rule 102 (statement)


State 69

  103 statement: switch_statement .

    $default  reduce using rule 103 (statement)


State 70

  104 statement: return_statement .

    $default  reduce using rule 104 (statement)


State 71

  109 statement: break_statement .

    $default  reduce using rule 109 (statement)


State 72

  110 statement: continue_statement .

    $default  reduce using rule 110 (statement)


State 73

  105 statement: expression_statement .

    $default  reduce using rule 105 (statement)


State 74

   15 beforedecl: . CONST
   16           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STR]
   17 declaration: . beforedecl type IDENT SEMICOLON
   18            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   19 declarations: . declaration
   20             | . declarations declaration
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   78 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   79 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   82 for_statement: . FOR LEFT_PAREN optional_type assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   83 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   84 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   92 return_statement: . RETURN return_val SEMICOLON
   93 break_statement: . BREAK SEMICOLON
   94 continue_statement: . CONTINUE SEMICOLON
   95 expression_statement: . expression SEMICOLON
   98 statements: statements . statement
   99 statement: . if_statement
  100          | . while_statement
  101          | . for_statement
  102          | . do_statement
  103          | . switch_statement
  104          | . return_statement
  105          | . expression_statement
  106          | . declarations
  107          | . enum_statement
  108          | . func_call
  109          | . break_statement
  110          | . continue_statement
  117 function_tail: LEFT_CURLY_BRACKET statements . RIGHT_CURLY_BRACKET
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON

    CONST                shift, and go to state 1
    IDENT                shift, and go to state 33
    CONST_INT            shift, and go to state 34
    CONST_FLOAT          shift, and go to state 35
    CONST_CHAR           shift, and go to state 36
    STRING_LITERAL       shift, and go to state 37
    IF                   shift, and go to state 38
    WHILE                shift, and go to state 39
    FOR                  shift, and go to state 40
    DO                   shift, and go to state 41
    SWITCH               shift, and go to state 42
    RETURN               shift, and go to state 43
    BREAK                shift, and go to state 44
    CONTINUE             shift, and go to state 45
    TRUE_TOKEN           shift, and go to state 46
    FALSE_TOKEN          shift, and go to state 47
    ENUM                 shift, and go to state 2
    LEFT_PAREN           shift, and go to state 48
    RIGHT_CURLY_BRACKET  shift, and go to state 130
    INC_OP               shift, and go to state 49
    DEC_OP               shift, and go to state 50
    NOT_OP               shift, and go to state 51

    $default  reduce using rule 16 (beforedecl)

    beforedecl            go to state 7
    declaration           go to state 8
    declarations          go to state 52
    bool_expression       go to state 53
    assign                go to state 54
    expression            go to state 55
    simpleExp             go to state 56
    andExp                go to state 57
    bitRelExp             go to state 58
    relExp                go to state 59
    bitshiftExp           go to state 60
    sumExp                go to state 61
    mulExp                go to state 62
    unaryExp              go to state 63
    value                 go to state 64
    if_statement          go to state 65
    while_statement       go to state 66
    for_statement         go to state 67
    do_statement          go to state 68
    switch_statement      go to state 69
    return_statement      go to state 70
    break_statement       go to state 71
    continue_statement    go to state 72
    expression_statement  go to state 73
    statement             go to state 131
    enum_statement        go to state 76
    func_call             go to state 77


State 75

   97 statements: statement .

    $default  reduce using rule 97 (statements)


State 76

  107 statement: enum_statement .

    $default  reduce using rule 107 (statement)


State 77

  108 statement: func_call .

    $default  reduce using rule 108 (statement)


State 78

  125 one_val: IDENT .  [RIGHT_CURLY_BRACKET, COMMA]
  126        | IDENT . ASSIGN_OP value

    ASSIGN_OP  shift, and go to state 132

    $default  reduce using rule 125 (one_val)


State 79

  122 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET enum_list . RIGHT_CURLY_BRACKET
  124 enum_list: enum_list . COMMA one_val

    RIGHT_CURLY_BRACKET  shift, and go to state 133
    COMMA                shift, and go to state 134


State 80

  123 enum_list: one_val .

    $default  reduce using rule 123 (enum_list)


State 81

  121 parameter: type . IDENT

    IDENT  shift, and go to state 135


State 82

  116 function_head: FUNC IDENT LEFT_PAREN param_empty . RIGHT_PAREN type

    RIGHT_PAREN  shift, and go to state 136


State 83

  114 param_empty: parameters .  [RIGHT_PAREN]
  119 parameters: parameters . COMMA parameter

    COMMA  shift, and go to state 137

    $default  reduce using rule 114 (param_empty)


State 84

  118 parameters: parameter .

    $default  reduce using rule 118 (parameters)


State 85

   17 declaration: beforedecl type IDENT SEMICOLON .

    $default  reduce using rule 17 (declaration)


State 86

   18 declaration: beforedecl type IDENT ASSIGN_OP . expression SEMICOLON
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL

    IDENT           shift, and go to state 97
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    bool_expression  go to state 53
    assign           go to state 54
    expression       go to state 138
    simpleExp        go to state 56
    andExp           go to state 57
    bitRelExp        go to state 58
    relExp           go to state 59
    bitshiftExp      go to state 60
    sumExp           go to state 61
    mulExp           go to state 62
    unaryExp         go to state 63
    value            go to state 64


State 87

   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
  127 func_call: IDENT LEFT_PAREN . arguments RIGHT_PAREN SEMICOLON
  129 arguments: . argument
  130          | . arguments COMMA argument
  131          | . %empty  [RIGHT_PAREN, COMMA]
  132 argument: . expression

    IDENT           shift, and go to state 97
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    $default  reduce using rule 131 (arguments)

    bool_expression  go to state 53
    assign           go to state 54
    expression       go to state 139
    simpleExp        go to state 56
    andExp           go to state 57
    bitRelExp        go to state 58
    relExp           go to state 59
    bitshiftExp      go to state 60
    sumExp           go to state 61
    mulExp           go to state 62
    unaryExp         go to state 63
    value            go to state 64
    arguments        go to state 140
    argument         go to state 141


State 88

   28 expression: IDENT INC_OP .

    $default  reduce using rule 28 (expression)


State 89

   29 expression: IDENT DEC_OP .

    $default  reduce using rule 29 (expression)


State 90

   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   26       | IDENT ASSIGN_OP . expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
  128 func_call: IDENT ASSIGN_OP . IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON

    IDENT           shift, and go to state 142
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    bool_expression  go to state 53
    assign           go to state 54
    expression       go to state 143
    simpleExp        go to state 56
    andExp           go to state 57
    bitRelExp        go to state 58
    relExp           go to state 59
    bitshiftExp      go to state 60
    sumExp           go to state 61
    mulExp           go to state 62
    unaryExp         go to state 63
    value            go to state 64


State 91

   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   78 if_statement: IF LEFT_PAREN . bool_expression RIGHT_PAREN tail else_if else_part

    IDENT           shift, and go to state 144
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    bool_expression  go to state 145
    relExp           go to state 146
    bitshiftExp      go to state 60
    sumExp           go to state 61
    mulExp           go to state 62
    unaryExp         go to state 63
    value            go to state 64


State 92

   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   79 while_statement: WHILE LEFT_PAREN . bool_expression RIGHT_PAREN tail_inloop

    IDENT           shift, and go to state 144
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    bool_expression  go to state 147
    relExp           go to state 146
    bitshiftExp      go to state 60
    sumExp           go to state 61
    mulExp           go to state 62
    unaryExp         go to state 63
    value            go to state 64


State 93

    8 type: . INTEGER
    9     | . FLOAT
   10     | . DOUBLE
   11     | . VOID
   12     | . BOOLEAN
   13     | . CHAR
   14     | . STR
   80 optional_type: . %empty  [IDENT]
   81              | . type
   82 for_statement: FOR LEFT_PAREN . optional_type assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

    INTEGER  shift, and go to state 18
    FLOAT    shift, and go to state 19
    DOUBLE   shift, and go to state 20
    VOID     shift, and go to state 21
    BOOLEAN  shift, and go to state 22
    CHAR     shift, and go to state 23
    STR      shift, and go to state 24

    $default  reduce using rule 80 (optional_type)

    type           go to state 148
    optional_type  go to state 149


State 94

   15 beforedecl: . CONST
   16           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STR]
   17 declaration: . beforedecl type IDENT SEMICOLON
   18            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   19 declarations: . declaration
   20             | . declarations declaration
   22 tail_inloop: LEFT_CURLY_BRACKET . statements RIGHT_CURLY_BRACKET
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   78 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   79 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   82 for_statement: . FOR LEFT_PAREN optional_type assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   83 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   84 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   92 return_statement: . RETURN return_val SEMICOLON
   93 break_statement: . BREAK SEMICOLON
   94 continue_statement: . CONTINUE SEMICOLON
   95 expression_statement: . expression SEMICOLON
   96 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STR, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   97           | . statement
   98           | . statements statement
   99 statement: . if_statement
  100          | . while_statement
  101          | . for_statement
  102          | . do_statement
  103          | . switch_statement
  104          | . return_statement
  105          | . expression_statement
  106          | . declarations
  107          | . enum_statement
  108          | . func_call
  109          | . break_statement
  110          | . continue_statement
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 33
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    IF              shift, and go to state 38
    WHILE           shift, and go to state 39
    FOR             shift, and go to state 40
    DO              shift, and go to state 41
    SWITCH          shift, and go to state 42
    RETURN          shift, and go to state 43
    BREAK           shift, and go to state 44
    CONTINUE        shift, and go to state 45
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    ENUM            shift, and go to state 2
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    INTEGER              reduce using rule 16 (beforedecl)
    INTEGER              [reduce using rule 96 (statements)]
    FLOAT                reduce using rule 16 (beforedecl)
    FLOAT                [reduce using rule 96 (statements)]
    DOUBLE               reduce using rule 16 (beforedecl)
    DOUBLE               [reduce using rule 96 (statements)]
    VOID                 reduce using rule 16 (beforedecl)
    VOID                 [reduce using rule 96 (statements)]
    BOOLEAN              reduce using rule 16 (beforedecl)
    BOOLEAN              [reduce using rule 96 (statements)]
    CHAR                 reduce using rule 16 (beforedecl)
    CHAR                 [reduce using rule 96 (statements)]
    CONST                [reduce using rule 96 (statements)]
    STR                  reduce using rule 16 (beforedecl)
    STR                  [reduce using rule 96 (statements)]
    IDENT                [reduce using rule 96 (statements)]
    CONST_INT            [reduce using rule 96 (statements)]
    CONST_FLOAT          [reduce using rule 96 (statements)]
    CONST_CHAR           [reduce using rule 96 (statements)]
    STRING_LITERAL       [reduce using rule 96 (statements)]
    IF                   [reduce using rule 96 (statements)]
    WHILE                [reduce using rule 96 (statements)]
    FOR                  [reduce using rule 96 (statements)]
    DO                   [reduce using rule 96 (statements)]
    SWITCH               [reduce using rule 96 (statements)]
    RETURN               [reduce using rule 96 (statements)]
    BREAK                [reduce using rule 96 (statements)]
    CONTINUE             [reduce using rule 96 (statements)]
    TRUE_TOKEN           [reduce using rule 96 (statements)]
    FALSE_TOKEN          [reduce using rule 96 (statements)]
    ENUM                 [reduce using rule 96 (statements)]
    LEFT_PAREN           [reduce using rule 96 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 96 (statements)
    INC_OP               [reduce using rule 96 (statements)]
    DEC_OP               [reduce using rule 96 (statements)]
    NOT_OP               [reduce using rule 96 (statements)]
    $default             reduce using rule 16 (beforedecl)

    beforedecl            go to state 7
    declaration           go to state 8
    declarations          go to state 52
    bool_expression       go to state 53
    assign                go to state 54
    expression            go to state 55
    simpleExp             go to state 56
    andExp                go to state 57
    bitRelExp             go to state 58
    relExp                go to state 59
    bitshiftExp           go to state 60
    sumExp                go to state 61
    mulExp                go to state 62
    unaryExp              go to state 63
    value                 go to state 64
    if_statement          go to state 65
    while_statement       go to state 66
    for_statement         go to state 67
    do_statement          go to state 68
    switch_statement      go to state 69
    return_statement      go to state 70
    break_statement       go to state 71
    continue_statement    go to state 72
    expression_statement  go to state 73
    statements            go to state 150
    statement             go to state 75
    enum_statement        go to state 76
    func_call             go to state 77


State 95

   83 do_statement: DO tail_inloop . WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON

    WHILE  shift, and go to state 151


State 96

   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   84 switch_statement: SWITCH LEFT_PAREN . expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    IDENT           shift, and go to state 97
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    bool_expression  go to state 53
    assign           go to state 54
    expression       go to state 152
    simpleExp        go to state 56
    andExp           go to state 57
    bitRelExp        go to state 58
    relExp           go to state 59
    bitshiftExp      go to state 60
    sumExp           go to state 61
    mulExp           go to state 62
    unaryExp         go to state 63
    value            go to state 64


State 97

   26 assign: IDENT . ASSIGN_OP expression
   28 expression: IDENT . INC_OP
   29           | IDENT . DEC_OP
   31           | IDENT .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON]
   66 unaryExp: IDENT .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, ADD_OP, SUB_OP, MUL_OP, DIV_OP, MOD_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]

    INC_OP     shift, and go to state 88
    DEC_OP     shift, and go to state 89
    ASSIGN_OP  shift, and go to state 153

    RIGHT_PAREN  reduce using rule 31 (expression)
    RIGHT_PAREN  [reduce using rule 66 (unaryExp)]
    SEMICOLON    reduce using rule 31 (expression)
    SEMICOLON    [reduce using rule 66 (unaryExp)]
    COMMA        reduce using rule 31 (expression)
    COMMA        [reduce using rule 66 (unaryExp)]
    COLON        reduce using rule 31 (expression)
    COLON        [reduce using rule 66 (unaryExp)]
    $default     reduce using rule 66 (unaryExp)


State 98

   90 return_val: expression .

    $default  reduce using rule 90 (return_val)


State 99

   92 return_statement: RETURN return_val . SEMICOLON

    SEMICOLON  shift, and go to state 154


State 100

   93 break_statement: BREAK SEMICOLON .

    $default  reduce using rule 93 (break_statement)


State 101

   94 continue_statement: CONTINUE SEMICOLON .

    $default  reduce using rule 94 (continue_statement)


State 102

   68 unaryExp: LEFT_PAREN expression . RIGHT_PAREN

    RIGHT_PAREN  shift, and go to state 155


State 103

   63 unaryExp: INC_OP IDENT .

    $default  reduce using rule 63 (unaryExp)


State 104

   64 unaryExp: DEC_OP IDENT .

    $default  reduce using rule 64 (unaryExp)


State 105

   65 unaryExp: NOT_OP IDENT .

    $default  reduce using rule 65 (unaryExp)


State 106

   95 expression_statement: expression SEMICOLON .

    $default  reduce using rule 95 (expression_statement)


State 107

   33 simpleExp: simpleExp OR_OP . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL

    IDENT           shift, and go to state 144
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    andExp       go to state 156
    bitRelExp    go to state 58
    relExp       go to state 157
    bitshiftExp  go to state 60
    sumExp       go to state 61
    mulExp       go to state 62
    unaryExp     go to state 63
    value        go to state 64


State 108

   35 andExp: andExp AND_OP .

    $default  reduce using rule 35 (andExp)


State 109

   37 bitRelExp: bitRelExp BIT_OR_OP . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL

    IDENT           shift, and go to state 144
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    relExp       go to state 158
    bitshiftExp  go to state 60
    sumExp       go to state 61
    mulExp       go to state 62
    unaryExp     go to state 63
    value        go to state 64


State 110

   38 bitRelExp: bitRelExp AND . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL

    IDENT           shift, and go to state 144
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    relExp       go to state 159
    bitshiftExp  go to state 60
    sumExp       go to state 61
    mulExp       go to state 62
    unaryExp     go to state 63
    value        go to state 64


State 111

   39 bitRelExp: bitRelExp BIT_XOR_OP . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL

    IDENT           shift, and go to state 144
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    relExp       go to state 160
    bitshiftExp  go to state 60
    sumExp       go to state 61
    mulExp       go to state 62
    unaryExp     go to state 63
    value        go to state 64


State 112

   47 op: OR_OP .

    $default  reduce using rule 47 (op)


State 113

   48 op: AND_OP .

    $default  reduce using rule 48 (op)


State 114

   41 op: EQ_OP .

    $default  reduce using rule 41 (op)


State 115

   42 op: NE_OP .

    $default  reduce using rule 42 (op)


State 116

   43 op: GT_OP .

    $default  reduce using rule 43 (op)


State 117

   44 op: LT_OP .

    $default  reduce using rule 44 (op)


State 118

   46 op: GE_OP .

    $default  reduce using rule 46 (op)


State 119

   45 op: LE_OP .

    $default  reduce using rule 45 (op)


State 120

   49 relExp: relExp op . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL

    IDENT           shift, and go to state 144
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    bitshiftExp  go to state 161
    sumExp       go to state 61
    mulExp       go to state 62
    unaryExp     go to state 63
    value        go to state 64


State 121

   51 bitshiftExp: bitshiftExp BIT_LSHIFT_OP . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL

    IDENT           shift, and go to state 144
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    sumExp    go to state 162
    mulExp    go to state 62
    unaryExp  go to state 63
    value     go to state 64


State 122

   52 bitshiftExp: bitshiftExp BIT_RSHIFT_OP . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL

    IDENT           shift, and go to state 144
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    sumExp    go to state 163
    mulExp    go to state 62
    unaryExp  go to state 63
    value     go to state 64


State 123

   54 pls_min: ADD_OP .

    $default  reduce using rule 54 (pls_min)


State 124

   55 pls_min: SUB_OP .

    $default  reduce using rule 55 (pls_min)


State 125

   59 sumExp: sumExp pls_min . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL

    IDENT           shift, and go to state 144
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    mulExp    go to state 164
    unaryExp  go to state 63
    value     go to state 64


State 126

   56 mul_div: MUL_OP .

    $default  reduce using rule 56 (mul_div)


State 127

   57 mul_div: DIV_OP .

    $default  reduce using rule 57 (mul_div)


State 128

   58 mul_div: MOD_OP .

    $default  reduce using rule 58 (mul_div)


State 129

   61 mulExp: mulExp mul_div . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL

    IDENT           shift, and go to state 144
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    unaryExp  go to state 165
    value     go to state 64


State 130

  117 function_tail: LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET .

    $default  reduce using rule 117 (function_tail)


State 131

   98 statements: statements statement .

    $default  reduce using rule 98 (statements)


State 132

   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
  126 one_val: IDENT ASSIGN_OP . value

    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37

    value  go to state 166


State 133

  122 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET .

    $default  reduce using rule 122 (enum_statement)


State 134

  124 enum_list: enum_list COMMA . one_val
  125 one_val: . IDENT
  126        | . IDENT ASSIGN_OP value

    IDENT  shift, and go to state 78

    one_val  go to state 167


State 135

  121 parameter: type IDENT .

    $default  reduce using rule 121 (parameter)


State 136

    8 type: . INTEGER
    9     | . FLOAT
   10     | . DOUBLE
   11     | . VOID
   12     | . BOOLEAN
   13     | . CHAR
   14     | . STR
  116 function_head: FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN . type

    INTEGER  shift, and go to state 18
    FLOAT    shift, and go to state 19
    DOUBLE   shift, and go to state 20
    VOID     shift, and go to state 21
    BOOLEAN  shift, and go to state 22
    CHAR     shift, and go to state 23
    STR      shift, and go to state 24

    type  go to state 168


State 137

    8 type: . INTEGER
    9     | . FLOAT
   10     | . DOUBLE
   11     | . VOID
   12     | . BOOLEAN
   13     | . CHAR
   14     | . STR
  119 parameters: parameters COMMA . parameter
  121 parameter: . type IDENT

    INTEGER  shift, and go to state 18
    FLOAT    shift, and go to state 19
    DOUBLE   shift, and go to state 20
    VOID     shift, and go to state 21
    BOOLEAN  shift, and go to state 22
    CHAR     shift, and go to state 23
    STR      shift, and go to state 24

    type       go to state 81
    parameter  go to state 169


State 138

   18 declaration: beforedecl type IDENT ASSIGN_OP expression . SEMICOLON

    SEMICOLON  shift, and go to state 170


State 139

  132 argument: expression .

    $default  reduce using rule 132 (argument)


State 140

  127 func_call: IDENT LEFT_PAREN arguments . RIGHT_PAREN SEMICOLON
  130 arguments: arguments . COMMA argument

    RIGHT_PAREN  shift, and go to state 171
    COMMA        shift, and go to state 172


State 141

  129 arguments: argument .

    $default  reduce using rule 129 (arguments)


State 142

   26 assign: IDENT . ASSIGN_OP expression
   28 expression: IDENT . INC_OP
   29           | IDENT . DEC_OP
   31           | IDENT .  [SEMICOLON]
   66 unaryExp: IDENT .  [SEMICOLON, ADD_OP, SUB_OP, MUL_OP, DIV_OP, MOD_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
  128 func_call: IDENT ASSIGN_OP IDENT . LEFT_PAREN arguments RIGHT_PAREN SEMICOLON

    LEFT_PAREN  shift, and go to state 173
    INC_OP      shift, and go to state 88
    DEC_OP      shift, and go to state 89
    ASSIGN_OP   shift, and go to state 153

    SEMICOLON  reduce using rule 31 (expression)
    SEMICOLON  [reduce using rule 66 (unaryExp)]
    $default   reduce using rule 66 (unaryExp)


State 143

   26 assign: IDENT ASSIGN_OP expression .

    $default  reduce using rule 26 (assign)


State 144

   66 unaryExp: IDENT .

    $default  reduce using rule 66 (unaryExp)


State 145

   78 if_statement: IF LEFT_PAREN bool_expression . RIGHT_PAREN tail else_if else_part

    RIGHT_PAREN  shift, and go to state 174


State 146

   23 bool_expression: relExp .  [RIGHT_PAREN, SEMICOLON]
   41 op: . EQ_OP
   42   | . NE_OP
   43   | . GT_OP
   44   | . LT_OP
   45   | . LE_OP
   46   | . GE_OP
   47   | . OR_OP
   48   | . AND_OP
   49 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 112
    AND_OP  shift, and go to state 113
    EQ_OP   shift, and go to state 114
    NE_OP   shift, and go to state 115
    GT_OP   shift, and go to state 116
    LT_OP   shift, and go to state 117
    GE_OP   shift, and go to state 118
    LE_OP   shift, and go to state 119

    $default  reduce using rule 23 (bool_expression)

    op  go to state 120


State 147

   79 while_statement: WHILE LEFT_PAREN bool_expression . RIGHT_PAREN tail_inloop

    RIGHT_PAREN  shift, and go to state 175


State 148

   81 optional_type: type .

    $default  reduce using rule 81 (optional_type)


State 149

   26 assign: . IDENT ASSIGN_OP expression
   82 for_statement: FOR LEFT_PAREN optional_type . assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

    IDENT  shift, and go to state 176

    assign  go to state 177


State 150

   15 beforedecl: . CONST
   16           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STR]
   17 declaration: . beforedecl type IDENT SEMICOLON
   18            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   19 declarations: . declaration
   20             | . declarations declaration
   22 tail_inloop: LEFT_CURLY_BRACKET statements . RIGHT_CURLY_BRACKET
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   78 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   79 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   82 for_statement: . FOR LEFT_PAREN optional_type assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   83 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   84 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   92 return_statement: . RETURN return_val SEMICOLON
   93 break_statement: . BREAK SEMICOLON
   94 continue_statement: . CONTINUE SEMICOLON
   95 expression_statement: . expression SEMICOLON
   98 statements: statements . statement
   99 statement: . if_statement
  100          | . while_statement
  101          | . for_statement
  102          | . do_statement
  103          | . switch_statement
  104          | . return_statement
  105          | . expression_statement
  106          | . declarations
  107          | . enum_statement
  108          | . func_call
  109          | . break_statement
  110          | . continue_statement
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON

    CONST                shift, and go to state 1
    IDENT                shift, and go to state 33
    CONST_INT            shift, and go to state 34
    CONST_FLOAT          shift, and go to state 35
    CONST_CHAR           shift, and go to state 36
    STRING_LITERAL       shift, and go to state 37
    IF                   shift, and go to state 38
    WHILE                shift, and go to state 39
    FOR                  shift, and go to state 40
    DO                   shift, and go to state 41
    SWITCH               shift, and go to state 42
    RETURN               shift, and go to state 43
    BREAK                shift, and go to state 44
    CONTINUE             shift, and go to state 45
    TRUE_TOKEN           shift, and go to state 46
    FALSE_TOKEN          shift, and go to state 47
    ENUM                 shift, and go to state 2
    LEFT_PAREN           shift, and go to state 48
    RIGHT_CURLY_BRACKET  shift, and go to state 178
    INC_OP               shift, and go to state 49
    DEC_OP               shift, and go to state 50
    NOT_OP               shift, and go to state 51

    $default  reduce using rule 16 (beforedecl)

    beforedecl            go to state 7
    declaration           go to state 8
    declarations          go to state 52
    bool_expression       go to state 53
    assign                go to state 54
    expression            go to state 55
    simpleExp             go to state 56
    andExp                go to state 57
    bitRelExp             go to state 58
    relExp                go to state 59
    bitshiftExp           go to state 60
    sumExp                go to state 61
    mulExp                go to state 62
    unaryExp              go to state 63
    value                 go to state 64
    if_statement          go to state 65
    while_statement       go to state 66
    for_statement         go to state 67
    do_statement          go to state 68
    switch_statement      go to state 69
    return_statement      go to state 70
    break_statement       go to state 71
    continue_statement    go to state 72
    expression_statement  go to state 73
    statement             go to state 131
    enum_statement        go to state 76
    func_call             go to state 77


State 151

   83 do_statement: DO tail_inloop WHILE . LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON

    LEFT_PAREN  shift, and go to state 179


State 152

   84 switch_statement: SWITCH LEFT_PAREN expression . RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    RIGHT_PAREN  shift, and go to state 180


State 153

   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   26       | IDENT ASSIGN_OP . expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL

    IDENT           shift, and go to state 97
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    bool_expression  go to state 53
    assign           go to state 54
    expression       go to state 143
    simpleExp        go to state 56
    andExp           go to state 57
    bitRelExp        go to state 58
    relExp           go to state 59
    bitshiftExp      go to state 60
    sumExp           go to state 61
    mulExp           go to state 62
    unaryExp         go to state 63
    value            go to state 64


State 154

   92 return_statement: RETURN return_val SEMICOLON .

    $default  reduce using rule 92 (return_statement)


State 155

   68 unaryExp: LEFT_PAREN expression RIGHT_PAREN .

    $default  reduce using rule 68 (unaryExp)


State 156

   33 simpleExp: simpleExp OR_OP andExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP]
   35 andExp: andExp . AND_OP

    AND_OP  shift, and go to state 108

    $default  reduce using rule 33 (simpleExp)


State 157

   40 bitRelExp: relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   41 op: . EQ_OP
   42   | . NE_OP
   43   | . GT_OP
   44   | . LT_OP
   45   | . LE_OP
   46   | . GE_OP
   47   | . OR_OP
   48   | . AND_OP
   49 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 112
    AND_OP  shift, and go to state 113
    EQ_OP   shift, and go to state 114
    NE_OP   shift, and go to state 115
    GT_OP   shift, and go to state 116
    LT_OP   shift, and go to state 117
    GE_OP   shift, and go to state 118
    LE_OP   shift, and go to state 119

    OR_OP     [reduce using rule 40 (bitRelExp)]
    AND_OP    [reduce using rule 40 (bitRelExp)]
    $default  reduce using rule 40 (bitRelExp)

    op  go to state 120


State 158

   37 bitRelExp: bitRelExp BIT_OR_OP relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   41 op: . EQ_OP
   42   | . NE_OP
   43   | . GT_OP
   44   | . LT_OP
   45   | . LE_OP
   46   | . GE_OP
   47   | . OR_OP
   48   | . AND_OP
   49 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 112
    AND_OP  shift, and go to state 113
    EQ_OP   shift, and go to state 114
    NE_OP   shift, and go to state 115
    GT_OP   shift, and go to state 116
    LT_OP   shift, and go to state 117
    GE_OP   shift, and go to state 118
    LE_OP   shift, and go to state 119

    OR_OP     [reduce using rule 37 (bitRelExp)]
    AND_OP    [reduce using rule 37 (bitRelExp)]
    $default  reduce using rule 37 (bitRelExp)

    op  go to state 120


State 159

   38 bitRelExp: bitRelExp AND relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   41 op: . EQ_OP
   42   | . NE_OP
   43   | . GT_OP
   44   | . LT_OP
   45   | . LE_OP
   46   | . GE_OP
   47   | . OR_OP
   48   | . AND_OP
   49 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 112
    AND_OP  shift, and go to state 113
    EQ_OP   shift, and go to state 114
    NE_OP   shift, and go to state 115
    GT_OP   shift, and go to state 116
    LT_OP   shift, and go to state 117
    GE_OP   shift, and go to state 118
    LE_OP   shift, and go to state 119

    OR_OP     [reduce using rule 38 (bitRelExp)]
    AND_OP    [reduce using rule 38 (bitRelExp)]
    $default  reduce using rule 38 (bitRelExp)

    op  go to state 120


State 160

   39 bitRelExp: bitRelExp BIT_XOR_OP relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   41 op: . EQ_OP
   42   | . NE_OP
   43   | . GT_OP
   44   | . LT_OP
   45   | . LE_OP
   46   | . GE_OP
   47   | . OR_OP
   48   | . AND_OP
   49 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 112
    AND_OP  shift, and go to state 113
    EQ_OP   shift, and go to state 114
    NE_OP   shift, and go to state 115
    GT_OP   shift, and go to state 116
    LT_OP   shift, and go to state 117
    GE_OP   shift, and go to state 118
    LE_OP   shift, and go to state 119

    OR_OP     [reduce using rule 39 (bitRelExp)]
    AND_OP    [reduce using rule 39 (bitRelExp)]
    $default  reduce using rule 39 (bitRelExp)

    op  go to state 120


State 161

   49 relExp: relExp op bitshiftExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   51 bitshiftExp: bitshiftExp . BIT_LSHIFT_OP sumExp
   52            | bitshiftExp . BIT_RSHIFT_OP sumExp

    BIT_LSHIFT_OP  shift, and go to state 121
    BIT_RSHIFT_OP  shift, and go to state 122

    $default  reduce using rule 49 (relExp)


State 162

   51 bitshiftExp: bitshiftExp BIT_LSHIFT_OP sumExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   54 pls_min: . ADD_OP
   55        | . SUB_OP
   59 sumExp: sumExp . pls_min mulExp

    ADD_OP  shift, and go to state 123
    SUB_OP  shift, and go to state 124

    $default  reduce using rule 51 (bitshiftExp)

    pls_min  go to state 125


State 163

   52 bitshiftExp: bitshiftExp BIT_RSHIFT_OP sumExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   54 pls_min: . ADD_OP
   55        | . SUB_OP
   59 sumExp: sumExp . pls_min mulExp

    ADD_OP  shift, and go to state 123
    SUB_OP  shift, and go to state 124

    $default  reduce using rule 52 (bitshiftExp)

    pls_min  go to state 125


State 164

   56 mul_div: . MUL_OP
   57        | . DIV_OP
   58        | . MOD_OP
   59 sumExp: sumExp pls_min mulExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, ADD_OP, SUB_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   61 mulExp: mulExp . mul_div unaryExp

    MUL_OP  shift, and go to state 126
    DIV_OP  shift, and go to state 127
    MOD_OP  shift, and go to state 128

    $default  reduce using rule 59 (sumExp)

    mul_div  go to state 129


State 165

   61 mulExp: mulExp mul_div unaryExp .

    $default  reduce using rule 61 (mulExp)


State 166

  126 one_val: IDENT ASSIGN_OP value .

    $default  reduce using rule 126 (one_val)


State 167

  124 enum_list: enum_list COMMA one_val .

    $default  reduce using rule 124 (enum_list)


State 168

  116 function_head: FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN type .

    $default  reduce using rule 116 (function_head)


State 169

  119 parameters: parameters COMMA parameter .

    $default  reduce using rule 119 (parameters)


State 170

   18 declaration: beforedecl type IDENT ASSIGN_OP expression SEMICOLON .

    $default  reduce using rule 18 (declaration)


State 171

  127 func_call: IDENT LEFT_PAREN arguments RIGHT_PAREN . SEMICOLON

    SEMICOLON  shift, and go to state 181


State 172

   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
  130 arguments: arguments COMMA . argument
  132 argument: . expression

    IDENT           shift, and go to state 97
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    bool_expression  go to state 53
    assign           go to state 54
    expression       go to state 139
    simpleExp        go to state 56
    andExp           go to state 57
    bitRelExp        go to state 58
    relExp           go to state 59
    bitshiftExp      go to state 60
    sumExp           go to state 61
    mulExp           go to state 62
    unaryExp         go to state 63
    value            go to state 64
    argument         go to state 182


State 173

   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
  128 func_call: IDENT ASSIGN_OP IDENT LEFT_PAREN . arguments RIGHT_PAREN SEMICOLON
  129 arguments: . argument
  130          | . arguments COMMA argument
  131          | . %empty  [RIGHT_PAREN, COMMA]
  132 argument: . expression

    IDENT           shift, and go to state 97
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    $default  reduce using rule 131 (arguments)

    bool_expression  go to state 53
    assign           go to state 54
    expression       go to state 139
    simpleExp        go to state 56
    andExp           go to state 57
    bitRelExp        go to state 58
    relExp           go to state 59
    bitshiftExp      go to state 60
    sumExp           go to state 61
    mulExp           go to state 62
    unaryExp         go to state 63
    value            go to state 64
    arguments        go to state 183
    argument         go to state 141


State 174

   21 tail: . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   78 if_statement: IF LEFT_PAREN bool_expression RIGHT_PAREN . tail else_if else_part

    LEFT_CURLY_BRACKET  shift, and go to state 184

    tail  go to state 185


State 175

   22 tail_inloop: . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   79 while_statement: WHILE LEFT_PAREN bool_expression RIGHT_PAREN . tail_inloop

    LEFT_CURLY_BRACKET  shift, and go to state 94

    tail_inloop  go to state 186


State 176

   26 assign: IDENT . ASSIGN_OP expression

    ASSIGN_OP  shift, and go to state 153


State 177

   82 for_statement: FOR LEFT_PAREN optional_type assign . SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

    SEMICOLON  shift, and go to state 187


State 178

   22 tail_inloop: LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET .

    $default  reduce using rule 22 (tail_inloop)


State 179

   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   83 do_statement: DO tail_inloop WHILE LEFT_PAREN . bool_expression RIGHT_PAREN SEMICOLON

    IDENT           shift, and go to state 144
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    bool_expression  go to state 188
    relExp           go to state 146
    bitshiftExp      go to state 60
    sumExp           go to state 61
    mulExp           go to state 62
    unaryExp         go to state 63
    value            go to state 64


State 180

   84 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN . LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 189


State 181

  127 func_call: IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON .

    $default  reduce using rule 127 (func_call)


State 182

  130 arguments: arguments COMMA argument .

    $default  reduce using rule 130 (arguments)


State 183

  128 func_call: IDENT ASSIGN_OP IDENT LEFT_PAREN arguments . RIGHT_PAREN SEMICOLON
  130 arguments: arguments . COMMA argument

    RIGHT_PAREN  shift, and go to state 190
    COMMA        shift, and go to state 172


State 184

   15 beforedecl: . CONST
   16           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STR]
   17 declaration: . beforedecl type IDENT SEMICOLON
   18            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   19 declarations: . declaration
   20             | . declarations declaration
   21 tail: LEFT_CURLY_BRACKET . statements RIGHT_CURLY_BRACKET
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   78 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   79 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   82 for_statement: . FOR LEFT_PAREN optional_type assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   83 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   84 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   92 return_statement: . RETURN return_val SEMICOLON
   93 break_statement: . BREAK SEMICOLON
   94 continue_statement: . CONTINUE SEMICOLON
   95 expression_statement: . expression SEMICOLON
   96 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STR, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   97           | . statement
   98           | . statements statement
   99 statement: . if_statement
  100          | . while_statement
  101          | . for_statement
  102          | . do_statement
  103          | . switch_statement
  104          | . return_statement
  105          | . expression_statement
  106          | . declarations
  107          | . enum_statement
  108          | . func_call
  109          | . break_statement
  110          | . continue_statement
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 33
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    IF              shift, and go to state 38
    WHILE           shift, and go to state 39
    FOR             shift, and go to state 40
    DO              shift, and go to state 41
    SWITCH          shift, and go to state 42
    RETURN          shift, and go to state 43
    BREAK           shift, and go to state 44
    CONTINUE        shift, and go to state 45
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    ENUM            shift, and go to state 2
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    INTEGER              reduce using rule 16 (beforedecl)
    INTEGER              [reduce using rule 96 (statements)]
    FLOAT                reduce using rule 16 (beforedecl)
    FLOAT                [reduce using rule 96 (statements)]
    DOUBLE               reduce using rule 16 (beforedecl)
    DOUBLE               [reduce using rule 96 (statements)]
    VOID                 reduce using rule 16 (beforedecl)
    VOID                 [reduce using rule 96 (statements)]
    BOOLEAN              reduce using rule 16 (beforedecl)
    BOOLEAN              [reduce using rule 96 (statements)]
    CHAR                 reduce using rule 16 (beforedecl)
    CHAR                 [reduce using rule 96 (statements)]
    CONST                [reduce using rule 96 (statements)]
    STR                  reduce using rule 16 (beforedecl)
    STR                  [reduce using rule 96 (statements)]
    IDENT                [reduce using rule 96 (statements)]
    CONST_INT            [reduce using rule 96 (statements)]
    CONST_FLOAT          [reduce using rule 96 (statements)]
    CONST_CHAR           [reduce using rule 96 (statements)]
    STRING_LITERAL       [reduce using rule 96 (statements)]
    IF                   [reduce using rule 96 (statements)]
    WHILE                [reduce using rule 96 (statements)]
    FOR                  [reduce using rule 96 (statements)]
    DO                   [reduce using rule 96 (statements)]
    SWITCH               [reduce using rule 96 (statements)]
    RETURN               [reduce using rule 96 (statements)]
    BREAK                [reduce using rule 96 (statements)]
    CONTINUE             [reduce using rule 96 (statements)]
    TRUE_TOKEN           [reduce using rule 96 (statements)]
    FALSE_TOKEN          [reduce using rule 96 (statements)]
    ENUM                 [reduce using rule 96 (statements)]
    LEFT_PAREN           [reduce using rule 96 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 96 (statements)
    INC_OP               [reduce using rule 96 (statements)]
    DEC_OP               [reduce using rule 96 (statements)]
    NOT_OP               [reduce using rule 96 (statements)]
    $default             reduce using rule 16 (beforedecl)

    beforedecl            go to state 7
    declaration           go to state 8
    declarations          go to state 52
    bool_expression       go to state 53
    assign                go to state 54
    expression            go to state 55
    simpleExp             go to state 56
    andExp                go to state 57
    bitRelExp             go to state 58
    relExp                go to state 59
    bitshiftExp           go to state 60
    sumExp                go to state 61
    mulExp                go to state 62
    unaryExp              go to state 63
    value                 go to state 64
    if_statement          go to state 65
    while_statement       go to state 66
    for_statement         go to state 67
    do_statement          go to state 68
    switch_statement      go to state 69
    return_statement      go to state 70
    break_statement       go to state 71
    continue_statement    go to state 72
    expression_statement  go to state 73
    statements            go to state 191
    statement             go to state 75
    enum_statement        go to state 76
    func_call             go to state 77


State 185

   73 else_if: . ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   74        | . else_if ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   75        | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STR, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, CASE, DEFAULT, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   78 if_statement: IF LEFT_PAREN bool_expression RIGHT_PAREN tail . else_if else_part

    ELIF  shift, and go to state 192

    ELIF      [reduce using rule 75 (else_if)]
    $default  reduce using rule 75 (else_if)

    else_if  go to state 193


State 186

   79 while_statement: WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop .

    $default  reduce using rule 79 (while_statement)


State 187

   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   82 for_statement: FOR LEFT_PAREN optional_type assign SEMICOLON . bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

    IDENT           shift, and go to state 144
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    bool_expression  go to state 194
    relExp           go to state 146
    bitshiftExp      go to state 60
    sumExp           go to state 61
    mulExp           go to state 62
    unaryExp         go to state 63
    value            go to state 64


State 188

   83 do_statement: DO tail_inloop WHILE LEFT_PAREN bool_expression . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN  shift, and go to state 195


State 189

   84 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET . cases RIGHT_CURLY_BRACKET
   85 cases: . case
   86      | . cases case
   87      | . cases default
   89 case: . CASE expression COLON statements BREAK SEMICOLON

    CASE  shift, and go to state 196

    cases  go to state 197
    case   go to state 198


State 190

  128 func_call: IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN . SEMICOLON

    SEMICOLON  shift, and go to state 199


State 191

   15 beforedecl: . CONST
   16           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STR]
   17 declaration: . beforedecl type IDENT SEMICOLON
   18            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   19 declarations: . declaration
   20             | . declarations declaration
   21 tail: LEFT_CURLY_BRACKET statements . RIGHT_CURLY_BRACKET
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   78 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   79 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   82 for_statement: . FOR LEFT_PAREN optional_type assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   83 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   84 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   92 return_statement: . RETURN return_val SEMICOLON
   93 break_statement: . BREAK SEMICOLON
   94 continue_statement: . CONTINUE SEMICOLON
   95 expression_statement: . expression SEMICOLON
   98 statements: statements . statement
   99 statement: . if_statement
  100          | . while_statement
  101          | . for_statement
  102          | . do_statement
  103          | . switch_statement
  104          | . return_statement
  105          | . expression_statement
  106          | . declarations
  107          | . enum_statement
  108          | . func_call
  109          | . break_statement
  110          | . continue_statement
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON

    CONST                shift, and go to state 1
    IDENT                shift, and go to state 33
    CONST_INT            shift, and go to state 34
    CONST_FLOAT          shift, and go to state 35
    CONST_CHAR           shift, and go to state 36
    STRING_LITERAL       shift, and go to state 37
    IF                   shift, and go to state 38
    WHILE                shift, and go to state 39
    FOR                  shift, and go to state 40
    DO                   shift, and go to state 41
    SWITCH               shift, and go to state 42
    RETURN               shift, and go to state 43
    BREAK                shift, and go to state 44
    CONTINUE             shift, and go to state 45
    TRUE_TOKEN           shift, and go to state 46
    FALSE_TOKEN          shift, and go to state 47
    ENUM                 shift, and go to state 2
    LEFT_PAREN           shift, and go to state 48
    RIGHT_CURLY_BRACKET  shift, and go to state 200
    INC_OP               shift, and go to state 49
    DEC_OP               shift, and go to state 50
    NOT_OP               shift, and go to state 51

    $default  reduce using rule 16 (beforedecl)

    beforedecl            go to state 7
    declaration           go to state 8
    declarations          go to state 52
    bool_expression       go to state 53
    assign                go to state 54
    expression            go to state 55
    simpleExp             go to state 56
    andExp                go to state 57
    bitRelExp             go to state 58
    relExp                go to state 59
    bitshiftExp           go to state 60
    sumExp                go to state 61
    mulExp                go to state 62
    unaryExp              go to state 63
    value                 go to state 64
    if_statement          go to state 65
    while_statement       go to state 66
    for_statement         go to state 67
    do_statement          go to state 68
    switch_statement      go to state 69
    return_statement      go to state 70
    break_statement       go to state 71
    continue_statement    go to state 72
    expression_statement  go to state 73
    statement             go to state 131
    enum_statement        go to state 76
    func_call             go to state 77


State 192

   73 else_if: ELIF . LEFT_PAREN bool_expression RIGHT_PAREN tail

    LEFT_PAREN  shift, and go to state 201


State 193

   74 else_if: else_if . ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   76 else_part: . ELSE tail
   77          | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STR, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, CASE, DEFAULT, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   78 if_statement: IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if . else_part

    ELSE  shift, and go to state 202
    ELIF  shift, and go to state 203

    $default  reduce using rule 77 (else_part)

    else_part  go to state 204


State 194

   82 for_statement: FOR LEFT_PAREN optional_type assign SEMICOLON bool_expression . SEMICOLON expression RIGHT_PAREN tail_inloop

    SEMICOLON  shift, and go to state 205


State 195

   83 do_statement: DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN . SEMICOLON

    SEMICOLON  shift, and go to state 206


State 196

   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   89 case: CASE . expression COLON statements BREAK SEMICOLON

    IDENT           shift, and go to state 97
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    bool_expression  go to state 53
    assign           go to state 54
    expression       go to state 207
    simpleExp        go to state 56
    andExp           go to state 57
    bitRelExp        go to state 58
    relExp           go to state 59
    bitshiftExp      go to state 60
    sumExp           go to state 61
    mulExp           go to state 62
    unaryExp         go to state 63
    value            go to state 64


State 197

   84 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases . RIGHT_CURLY_BRACKET
   86 cases: cases . case
   87      | cases . default
   88 default: . DEFAULT COLON statements
   89 case: . CASE expression COLON statements BREAK SEMICOLON

    CASE                 shift, and go to state 196
    DEFAULT              shift, and go to state 208
    RIGHT_CURLY_BRACKET  shift, and go to state 209

    default  go to state 210
    case     go to state 211


State 198

   85 cases: case .

    $default  reduce using rule 85 (cases)


State 199

  128 func_call: IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON .

    $default  reduce using rule 128 (func_call)


State 200

   21 tail: LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET .

    $default  reduce using rule 21 (tail)


State 201

   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   73 else_if: ELIF LEFT_PAREN . bool_expression RIGHT_PAREN tail

    IDENT           shift, and go to state 144
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    bool_expression  go to state 212
    relExp           go to state 146
    bitshiftExp      go to state 60
    sumExp           go to state 61
    mulExp           go to state 62
    unaryExp         go to state 63
    value            go to state 64


State 202

   21 tail: . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   76 else_part: ELSE . tail

    LEFT_CURLY_BRACKET  shift, and go to state 184

    tail  go to state 213


State 203

   74 else_if: else_if ELIF . LEFT_PAREN bool_expression RIGHT_PAREN tail

    LEFT_PAREN  shift, and go to state 214


State 204

   78 if_statement: IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part .

    $default  reduce using rule 78 (if_statement)


State 205

   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   82 for_statement: FOR LEFT_PAREN optional_type assign SEMICOLON bool_expression SEMICOLON . expression RIGHT_PAREN tail_inloop

    IDENT           shift, and go to state 97
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    bool_expression  go to state 53
    assign           go to state 54
    expression       go to state 215
    simpleExp        go to state 56
    andExp           go to state 57
    bitRelExp        go to state 58
    relExp           go to state 59
    bitshiftExp      go to state 60
    sumExp           go to state 61
    mulExp           go to state 62
    unaryExp         go to state 63
    value            go to state 64


State 206

   83 do_statement: DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON .

    $default  reduce using rule 83 (do_statement)


State 207

   89 case: CASE expression . COLON statements BREAK SEMICOLON

    COLON  shift, and go to state 216


State 208

   88 default: DEFAULT . COLON statements

    COLON  shift, and go to state 217


State 209

   84 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .

    $default  reduce using rule 84 (switch_statement)


State 210

   87 cases: cases default .

    $default  reduce using rule 87 (cases)


State 211

   86 cases: cases case .

    $default  reduce using rule 86 (cases)


State 212

   73 else_if: ELIF LEFT_PAREN bool_expression . RIGHT_PAREN tail

    RIGHT_PAREN  shift, and go to state 218


State 213

   76 else_part: ELSE tail .

    $default  reduce using rule 76 (else_part)


State 214

   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   74 else_if: else_if ELIF LEFT_PAREN . bool_expression RIGHT_PAREN tail

    IDENT           shift, and go to state 144
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    bool_expression  go to state 219
    relExp           go to state 146
    bitshiftExp      go to state 60
    sumExp           go to state 61
    mulExp           go to state 62
    unaryExp         go to state 63
    value            go to state 64


State 215

   82 for_statement: FOR LEFT_PAREN optional_type assign SEMICOLON bool_expression SEMICOLON expression . RIGHT_PAREN tail_inloop

    RIGHT_PAREN  shift, and go to state 220


State 216

   15 beforedecl: . CONST
   16           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STR]
   17 declaration: . beforedecl type IDENT SEMICOLON
   18            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   19 declarations: . declaration
   20             | . declarations declaration
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   78 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   79 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   82 for_statement: . FOR LEFT_PAREN optional_type assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   83 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   84 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 case: CASE expression COLON . statements BREAK SEMICOLON
   92 return_statement: . RETURN return_val SEMICOLON
   93 break_statement: . BREAK SEMICOLON
   94 continue_statement: . CONTINUE SEMICOLON
   95 expression_statement: . expression SEMICOLON
   96 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STR, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, LEFT_PAREN, INC_OP, DEC_OP, NOT_OP]
   97           | . statement
   98           | . statements statement
   99 statement: . if_statement
  100          | . while_statement
  101          | . for_statement
  102          | . do_statement
  103          | . switch_statement
  104          | . return_statement
  105          | . expression_statement
  106          | . declarations
  107          | . enum_statement
  108          | . func_call
  109          | . break_statement
  110          | . continue_statement
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 33
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    IF              shift, and go to state 38
    WHILE           shift, and go to state 39
    FOR             shift, and go to state 40
    DO              shift, and go to state 41
    SWITCH          shift, and go to state 42
    RETURN          shift, and go to state 43
    BREAK           shift, and go to state 44
    CONTINUE        shift, and go to state 45
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    ENUM            shift, and go to state 2
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    INTEGER         reduce using rule 16 (beforedecl)
    INTEGER         [reduce using rule 96 (statements)]
    FLOAT           reduce using rule 16 (beforedecl)
    FLOAT           [reduce using rule 96 (statements)]
    DOUBLE          reduce using rule 16 (beforedecl)
    DOUBLE          [reduce using rule 96 (statements)]
    VOID            reduce using rule 16 (beforedecl)
    VOID            [reduce using rule 96 (statements)]
    BOOLEAN         reduce using rule 16 (beforedecl)
    BOOLEAN         [reduce using rule 96 (statements)]
    CHAR            reduce using rule 16 (beforedecl)
    CHAR            [reduce using rule 96 (statements)]
    CONST           [reduce using rule 96 (statements)]
    STR             reduce using rule 16 (beforedecl)
    STR             [reduce using rule 96 (statements)]
    IDENT           [reduce using rule 96 (statements)]
    CONST_INT       [reduce using rule 96 (statements)]
    CONST_FLOAT     [reduce using rule 96 (statements)]
    CONST_CHAR      [reduce using rule 96 (statements)]
    STRING_LITERAL  [reduce using rule 96 (statements)]
    IF              [reduce using rule 96 (statements)]
    WHILE           [reduce using rule 96 (statements)]
    FOR             [reduce using rule 96 (statements)]
    DO              [reduce using rule 96 (statements)]
    SWITCH          [reduce using rule 96 (statements)]
    RETURN          [reduce using rule 96 (statements)]
    BREAK           [reduce using rule 96 (statements)]
    CONTINUE        [reduce using rule 96 (statements)]
    TRUE_TOKEN      [reduce using rule 96 (statements)]
    FALSE_TOKEN     [reduce using rule 96 (statements)]
    ENUM            [reduce using rule 96 (statements)]
    LEFT_PAREN      [reduce using rule 96 (statements)]
    INC_OP          [reduce using rule 96 (statements)]
    DEC_OP          [reduce using rule 96 (statements)]
    NOT_OP          [reduce using rule 96 (statements)]
    $default        reduce using rule 16 (beforedecl)

    beforedecl            go to state 7
    declaration           go to state 8
    declarations          go to state 52
    bool_expression       go to state 53
    assign                go to state 54
    expression            go to state 55
    simpleExp             go to state 56
    andExp                go to state 57
    bitRelExp             go to state 58
    relExp                go to state 59
    bitshiftExp           go to state 60
    sumExp                go to state 61
    mulExp                go to state 62
    unaryExp              go to state 63
    value                 go to state 64
    if_statement          go to state 65
    while_statement       go to state 66
    for_statement         go to state 67
    do_statement          go to state 68
    switch_statement      go to state 69
    return_statement      go to state 70
    break_statement       go to state 71
    continue_statement    go to state 72
    expression_statement  go to state 73
    statements            go to state 221
    statement             go to state 75
    enum_statement        go to state 76
    func_call             go to state 77


State 217

   15 beforedecl: . CONST
   16           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STR]
   17 declaration: . beforedecl type IDENT SEMICOLON
   18            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   19 declarations: . declaration
   20             | . declarations declaration
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   78 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   79 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   82 for_statement: . FOR LEFT_PAREN optional_type assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   83 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   84 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   88 default: DEFAULT COLON . statements
   92 return_statement: . RETURN return_val SEMICOLON
   93 break_statement: . BREAK SEMICOLON
   94 continue_statement: . CONTINUE SEMICOLON
   95 expression_statement: . expression SEMICOLON
   96 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STR, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, CASE, DEFAULT, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   97           | . statement
   98           | . statements statement
   99 statement: . if_statement
  100          | . while_statement
  101          | . for_statement
  102          | . do_statement
  103          | . switch_statement
  104          | . return_statement
  105          | . expression_statement
  106          | . declarations
  107          | . enum_statement
  108          | . func_call
  109          | . break_statement
  110          | . continue_statement
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 33
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    IF              shift, and go to state 38
    WHILE           shift, and go to state 39
    FOR             shift, and go to state 40
    DO              shift, and go to state 41
    SWITCH          shift, and go to state 42
    RETURN          shift, and go to state 43
    BREAK           shift, and go to state 44
    CONTINUE        shift, and go to state 45
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    ENUM            shift, and go to state 2
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    INTEGER              reduce using rule 16 (beforedecl)
    INTEGER              [reduce using rule 96 (statements)]
    FLOAT                reduce using rule 16 (beforedecl)
    FLOAT                [reduce using rule 96 (statements)]
    DOUBLE               reduce using rule 16 (beforedecl)
    DOUBLE               [reduce using rule 96 (statements)]
    VOID                 reduce using rule 16 (beforedecl)
    VOID                 [reduce using rule 96 (statements)]
    BOOLEAN              reduce using rule 16 (beforedecl)
    BOOLEAN              [reduce using rule 96 (statements)]
    CHAR                 reduce using rule 16 (beforedecl)
    CHAR                 [reduce using rule 96 (statements)]
    CONST                [reduce using rule 96 (statements)]
    STR                  reduce using rule 16 (beforedecl)
    STR                  [reduce using rule 96 (statements)]
    IDENT                [reduce using rule 96 (statements)]
    CONST_INT            [reduce using rule 96 (statements)]
    CONST_FLOAT          [reduce using rule 96 (statements)]
    CONST_CHAR           [reduce using rule 96 (statements)]
    STRING_LITERAL       [reduce using rule 96 (statements)]
    IF                   [reduce using rule 96 (statements)]
    WHILE                [reduce using rule 96 (statements)]
    FOR                  [reduce using rule 96 (statements)]
    DO                   [reduce using rule 96 (statements)]
    SWITCH               [reduce using rule 96 (statements)]
    CASE                 reduce using rule 96 (statements)
    DEFAULT              reduce using rule 96 (statements)
    RETURN               [reduce using rule 96 (statements)]
    BREAK                [reduce using rule 96 (statements)]
    CONTINUE             [reduce using rule 96 (statements)]
    TRUE_TOKEN           [reduce using rule 96 (statements)]
    FALSE_TOKEN          [reduce using rule 96 (statements)]
    ENUM                 [reduce using rule 96 (statements)]
    LEFT_PAREN           [reduce using rule 96 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 96 (statements)
    INC_OP               [reduce using rule 96 (statements)]
    DEC_OP               [reduce using rule 96 (statements)]
    NOT_OP               [reduce using rule 96 (statements)]
    $default             reduce using rule 16 (beforedecl)

    beforedecl            go to state 7
    declaration           go to state 8
    declarations          go to state 52
    bool_expression       go to state 53
    assign                go to state 54
    expression            go to state 55
    simpleExp             go to state 56
    andExp                go to state 57
    bitRelExp             go to state 58
    relExp                go to state 59
    bitshiftExp           go to state 60
    sumExp                go to state 61
    mulExp                go to state 62
    unaryExp              go to state 63
    value                 go to state 64
    if_statement          go to state 65
    while_statement       go to state 66
    for_statement         go to state 67
    do_statement          go to state 68
    switch_statement      go to state 69
    return_statement      go to state 70
    break_statement       go to state 71
    continue_statement    go to state 72
    expression_statement  go to state 73
    statements            go to state 222
    statement             go to state 75
    enum_statement        go to state 76
    func_call             go to state 77


State 218

   21 tail: . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   73 else_if: ELIF LEFT_PAREN bool_expression RIGHT_PAREN . tail

    LEFT_CURLY_BRACKET  shift, and go to state 184

    tail  go to state 223


State 219

   74 else_if: else_if ELIF LEFT_PAREN bool_expression . RIGHT_PAREN tail

    RIGHT_PAREN  shift, and go to state 224


State 220

   22 tail_inloop: . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   82 for_statement: FOR LEFT_PAREN optional_type assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN . tail_inloop

    LEFT_CURLY_BRACKET  shift, and go to state 94

    tail_inloop  go to state 225


State 221

   15 beforedecl: . CONST
   16           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STR]
   17 declaration: . beforedecl type IDENT SEMICOLON
   18            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   19 declarations: . declaration
   20             | . declarations declaration
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   78 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   79 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   82 for_statement: . FOR LEFT_PAREN optional_type assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   83 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   84 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 case: CASE expression COLON statements . BREAK SEMICOLON
   92 return_statement: . RETURN return_val SEMICOLON
   93 break_statement: . BREAK SEMICOLON
   94 continue_statement: . CONTINUE SEMICOLON
   95 expression_statement: . expression SEMICOLON
   98 statements: statements . statement
   99 statement: . if_statement
  100          | . while_statement
  101          | . for_statement
  102          | . do_statement
  103          | . switch_statement
  104          | . return_statement
  105          | . expression_statement
  106          | . declarations
  107          | . enum_statement
  108          | . func_call
  109          | . break_statement
  110          | . continue_statement
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 33
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    IF              shift, and go to state 38
    WHILE           shift, and go to state 39
    FOR             shift, and go to state 40
    DO              shift, and go to state 41
    SWITCH          shift, and go to state 42
    RETURN          shift, and go to state 43
    BREAK           shift, and go to state 226
    CONTINUE        shift, and go to state 45
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    ENUM            shift, and go to state 2
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    $default  reduce using rule 16 (beforedecl)

    beforedecl            go to state 7
    declaration           go to state 8
    declarations          go to state 52
    bool_expression       go to state 53
    assign                go to state 54
    expression            go to state 55
    simpleExp             go to state 56
    andExp                go to state 57
    bitRelExp             go to state 58
    relExp                go to state 59
    bitshiftExp           go to state 60
    sumExp                go to state 61
    mulExp                go to state 62
    unaryExp              go to state 63
    value                 go to state 64
    if_statement          go to state 65
    while_statement       go to state 66
    for_statement         go to state 67
    do_statement          go to state 68
    switch_statement      go to state 69
    return_statement      go to state 70
    break_statement       go to state 71
    continue_statement    go to state 72
    expression_statement  go to state 73
    statement             go to state 131
    enum_statement        go to state 76
    func_call             go to state 77


State 222

   15 beforedecl: . CONST
   16           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STR]
   17 declaration: . beforedecl type IDENT SEMICOLON
   18            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   19 declarations: . declaration
   20             | . declarations declaration
   23 bool_expression: . relExp
   24                | . TRUE_TOKEN
   25                | . FALSE_TOKEN
   26 assign: . IDENT ASSIGN_OP expression
   27 expression: . assign
   28           | . IDENT INC_OP
   29           | . IDENT DEC_OP
   30           | . simpleExp
   31           | . IDENT
   32           | . bool_expression
   33 simpleExp: . simpleExp OR_OP andExp
   34          | . andExp
   35 andExp: . andExp AND_OP
   36       | . bitRelExp
   37 bitRelExp: . bitRelExp BIT_OR_OP relExp
   38          | . bitRelExp AND relExp
   39          | . bitRelExp BIT_XOR_OP relExp
   40          | . relExp
   49 relExp: . relExp op bitshiftExp
   50       | . bitshiftExp
   51 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   52            | . bitshiftExp BIT_RSHIFT_OP sumExp
   53            | . sumExp
   59 sumExp: . sumExp pls_min mulExp
   60       | . mulExp
   61 mulExp: . mulExp mul_div unaryExp
   62       | . unaryExp
   63 unaryExp: . INC_OP IDENT
   64         | . DEC_OP IDENT
   65         | . NOT_OP IDENT
   66         | . IDENT
   67         | . value
   68         | . LEFT_PAREN expression RIGHT_PAREN
   69 value: . CONST_INT
   70      | . CONST_FLOAT
   71      | . CONST_CHAR
   72      | . STRING_LITERAL
   78 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   79 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   82 for_statement: . FOR LEFT_PAREN optional_type assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   83 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   84 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   88 default: DEFAULT COLON statements .  [CASE, DEFAULT, RIGHT_CURLY_BRACKET]
   92 return_statement: . RETURN return_val SEMICOLON
   93 break_statement: . BREAK SEMICOLON
   94 continue_statement: . CONTINUE SEMICOLON
   95 expression_statement: . expression SEMICOLON
   98 statements: statements . statement
   99 statement: . if_statement
  100          | . while_statement
  101          | . for_statement
  102          | . do_statement
  103          | . switch_statement
  104          | . return_statement
  105          | . expression_statement
  106          | . declarations
  107          | . enum_statement
  108          | . func_call
  109          | . break_statement
  110          | . continue_statement
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN SEMICOLON

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 33
    CONST_INT       shift, and go to state 34
    CONST_FLOAT     shift, and go to state 35
    CONST_CHAR      shift, and go to state 36
    STRING_LITERAL  shift, and go to state 37
    IF              shift, and go to state 38
    WHILE           shift, and go to state 39
    FOR             shift, and go to state 40
    DO              shift, and go to state 41
    SWITCH          shift, and go to state 42
    RETURN          shift, and go to state 43
    BREAK           shift, and go to state 44
    CONTINUE        shift, and go to state 45
    TRUE_TOKEN      shift, and go to state 46
    FALSE_TOKEN     shift, and go to state 47
    ENUM            shift, and go to state 2
    LEFT_PAREN      shift, and go to state 48
    INC_OP          shift, and go to state 49
    DEC_OP          shift, and go to state 50
    NOT_OP          shift, and go to state 51

    CASE                 reduce using rule 88 (default)
    DEFAULT              reduce using rule 88 (default)
    RIGHT_CURLY_BRACKET  reduce using rule 88 (default)
    $default             reduce using rule 16 (beforedecl)

    beforedecl            go to state 7
    declaration           go to state 8
    declarations          go to state 52
    bool_expression       go to state 53
    assign                go to state 54
    expression            go to state 55
    simpleExp             go to state 56
    andExp                go to state 57
    bitRelExp             go to state 58
    relExp                go to state 59
    bitshiftExp           go to state 60
    sumExp                go to state 61
    mulExp                go to state 62
    unaryExp              go to state 63
    value                 go to state 64
    if_statement          go to state 65
    while_statement       go to state 66
    for_statement         go to state 67
    do_statement          go to state 68
    switch_statement      go to state 69
    return_statement      go to state 70
    break_statement       go to state 71
    continue_statement    go to state 72
    expression_statement  go to state 73
    statement             go to state 131
    enum_statement        go to state 76
    func_call             go to state 77


State 223

   73 else_if: ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail .

    $default  reduce using rule 73 (else_if)


State 224

   21 tail: . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   74 else_if: else_if ELIF LEFT_PAREN bool_expression RIGHT_PAREN . tail

    LEFT_CURLY_BRACKET  shift, and go to state 184

    tail  go to state 227


State 225

   82 for_statement: FOR LEFT_PAREN optional_type assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop .

    $default  reduce using rule 82 (for_statement)


State 226

   89 case: CASE expression COLON statements BREAK . SEMICOLON
   93 break_statement: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 228


State 227

   74 else_if: else_if ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail .

    $default  reduce using rule 74 (else_if)


State 228

   89 case: CASE expression COLON statements BREAK SEMICOLON .  [CASE, DEFAULT, RIGHT_CURLY_BRACKET]
   93 break_statement: BREAK SEMICOLON .  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, STR, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, LEFT_PAREN, INC_OP, DEC_OP, NOT_OP]

    CASE                 reduce using rule 89 (case)
    DEFAULT              reduce using rule 89 (case)
    RIGHT_CURLY_BRACKET  reduce using rule 89 (case)
    $default             reduce using rule 93 (break_statement)
