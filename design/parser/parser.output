Terminals unused in grammar

    UNTIL
    LEFT_SQ_BRACKET
    RIGHT_SQ_BRACKET
    QUESTION_MARK
    DOT
    BIT_NOT_OP


State 4 conflicts: 1 shift/reduce
State 10 conflicts: 19 shift/reduce, 13 reduce/reduce
State 13 conflicts: 18 shift/reduce, 7 reduce/reduce
State 15 conflicts: 1 reduce/reduce
State 17 conflicts: 1 reduce/reduce
State 37 conflicts: 1 shift/reduce, 6 reduce/reduce
State 44 conflicts: 2 shift/reduce, 4 reduce/reduce
State 88 conflicts: 20 shift/reduce, 7 reduce/reduce
State 90 conflicts: 4 reduce/reduce
State 131 conflicts: 1 reduce/reduce
State 151 conflicts: 2 shift/reduce
State 152 conflicts: 2 shift/reduce
State 153 conflicts: 2 shift/reduce
State 154 conflicts: 2 shift/reduce
State 165 conflicts: 18 shift/reduce, 7 reduce/reduce
State 178 conflicts: 18 shift/reduce, 7 reduce/reduce
State 179 conflicts: 1 shift/reduce
State 180 conflicts: 18 shift/reduce, 7 reduce/reduce
State 192 conflicts: 2 shift/reduce
State 203 conflicts: 18 shift/reduce, 7 reduce/reduce
State 217 conflicts: 18 shift/reduce, 7 reduce/reduce
State 218 conflicts: 18 shift/reduce, 7 reduce/reduce
State 219 conflicts: 18 shift/reduce, 7 reduce/reduce
State 225 conflicts: 18 shift/reduce, 7 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: program function
    2        | functions

    3 $@1: %empty

    4 program: $@1 declarations statements

    5 type: INTEGER
    6     | FLOAT
    7     | DOUBLE
    8     | VOID
    9     | BOOLEAN
   10     | CHAR

   11 beforedecl: CONST
   12           | %empty

   13 declaration: beforedecl type IDENT SEMICOLON
   14            | beforedecl type IDENT ASSIGN_OP expression SEMICOLON

   15 $@2: %empty

   16 declarations: $@2 declaration
   17             | declarations declaration

   18 tail: statements
   19     | LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET

   20 tail_inloop: statements_inloop
   21            | LEFT_CURLY_BRACKET statements_inloop RIGHT_CURLY_BRACKET

   22 bool_expression: relExp
   23                | TRUE_TOKEN
   24                | FALSE_TOKEN

   25 assign: IDENT ASSIGN_OP expression

   26 expression: assign
   27           | IDENT INC_OP
   28           | IDENT DEC_OP
   29           | simpleExp
   30           | IDENT
   31           | bool_expression

   32 simpleExp: simpleExp OR_OP andExp
   33          | andExp

   34 andExp: andExp AND_OP
   35       | bitRelExp

   36 bitRelExp: bitRelExp BIT_OR_OP relExp
   37          | bitRelExp AND relExp
   38          | bitRelExp BIT_XOR_OP relExp
   39          | relExp

   40 op: EQ_OP
   41   | NE_OP
   42   | GT_OP
   43   | LT_OP
   44   | LE_OP
   45   | GE_OP
   46   | OR_OP
   47   | AND_OP

   48 relExp: relExp op bitshiftExp
   49       | bitshiftExp

   50 bitshiftExp: bitshiftExp BIT_LSHIFT_OP sumExp
   51            | bitshiftExp BIT_RSHIFT_OP sumExp
   52            | sumExp

   53 pls_min: ADD_OP
   54        | SUB_OP

   55 mul_div: MUL_OP
   56        | DIV_OP
   57        | MOD_OP

   58 sumExp: sumExp pls_min mulExp
   59       | mulExp

   60 mulExp: mulExp mul_div unaryExp
   61       | unaryExp

   62 unaryExp: INC_OP IDENT
   63         | DEC_OP IDENT
   64         | NOT_OP IDENT
   65         | IDENT
   66         | value
   67         | LEFT_PAREN expression RIGHT_PAREN

   68 value: CONST_INT
   69      | CONST_FLOAT
   70      | CONST_CHAR
   71      | STRING_LITERAL

   72 else_if: ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   73        | else_if ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   74        | %empty

   75 else_part: ELSE tail
   76          | %empty

   77 if_statement: IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part

   78 while_statement: WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop

   79 for_statement: FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

   80 do_statement: DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON

   81 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

   82 cases: case
   83      | cases case
   84      | cases default

   85 default: DEFAULT COLON statements BREAK SEMICOLON

   86 case: CASE expression COLON statements BREAK SEMICOLON

   87 return_val: expression
   88           | %empty

   89 return_statement: RETURN return_val SEMICOLON

   90 break_statement: BREAK SEMICOLON

   91 continue_statement: CONTINUE SEMICOLON

   92 expression_statement: expression SEMICOLON

   93 statements: %empty
   94           | statement
   95           | statements statement

   96 statement: if_statement
   97          | while_statement
   98          | for_statement
   99          | do_statement
  100          | switch_statement
  101          | return_statement
  102          | expression_statement
  103          | declarations
  104          | enum_statement
  105          | func_call

  106 statement_inloop: statement
  107                 | break_statement
  108                 | continue_statement

  109 statements_inloop: statement_inloop
  110                  | statements_inloop statement_inloop

  111 functions: functions function
  112          | function

  113 function: function_head function_tail

  114 param_empty: parameters
  115            | %empty

  116 function_head: FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN type

  117 function_tail: LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET

  118 parameters: parameter
  119           | parameters COMMA parameter
  120           | %empty

  121 parameter: type IDENT

  122 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET

  123 enum_list: one_val
  124          | enum_list COMMA one_val

  125 one_val: IDENT
  126        | IDENT ASSIGN_OP value

  127 func_call: IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

  129 arguments: argument
  130          | arguments COMMA argument
  131          | %empty

  132 argument: expression


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INTEGER <int_val> (258) 5
    FLOAT <int_val> (259) 6
    DOUBLE <int_val> (260) 7
    VOID <int_val> (261) 8
    BOOLEAN <int_val> (262) 9
    CHAR <int_val> (263) 10
    CONST <int_val> (264) 11
    IDENT <symbol_table_item> (265) 13 14 25 27 28 30 62 63 64 65 116 121 122 125 126 127 128
    CONST_INT <int_val> (266) 68
    CONST_FLOAT <double_val> (267) 69
    CONST_CHAR <char_val> (268) 70
    STRING_LITERAL <str_val> (269) 71
    IF <int_val> (270) 77
    ELSE <int_val> (271) 75
    ELIF <int_val> (272) 72 73
    WHILE <int_val> (273) 78 80
    FOR <int_val> (274) 79
    DO <int_val> (275) 80
    SWITCH <int_val> (276) 81
    CASE <int_val> (277) 86
    DEFAULT <int_val> (278) 85
    RETURN <int_val> (279) 89
    BREAK <int_val> (280) 85 86 90
    CONTINUE <int_val> (281) 91
    TRUE_TOKEN <int_val> (282) 23
    FALSE_TOKEN <int_val> (283) 24
    ENUM <int_val> (284) 122
    FUNC <int_val> (285) 116
    UNTIL <int_val> (286)
    LEFT_PAREN <int_val> (287) 67 72 73 77 78 79 80 81 116 127 128
    RIGHT_PAREN <int_val> (288) 67 72 73 77 78 79 80 81 116 127 128
    LEFT_CURLY_BRACKET <int_val> (289) 19 21 81 117 122
    RIGHT_CURLY_BRACKET <int_val> (290) 19 21 81 117 122
    LEFT_SQ_BRACKET <int_val> (291)
    RIGHT_SQ_BRACKET <int_val> (292)
    SEMICOLON <int_val> (293) 13 14 79 80 85 86 89 90 91 92
    COMMA <int_val> (294) 119 124 130
    COLON <int_val> (295) 85 86
    QUESTION_MARK <int_val> (296)
    DOT <int_val> (297)
    ADD_OP <int_val> (298) 53
    SUB_OP <int_val> (299) 54
    MUL_OP <int_val> (300) 55
    DIV_OP <int_val> (301) 56
    MOD_OP <int_val> (302) 57
    INC_OP <int_val> (303) 27 62
    DEC_OP <int_val> (304) 28 63
    OR_OP <int_val> (305) 32 46
    AND_OP <int_val> (306) 34 47
    NOT_OP <int_val> (307) 64
    BIT_OR_OP <int_val> (308) 36
    AND <int_val> (309) 37
    BIT_XOR_OP <int_val> (310) 38
    BIT_NOT_OP <int_val> (311)
    BIT_LSHIFT_OP <int_val> (312) 50
    BIT_RSHIFT_OP <int_val> (313) 51
    EQ_OP <int_val> (314) 40
    NE_OP <int_val> (315) 41
    GT_OP <int_val> (316) 42
    LT_OP <int_val> (317) 43
    GE_OP <int_val> (318) 45
    LE_OP <int_val> (319) 44
    ASSIGN_OP <int_val> (320) 14 25 126 128


Nonterminals, with rules where they appear

    $accept (66)
        on left: 0
    program (67)
        on left: 1 2 4
        on right: 0 1
    $@1 (68)
        on left: 3
        on right: 4
    type (69)
        on left: 5 6 7 8 9 10
        on right: 13 14 116 121
    beforedecl (70)
        on left: 11 12
        on right: 13 14
    declaration (71)
        on left: 13 14
        on right: 16 17
    declarations (72)
        on left: 16 17
        on right: 4 17 103
    $@2 (73)
        on left: 15
        on right: 16
    tail (74)
        on left: 18 19
        on right: 72 73 75 77
    tail_inloop (75)
        on left: 20 21
        on right: 78 79 80
    bool_expression (76)
        on left: 22 23 24
        on right: 31 72 73 77 78 79 80
    assign (77)
        on left: 25
        on right: 26 79
    expression (78)
        on left: 26 27 28 29 30 31
        on right: 14 25 67 79 81 86 87 92 132
    simpleExp (79)
        on left: 32 33
        on right: 29 32
    andExp (80)
        on left: 34 35
        on right: 32 33 34
    bitRelExp (81)
        on left: 36 37 38 39
        on right: 35 36 37 38
    op (82)
        on left: 40 41 42 43 44 45 46 47
        on right: 48
    relExp (83)
        on left: 48 49
        on right: 22 36 37 38 39 48
    bitshiftExp (84)
        on left: 50 51 52
        on right: 48 49 50 51
    pls_min (85)
        on left: 53 54
        on right: 58
    mul_div (86)
        on left: 55 56 57
        on right: 60
    sumExp (87)
        on left: 58 59
        on right: 50 51 52 58
    mulExp (88)
        on left: 60 61
        on right: 58 59 60
    unaryExp (89)
        on left: 62 63 64 65 66 67
        on right: 60 61
    value (90)
        on left: 68 69 70 71
        on right: 66 126
    else_if (91)
        on left: 72 73 74
        on right: 73 77
    else_part (92)
        on left: 75 76
        on right: 77
    if_statement (93)
        on left: 77
        on right: 96
    while_statement (94)
        on left: 78
        on right: 97
    for_statement (95)
        on left: 79
        on right: 98
    do_statement (96)
        on left: 80
        on right: 99
    switch_statement (97)
        on left: 81
        on right: 100
    cases (98)
        on left: 82 83 84
        on right: 81 83 84
    default (99)
        on left: 85
        on right: 84
    case (100)
        on left: 86
        on right: 82 83
    return_val (101)
        on left: 87 88
        on right: 89
    return_statement (102)
        on left: 89
        on right: 101
    break_statement (103)
        on left: 90
        on right: 107
    continue_statement (104)
        on left: 91
        on right: 108
    expression_statement (105)
        on left: 92
        on right: 102
    statements (106)
        on left: 93 94 95
        on right: 4 18 19 85 86 95 117
    statement (107)
        on left: 96 97 98 99 100 101 102 103 104 105
        on right: 94 95 106
    statement_inloop (108)
        on left: 106 107 108
        on right: 109 110
    statements_inloop (109)
        on left: 109 110
        on right: 20 21 110
    functions (110)
        on left: 111 112
        on right: 2 111
    function (111)
        on left: 113
        on right: 1 111 112
    param_empty (112)
        on left: 114 115
        on right: 116
    function_head (113)
        on left: 116
        on right: 113
    function_tail (114)
        on left: 117
        on right: 113
    parameters (115)
        on left: 118 119 120
        on right: 114 119
    parameter (116)
        on left: 121
        on right: 118 119
    enum_statement (117)
        on left: 122
        on right: 104
    enum_list (118)
        on left: 123 124
        on right: 122 124
    one_val (119)
        on left: 125 126
        on right: 123 124
    func_call (120)
        on left: 127 128
        on right: 105
    arguments (121)
        on left: 129 130 131
        on right: 127 128 130
    argument (122)
        on left: 132
        on right: 129 130


State 0

    0 $accept: . program $end
    1 program: . program function
    2        | . functions
    3 $@1: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
    4 program: . $@1 declarations statements
  111 functions: . functions function
  112          | . function
  113 function: . function_head function_tail
  116 function_head: . FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN type

    FUNC  shift, and go to state 1

    $default  reduce using rule 3 ($@1)

    program        go to state 2
    $@1            go to state 3
    functions      go to state 4
    function       go to state 5
    function_head  go to state 6


State 1

  116 function_head: FUNC . IDENT LEFT_PAREN param_empty RIGHT_PAREN type

    IDENT  shift, and go to state 7


State 2

    0 $accept: program . $end
    1 program: program . function
  113 function: . function_head function_tail
  116 function_head: . FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN type

    $end  shift, and go to state 8
    FUNC  shift, and go to state 1

    function       go to state 9
    function_head  go to state 6


State 3

    4 program: $@1 . declarations statements
   15 $@2: . %empty
   16 declarations: . $@2 declaration
   17             | . declarations declaration

    $default  reduce using rule 15 ($@2)

    declarations  go to state 10
    $@2           go to state 11


State 4

    2 program: functions .  [$end, FUNC]
  111 functions: functions . function
  113 function: . function_head function_tail
  116 function_head: . FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN type

    FUNC  shift, and go to state 1

    FUNC      [reduce using rule 2 (program)]
    $default  reduce using rule 2 (program)

    function       go to state 12
    function_head  go to state 6


State 5

  112 functions: function .

    $default  reduce using rule 112 (functions)


State 6

  113 function: function_head . function_tail
  117 function_tail: . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 13

    function_tail  go to state 14


State 7

  116 function_head: FUNC IDENT . LEFT_PAREN param_empty RIGHT_PAREN type

    LEFT_PAREN  shift, and go to state 15


State 8

    0 $accept: program $end .

    $default  accept


State 9

    1 program: program function .

    $default  reduce using rule 1 (program)


State 10

    4 program: $@1 declarations . statements
   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@2 declaration
   17             | . declarations declaration
   17             | declarations . declaration
   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31           | . bool_expression
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   92 expression_statement: . expression SEMICOLON
   93 statements: . %empty  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, TRUE_TOKEN, FALSE_TOKEN, ENUM, FUNC, LEFT_PAREN, INC_OP, DEC_OP, NOT_OP]
   94           | . statement
   95           | . statements statement
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  105          | . func_call
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST           shift, and go to state 16
    IDENT           shift, and go to state 17
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    IF              shift, and go to state 22
    WHILE           shift, and go to state 23
    FOR             shift, and go to state 24
    DO              shift, and go to state 25
    SWITCH          shift, and go to state 26
    RETURN          shift, and go to state 27
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    ENUM            shift, and go to state 30
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    $end            reduce using rule 93 (statements)
    INTEGER         reduce using rule 12 (beforedecl)
    INTEGER         [reduce using rule 15 ($@2)]
    INTEGER         [reduce using rule 93 (statements)]
    FLOAT           reduce using rule 12 (beforedecl)
    FLOAT           [reduce using rule 15 ($@2)]
    FLOAT           [reduce using rule 93 (statements)]
    DOUBLE          reduce using rule 12 (beforedecl)
    DOUBLE          [reduce using rule 15 ($@2)]
    DOUBLE          [reduce using rule 93 (statements)]
    VOID            reduce using rule 12 (beforedecl)
    VOID            [reduce using rule 15 ($@2)]
    VOID            [reduce using rule 93 (statements)]
    BOOLEAN         reduce using rule 12 (beforedecl)
    BOOLEAN         [reduce using rule 15 ($@2)]
    BOOLEAN         [reduce using rule 93 (statements)]
    CHAR            reduce using rule 12 (beforedecl)
    CHAR            [reduce using rule 15 ($@2)]
    CHAR            [reduce using rule 93 (statements)]
    CONST           [reduce using rule 15 ($@2)]
    CONST           [reduce using rule 93 (statements)]
    IDENT           [reduce using rule 93 (statements)]
    CONST_INT       [reduce using rule 93 (statements)]
    CONST_FLOAT     [reduce using rule 93 (statements)]
    CONST_CHAR      [reduce using rule 93 (statements)]
    STRING_LITERAL  [reduce using rule 93 (statements)]
    IF              [reduce using rule 93 (statements)]
    WHILE           [reduce using rule 93 (statements)]
    FOR             [reduce using rule 93 (statements)]
    DO              [reduce using rule 93 (statements)]
    SWITCH          [reduce using rule 93 (statements)]
    RETURN          [reduce using rule 93 (statements)]
    TRUE_TOKEN      [reduce using rule 93 (statements)]
    FALSE_TOKEN     [reduce using rule 93 (statements)]
    ENUM            [reduce using rule 93 (statements)]
    FUNC            reduce using rule 93 (statements)
    LEFT_PAREN      [reduce using rule 93 (statements)]
    INC_OP          [reduce using rule 93 (statements)]
    DEC_OP          [reduce using rule 93 (statements)]
    NOT_OP          [reduce using rule 93 (statements)]
    $default        reduce using rule 12 (beforedecl)

    beforedecl            go to state 35
    declaration           go to state 36
    declarations          go to state 37
    $@2                   go to state 11
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    expression_statement  go to state 56
    statements            go to state 57
    statement             go to state 58
    enum_statement        go to state 59
    func_call             go to state 60


State 11

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   16 declarations: $@2 . declaration

    CONST  shift, and go to state 16

    $default  reduce using rule 12 (beforedecl)

    beforedecl   go to state 35
    declaration  go to state 61


State 12

  111 functions: functions function .

    $default  reduce using rule 111 (functions)


State 13

   15 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@2 declaration
   17             | . declarations declaration
   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31           | . bool_expression
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   92 expression_statement: . expression SEMICOLON
   93 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, TRUE_TOKEN, FALSE_TOKEN, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   94           | . statement
   95           | . statements statement
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  105          | . func_call
  117 function_tail: LEFT_CURLY_BRACKET . statements RIGHT_CURLY_BRACKET
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 17
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    IF              shift, and go to state 22
    WHILE           shift, and go to state 23
    FOR             shift, and go to state 24
    DO              shift, and go to state 25
    SWITCH          shift, and go to state 26
    RETURN          shift, and go to state 27
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    ENUM            shift, and go to state 30
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    INTEGER              reduce using rule 15 ($@2)
    INTEGER              [reduce using rule 93 (statements)]
    FLOAT                reduce using rule 15 ($@2)
    FLOAT                [reduce using rule 93 (statements)]
    DOUBLE               reduce using rule 15 ($@2)
    DOUBLE               [reduce using rule 93 (statements)]
    VOID                 reduce using rule 15 ($@2)
    VOID                 [reduce using rule 93 (statements)]
    BOOLEAN              reduce using rule 15 ($@2)
    BOOLEAN              [reduce using rule 93 (statements)]
    CHAR                 reduce using rule 15 ($@2)
    CHAR                 [reduce using rule 93 (statements)]
    CONST                reduce using rule 15 ($@2)
    CONST                [reduce using rule 93 (statements)]
    IDENT                [reduce using rule 93 (statements)]
    CONST_INT            [reduce using rule 93 (statements)]
    CONST_FLOAT          [reduce using rule 93 (statements)]
    CONST_CHAR           [reduce using rule 93 (statements)]
    STRING_LITERAL       [reduce using rule 93 (statements)]
    IF                   [reduce using rule 93 (statements)]
    WHILE                [reduce using rule 93 (statements)]
    FOR                  [reduce using rule 93 (statements)]
    DO                   [reduce using rule 93 (statements)]
    SWITCH               [reduce using rule 93 (statements)]
    RETURN               [reduce using rule 93 (statements)]
    TRUE_TOKEN           [reduce using rule 93 (statements)]
    FALSE_TOKEN          [reduce using rule 93 (statements)]
    ENUM                 [reduce using rule 93 (statements)]
    LEFT_PAREN           [reduce using rule 93 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 93 (statements)
    INC_OP               [reduce using rule 93 (statements)]
    DEC_OP               [reduce using rule 93 (statements)]
    NOT_OP               [reduce using rule 93 (statements)]
    $default             reduce using rule 15 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    expression_statement  go to state 56
    statements            go to state 62
    statement             go to state 58
    enum_statement        go to state 59
    func_call             go to state 60


State 14

  113 function: function_head function_tail .

    $default  reduce using rule 113 (function)


State 15

    5 type: . INTEGER
    6     | . FLOAT
    7     | . DOUBLE
    8     | . VOID
    9     | . BOOLEAN
   10     | . CHAR
  114 param_empty: . parameters
  115            | . %empty  [RIGHT_PAREN]
  116 function_head: FUNC IDENT LEFT_PAREN . param_empty RIGHT_PAREN type
  118 parameters: . parameter
  119           | . parameters COMMA parameter
  120           | . %empty  [RIGHT_PAREN, COMMA]
  121 parameter: . type IDENT

    INTEGER  shift, and go to state 63
    FLOAT    shift, and go to state 64
    DOUBLE   shift, and go to state 65
    VOID     shift, and go to state 66
    BOOLEAN  shift, and go to state 67
    CHAR     shift, and go to state 68

    RIGHT_PAREN  reduce using rule 115 (param_empty)
    RIGHT_PAREN  [reduce using rule 120 (parameters)]
    COMMA        reduce using rule 120 (parameters)
    $default     reduce using rule 115 (param_empty)

    type         go to state 69
    param_empty  go to state 70
    parameters   go to state 71
    parameter    go to state 72


State 16

   11 beforedecl: CONST .

    $default  reduce using rule 11 (beforedecl)


State 17

   25 assign: IDENT . ASSIGN_OP expression
   27 expression: IDENT . INC_OP
   28           | IDENT . DEC_OP
   30           | IDENT .  [SEMICOLON]
   65 unaryExp: IDENT .  [SEMICOLON, ADD_OP, SUB_OP, MUL_OP, DIV_OP, MOD_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
  127 func_call: IDENT . LEFT_PAREN arguments RIGHT_PAREN
  128          | IDENT . ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    LEFT_PAREN  shift, and go to state 73
    INC_OP      shift, and go to state 74
    DEC_OP      shift, and go to state 75
    ASSIGN_OP   shift, and go to state 76

    SEMICOLON  reduce using rule 30 (expression)
    SEMICOLON  [reduce using rule 65 (unaryExp)]
    $default   reduce using rule 65 (unaryExp)


State 18

   68 value: CONST_INT .

    $default  reduce using rule 68 (value)


State 19

   69 value: CONST_FLOAT .

    $default  reduce using rule 69 (value)


State 20

   70 value: CONST_CHAR .

    $default  reduce using rule 70 (value)


State 21

   71 value: STRING_LITERAL .

    $default  reduce using rule 71 (value)


State 22

   77 if_statement: IF . LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part

    LEFT_PAREN  shift, and go to state 77


State 23

   78 while_statement: WHILE . LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop

    LEFT_PAREN  shift, and go to state 78


State 24

   79 for_statement: FOR . LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

    LEFT_PAREN  shift, and go to state 79


State 25

   15 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@2 declaration
   17             | . declarations declaration
   20 tail_inloop: . statements_inloop
   21            | . LEFT_CURLY_BRACKET statements_inloop RIGHT_CURLY_BRACKET
   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31           | . bool_expression
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   80             | DO . tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   90 break_statement: . BREAK SEMICOLON
   91 continue_statement: . CONTINUE SEMICOLON
   92 expression_statement: . expression SEMICOLON
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  105          | . func_call
  106 statement_inloop: . statement
  107                 | . break_statement
  108                 | . continue_statement
  109 statements_inloop: . statement_inloop
  110                  | . statements_inloop statement_inloop
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT               shift, and go to state 17
    CONST_INT           shift, and go to state 18
    CONST_FLOAT         shift, and go to state 19
    CONST_CHAR          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    IF                  shift, and go to state 22
    WHILE               shift, and go to state 23
    FOR                 shift, and go to state 24
    DO                  shift, and go to state 25
    SWITCH              shift, and go to state 26
    RETURN              shift, and go to state 27
    BREAK               shift, and go to state 80
    CONTINUE            shift, and go to state 81
    TRUE_TOKEN          shift, and go to state 28
    FALSE_TOKEN         shift, and go to state 29
    ENUM                shift, and go to state 30
    LEFT_PAREN          shift, and go to state 31
    LEFT_CURLY_BRACKET  shift, and go to state 82
    INC_OP              shift, and go to state 32
    DEC_OP              shift, and go to state 33
    NOT_OP              shift, and go to state 34

    $default  reduce using rule 15 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    tail_inloop           go to state 83
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    break_statement       go to state 84
    continue_statement    go to state 85
    expression_statement  go to state 56
    statement             go to state 86
    statement_inloop      go to state 87
    statements_inloop     go to state 88
    enum_statement        go to state 59
    func_call             go to state 60


State 26

   81 switch_statement: SWITCH . LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    LEFT_PAREN  shift, and go to state 89


State 27

   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31           | . bool_expression
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   87 return_val: . expression
   88           | . %empty  [SEMICOLON]
   89 return_statement: RETURN . return_val SEMICOLON

    IDENT           shift, and go to state 90
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    $default  reduce using rule 88 (return_val)

    bool_expression  go to state 38
    assign           go to state 39
    expression       go to state 91
    simpleExp        go to state 41
    andExp           go to state 42
    bitRelExp        go to state 43
    relExp           go to state 44
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49
    return_val       go to state 92


State 28

   23 bool_expression: TRUE_TOKEN .

    $default  reduce using rule 23 (bool_expression)


State 29

   24 bool_expression: FALSE_TOKEN .

    $default  reduce using rule 24 (bool_expression)


State 30

  122 enum_statement: ENUM . IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET

    IDENT  shift, and go to state 93


State 31

   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31           | . bool_expression
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   67         | LEFT_PAREN . expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL

    IDENT           shift, and go to state 90
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    bool_expression  go to state 38
    assign           go to state 39
    expression       go to state 94
    simpleExp        go to state 41
    andExp           go to state 42
    bitRelExp        go to state 43
    relExp           go to state 44
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49


State 32

   62 unaryExp: INC_OP . IDENT

    IDENT  shift, and go to state 95


State 33

   63 unaryExp: DEC_OP . IDENT

    IDENT  shift, and go to state 96


State 34

   64 unaryExp: NOT_OP . IDENT

    IDENT  shift, and go to state 97


State 35

    5 type: . INTEGER
    6     | . FLOAT
    7     | . DOUBLE
    8     | . VOID
    9     | . BOOLEAN
   10     | . CHAR
   13 declaration: beforedecl . type IDENT SEMICOLON
   14            | beforedecl . type IDENT ASSIGN_OP expression SEMICOLON

    INTEGER  shift, and go to state 63
    FLOAT    shift, and go to state 64
    DOUBLE   shift, and go to state 65
    VOID     shift, and go to state 66
    BOOLEAN  shift, and go to state 67
    CHAR     shift, and go to state 68

    type  go to state 98


State 36

   17 declarations: declarations declaration .

    $default  reduce using rule 17 (declarations)


State 37

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   17 declarations: declarations . declaration
  103 statement: declarations .  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, FUNC, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]

    CONST  shift, and go to state 16

    INTEGER   reduce using rule 12 (beforedecl)
    INTEGER   [reduce using rule 103 (statement)]
    FLOAT     reduce using rule 12 (beforedecl)
    FLOAT     [reduce using rule 103 (statement)]
    DOUBLE    reduce using rule 12 (beforedecl)
    DOUBLE    [reduce using rule 103 (statement)]
    VOID      reduce using rule 12 (beforedecl)
    VOID      [reduce using rule 103 (statement)]
    BOOLEAN   reduce using rule 12 (beforedecl)
    BOOLEAN   [reduce using rule 103 (statement)]
    CHAR      reduce using rule 12 (beforedecl)
    CHAR      [reduce using rule 103 (statement)]
    CONST     [reduce using rule 103 (statement)]
    $default  reduce using rule 103 (statement)

    beforedecl   go to state 35
    declaration  go to state 36


State 38

   31 expression: bool_expression .

    $default  reduce using rule 31 (expression)


State 39

   26 expression: assign .

    $default  reduce using rule 26 (expression)


State 40

   92 expression_statement: expression . SEMICOLON

    SEMICOLON  shift, and go to state 99


State 41

   29 expression: simpleExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON]
   32 simpleExp: simpleExp . OR_OP andExp

    OR_OP  shift, and go to state 100

    $default  reduce using rule 29 (expression)


State 42

   33 simpleExp: andExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP]
   34 andExp: andExp . AND_OP

    AND_OP  shift, and go to state 101

    $default  reduce using rule 33 (simpleExp)


State 43

   35 andExp: bitRelExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP]
   36 bitRelExp: bitRelExp . BIT_OR_OP relExp
   37          | bitRelExp . AND relExp
   38          | bitRelExp . BIT_XOR_OP relExp

    BIT_OR_OP   shift, and go to state 102
    AND         shift, and go to state 103
    BIT_XOR_OP  shift, and go to state 104

    $default  reduce using rule 35 (andExp)


State 44

   22 bool_expression: relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON]
   39 bitRelExp: relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   40 op: . EQ_OP
   41   | . NE_OP
   42   | . GT_OP
   43   | . LT_OP
   44   | . LE_OP
   45   | . GE_OP
   46   | . OR_OP
   47   | . AND_OP
   48 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 105
    AND_OP  shift, and go to state 106
    EQ_OP   shift, and go to state 107
    NE_OP   shift, and go to state 108
    GT_OP   shift, and go to state 109
    LT_OP   shift, and go to state 110
    GE_OP   shift, and go to state 111
    LE_OP   shift, and go to state 112

    RIGHT_PAREN  reduce using rule 22 (bool_expression)
    RIGHT_PAREN  [reduce using rule 39 (bitRelExp)]
    SEMICOLON    reduce using rule 22 (bool_expression)
    SEMICOLON    [reduce using rule 39 (bitRelExp)]
    COMMA        reduce using rule 22 (bool_expression)
    COMMA        [reduce using rule 39 (bitRelExp)]
    COLON        reduce using rule 22 (bool_expression)
    COLON        [reduce using rule 39 (bitRelExp)]
    OR_OP        [reduce using rule 39 (bitRelExp)]
    AND_OP       [reduce using rule 39 (bitRelExp)]
    BIT_OR_OP    reduce using rule 39 (bitRelExp)
    AND          reduce using rule 39 (bitRelExp)
    BIT_XOR_OP   reduce using rule 39 (bitRelExp)
    $default     reduce using rule 22 (bool_expression)

    op  go to state 113


State 45

   49 relExp: bitshiftExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   50 bitshiftExp: bitshiftExp . BIT_LSHIFT_OP sumExp
   51            | bitshiftExp . BIT_RSHIFT_OP sumExp

    BIT_LSHIFT_OP  shift, and go to state 114
    BIT_RSHIFT_OP  shift, and go to state 115

    $default  reduce using rule 49 (relExp)


State 46

   52 bitshiftExp: sumExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   53 pls_min: . ADD_OP
   54        | . SUB_OP
   58 sumExp: sumExp . pls_min mulExp

    ADD_OP  shift, and go to state 116
    SUB_OP  shift, and go to state 117

    $default  reduce using rule 52 (bitshiftExp)

    pls_min  go to state 118


State 47

   55 mul_div: . MUL_OP
   56        | . DIV_OP
   57        | . MOD_OP
   59 sumExp: mulExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, ADD_OP, SUB_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   60 mulExp: mulExp . mul_div unaryExp

    MUL_OP  shift, and go to state 119
    DIV_OP  shift, and go to state 120
    MOD_OP  shift, and go to state 121

    $default  reduce using rule 59 (sumExp)

    mul_div  go to state 122


State 48

   61 mulExp: unaryExp .

    $default  reduce using rule 61 (mulExp)


State 49

   66 unaryExp: value .

    $default  reduce using rule 66 (unaryExp)


State 50

   96 statement: if_statement .

    $default  reduce using rule 96 (statement)


State 51

   97 statement: while_statement .

    $default  reduce using rule 97 (statement)


State 52

   98 statement: for_statement .

    $default  reduce using rule 98 (statement)


State 53

   99 statement: do_statement .

    $default  reduce using rule 99 (statement)


State 54

  100 statement: switch_statement .

    $default  reduce using rule 100 (statement)


State 55

  101 statement: return_statement .

    $default  reduce using rule 101 (statement)


State 56

  102 statement: expression_statement .

    $default  reduce using rule 102 (statement)


State 57

    4 program: $@1 declarations statements .  [$end, FUNC]
   15 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@2 declaration
   17             | . declarations declaration
   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31           | . bool_expression
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   92 expression_statement: . expression SEMICOLON
   95 statements: statements . statement
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  105          | . func_call
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 17
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    IF              shift, and go to state 22
    WHILE           shift, and go to state 23
    FOR             shift, and go to state 24
    DO              shift, and go to state 25
    SWITCH          shift, and go to state 26
    RETURN          shift, and go to state 27
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    ENUM            shift, and go to state 30
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    $end      reduce using rule 4 (program)
    FUNC      reduce using rule 4 (program)
    $default  reduce using rule 15 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    expression_statement  go to state 56
    statement             go to state 123
    enum_statement        go to state 59
    func_call             go to state 60


State 58

   94 statements: statement .

    $default  reduce using rule 94 (statements)


State 59

  104 statement: enum_statement .

    $default  reduce using rule 104 (statement)


State 60

  105 statement: func_call .

    $default  reduce using rule 105 (statement)


State 61

   16 declarations: $@2 declaration .

    $default  reduce using rule 16 (declarations)


State 62

   15 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@2 declaration
   17             | . declarations declaration
   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31           | . bool_expression
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   92 expression_statement: . expression SEMICOLON
   95 statements: statements . statement
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  105          | . func_call
  117 function_tail: LEFT_CURLY_BRACKET statements . RIGHT_CURLY_BRACKET
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT                shift, and go to state 17
    CONST_INT            shift, and go to state 18
    CONST_FLOAT          shift, and go to state 19
    CONST_CHAR           shift, and go to state 20
    STRING_LITERAL       shift, and go to state 21
    IF                   shift, and go to state 22
    WHILE                shift, and go to state 23
    FOR                  shift, and go to state 24
    DO                   shift, and go to state 25
    SWITCH               shift, and go to state 26
    RETURN               shift, and go to state 27
    TRUE_TOKEN           shift, and go to state 28
    FALSE_TOKEN          shift, and go to state 29
    ENUM                 shift, and go to state 30
    LEFT_PAREN           shift, and go to state 31
    RIGHT_CURLY_BRACKET  shift, and go to state 124
    INC_OP               shift, and go to state 32
    DEC_OP               shift, and go to state 33
    NOT_OP               shift, and go to state 34

    $default  reduce using rule 15 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    expression_statement  go to state 56
    statement             go to state 123
    enum_statement        go to state 59
    func_call             go to state 60


State 63

    5 type: INTEGER .

    $default  reduce using rule 5 (type)


State 64

    6 type: FLOAT .

    $default  reduce using rule 6 (type)


State 65

    7 type: DOUBLE .

    $default  reduce using rule 7 (type)


State 66

    8 type: VOID .

    $default  reduce using rule 8 (type)


State 67

    9 type: BOOLEAN .

    $default  reduce using rule 9 (type)


State 68

   10 type: CHAR .

    $default  reduce using rule 10 (type)


State 69

  121 parameter: type . IDENT

    IDENT  shift, and go to state 125


State 70

  116 function_head: FUNC IDENT LEFT_PAREN param_empty . RIGHT_PAREN type

    RIGHT_PAREN  shift, and go to state 126


State 71

  114 param_empty: parameters .  [RIGHT_PAREN]
  119 parameters: parameters . COMMA parameter

    COMMA  shift, and go to state 127

    $default  reduce using rule 114 (param_empty)


State 72

  118 parameters: parameter .

    $default  reduce using rule 118 (parameters)


State 73

   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31           | . bool_expression
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
  127 func_call: IDENT LEFT_PAREN . arguments RIGHT_PAREN
  129 arguments: . argument
  130          | . arguments COMMA argument
  131          | . %empty  [RIGHT_PAREN, COMMA]
  132 argument: . expression

    IDENT           shift, and go to state 90
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    $default  reduce using rule 131 (arguments)

    bool_expression  go to state 38
    assign           go to state 39
    expression       go to state 128
    simpleExp        go to state 41
    andExp           go to state 42
    bitRelExp        go to state 43
    relExp           go to state 44
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49
    arguments        go to state 129
    argument         go to state 130


State 74

   27 expression: IDENT INC_OP .

    $default  reduce using rule 27 (expression)


State 75

   28 expression: IDENT DEC_OP .

    $default  reduce using rule 28 (expression)


State 76

   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   25 assign: . IDENT ASSIGN_OP expression
   25       | IDENT ASSIGN_OP . expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31           | . bool_expression
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
  128 func_call: IDENT ASSIGN_OP . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 131
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    bool_expression  go to state 38
    assign           go to state 39
    expression       go to state 132
    simpleExp        go to state 41
    andExp           go to state 42
    bitRelExp        go to state 43
    relExp           go to state 44
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49


State 77

   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: IF LEFT_PAREN . bool_expression RIGHT_PAREN tail else_if else_part

    IDENT           shift, and go to state 133
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    bool_expression  go to state 134
    relExp           go to state 135
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49


State 78

   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   78 while_statement: WHILE LEFT_PAREN . bool_expression RIGHT_PAREN tail_inloop

    IDENT           shift, and go to state 133
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    bool_expression  go to state 136
    relExp           go to state 135
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49


State 79

   25 assign: . IDENT ASSIGN_OP expression
   79 for_statement: FOR LEFT_PAREN . assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

    IDENT  shift, and go to state 137

    assign  go to state 138


State 80

   90 break_statement: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 139


State 81

   91 continue_statement: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 140


State 82

   15 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@2 declaration
   17             | . declarations declaration
   21 tail_inloop: LEFT_CURLY_BRACKET . statements_inloop RIGHT_CURLY_BRACKET
   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31           | . bool_expression
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   90 break_statement: . BREAK SEMICOLON
   91 continue_statement: . CONTINUE SEMICOLON
   92 expression_statement: . expression SEMICOLON
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  105          | . func_call
  106 statement_inloop: . statement
  107                 | . break_statement
  108                 | . continue_statement
  109 statements_inloop: . statement_inloop
  110                  | . statements_inloop statement_inloop
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 17
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    IF              shift, and go to state 22
    WHILE           shift, and go to state 23
    FOR             shift, and go to state 24
    DO              shift, and go to state 25
    SWITCH          shift, and go to state 26
    RETURN          shift, and go to state 27
    BREAK           shift, and go to state 80
    CONTINUE        shift, and go to state 81
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    ENUM            shift, and go to state 30
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    $default  reduce using rule 15 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    break_statement       go to state 84
    continue_statement    go to state 85
    expression_statement  go to state 56
    statement             go to state 86
    statement_inloop      go to state 87
    statements_inloop     go to state 141
    enum_statement        go to state 59
    func_call             go to state 60


State 83

   80 do_statement: DO tail_inloop . WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON

    WHILE  shift, and go to state 142


State 84

  107 statement_inloop: break_statement .

    $default  reduce using rule 107 (statement_inloop)


State 85

  108 statement_inloop: continue_statement .

    $default  reduce using rule 108 (statement_inloop)


State 86

  106 statement_inloop: statement .

    $default  reduce using rule 106 (statement_inloop)


State 87

  109 statements_inloop: statement_inloop .

    $default  reduce using rule 109 (statements_inloop)


State 88

   15 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@2 declaration
   17             | . declarations declaration
   20 tail_inloop: statements_inloop .  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, FUNC, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31           | . bool_expression
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   90 break_statement: . BREAK SEMICOLON
   91 continue_statement: . CONTINUE SEMICOLON
   92 expression_statement: . expression SEMICOLON
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  105          | . func_call
  106 statement_inloop: . statement
  107                 | . break_statement
  108                 | . continue_statement
  110 statements_inloop: statements_inloop . statement_inloop
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 17
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    IF              shift, and go to state 22
    WHILE           shift, and go to state 23
    FOR             shift, and go to state 24
    DO              shift, and go to state 25
    SWITCH          shift, and go to state 26
    RETURN          shift, and go to state 27
    BREAK           shift, and go to state 80
    CONTINUE        shift, and go to state 81
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    ENUM            shift, and go to state 30
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    $end                 reduce using rule 20 (tail_inloop)
    INTEGER              reduce using rule 15 ($@2)
    INTEGER              [reduce using rule 20 (tail_inloop)]
    FLOAT                reduce using rule 15 ($@2)
    FLOAT                [reduce using rule 20 (tail_inloop)]
    DOUBLE               reduce using rule 15 ($@2)
    DOUBLE               [reduce using rule 20 (tail_inloop)]
    VOID                 reduce using rule 15 ($@2)
    VOID                 [reduce using rule 20 (tail_inloop)]
    BOOLEAN              reduce using rule 15 ($@2)
    BOOLEAN              [reduce using rule 20 (tail_inloop)]
    CHAR                 reduce using rule 15 ($@2)
    CHAR                 [reduce using rule 20 (tail_inloop)]
    CONST                reduce using rule 15 ($@2)
    CONST                [reduce using rule 20 (tail_inloop)]
    IDENT                [reduce using rule 20 (tail_inloop)]
    CONST_INT            [reduce using rule 20 (tail_inloop)]
    CONST_FLOAT          [reduce using rule 20 (tail_inloop)]
    CONST_CHAR           [reduce using rule 20 (tail_inloop)]
    STRING_LITERAL       [reduce using rule 20 (tail_inloop)]
    IF                   [reduce using rule 20 (tail_inloop)]
    ELSE                 reduce using rule 20 (tail_inloop)
    ELIF                 reduce using rule 20 (tail_inloop)
    WHILE                [reduce using rule 20 (tail_inloop)]
    FOR                  [reduce using rule 20 (tail_inloop)]
    DO                   [reduce using rule 20 (tail_inloop)]
    SWITCH               [reduce using rule 20 (tail_inloop)]
    RETURN               [reduce using rule 20 (tail_inloop)]
    BREAK                [reduce using rule 20 (tail_inloop)]
    CONTINUE             [reduce using rule 20 (tail_inloop)]
    TRUE_TOKEN           [reduce using rule 20 (tail_inloop)]
    FALSE_TOKEN          [reduce using rule 20 (tail_inloop)]
    ENUM                 [reduce using rule 20 (tail_inloop)]
    FUNC                 reduce using rule 20 (tail_inloop)
    LEFT_PAREN           [reduce using rule 20 (tail_inloop)]
    RIGHT_CURLY_BRACKET  reduce using rule 20 (tail_inloop)
    INC_OP               [reduce using rule 20 (tail_inloop)]
    DEC_OP               [reduce using rule 20 (tail_inloop)]
    NOT_OP               [reduce using rule 20 (tail_inloop)]
    $default             reduce using rule 15 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    break_statement       go to state 84
    continue_statement    go to state 85
    expression_statement  go to state 56
    statement             go to state 86
    statement_inloop      go to state 143
    enum_statement        go to state 59
    func_call             go to state 60


State 89

   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31           | . bool_expression
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   81 switch_statement: SWITCH LEFT_PAREN . expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    IDENT           shift, and go to state 90
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    bool_expression  go to state 38
    assign           go to state 39
    expression       go to state 144
    simpleExp        go to state 41
    andExp           go to state 42
    bitRelExp        go to state 43
    relExp           go to state 44
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49


State 90

   25 assign: IDENT . ASSIGN_OP expression
   27 expression: IDENT . INC_OP
   28           | IDENT . DEC_OP
   30           | IDENT .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON]
   65 unaryExp: IDENT .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, ADD_OP, SUB_OP, MUL_OP, DIV_OP, MOD_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]

    INC_OP     shift, and go to state 74
    DEC_OP     shift, and go to state 75
    ASSIGN_OP  shift, and go to state 145

    RIGHT_PAREN  reduce using rule 30 (expression)
    RIGHT_PAREN  [reduce using rule 65 (unaryExp)]
    SEMICOLON    reduce using rule 30 (expression)
    SEMICOLON    [reduce using rule 65 (unaryExp)]
    COMMA        reduce using rule 30 (expression)
    COMMA        [reduce using rule 65 (unaryExp)]
    COLON        reduce using rule 30 (expression)
    COLON        [reduce using rule 65 (unaryExp)]
    $default     reduce using rule 65 (unaryExp)


State 91

   87 return_val: expression .

    $default  reduce using rule 87 (return_val)


State 92

   89 return_statement: RETURN return_val . SEMICOLON

    SEMICOLON  shift, and go to state 146


State 93

  122 enum_statement: ENUM IDENT . LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 147


State 94

   67 unaryExp: LEFT_PAREN expression . RIGHT_PAREN

    RIGHT_PAREN  shift, and go to state 148


State 95

   62 unaryExp: INC_OP IDENT .

    $default  reduce using rule 62 (unaryExp)


State 96

   63 unaryExp: DEC_OP IDENT .

    $default  reduce using rule 63 (unaryExp)


State 97

   64 unaryExp: NOT_OP IDENT .

    $default  reduce using rule 64 (unaryExp)


State 98

   13 declaration: beforedecl type . IDENT SEMICOLON
   14            | beforedecl type . IDENT ASSIGN_OP expression SEMICOLON

    IDENT  shift, and go to state 149


State 99

   92 expression_statement: expression SEMICOLON .

    $default  reduce using rule 92 (expression_statement)


State 100

   32 simpleExp: simpleExp OR_OP . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL

    IDENT           shift, and go to state 133
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    andExp       go to state 150
    bitRelExp    go to state 43
    relExp       go to state 151
    bitshiftExp  go to state 45
    sumExp       go to state 46
    mulExp       go to state 47
    unaryExp     go to state 48
    value        go to state 49


State 101

   34 andExp: andExp AND_OP .

    $default  reduce using rule 34 (andExp)


State 102

   36 bitRelExp: bitRelExp BIT_OR_OP . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL

    IDENT           shift, and go to state 133
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    relExp       go to state 152
    bitshiftExp  go to state 45
    sumExp       go to state 46
    mulExp       go to state 47
    unaryExp     go to state 48
    value        go to state 49


State 103

   37 bitRelExp: bitRelExp AND . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL

    IDENT           shift, and go to state 133
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    relExp       go to state 153
    bitshiftExp  go to state 45
    sumExp       go to state 46
    mulExp       go to state 47
    unaryExp     go to state 48
    value        go to state 49


State 104

   38 bitRelExp: bitRelExp BIT_XOR_OP . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL

    IDENT           shift, and go to state 133
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    relExp       go to state 154
    bitshiftExp  go to state 45
    sumExp       go to state 46
    mulExp       go to state 47
    unaryExp     go to state 48
    value        go to state 49


State 105

   46 op: OR_OP .

    $default  reduce using rule 46 (op)


State 106

   47 op: AND_OP .

    $default  reduce using rule 47 (op)


State 107

   40 op: EQ_OP .

    $default  reduce using rule 40 (op)


State 108

   41 op: NE_OP .

    $default  reduce using rule 41 (op)


State 109

   42 op: GT_OP .

    $default  reduce using rule 42 (op)


State 110

   43 op: LT_OP .

    $default  reduce using rule 43 (op)


State 111

   45 op: GE_OP .

    $default  reduce using rule 45 (op)


State 112

   44 op: LE_OP .

    $default  reduce using rule 44 (op)


State 113

   48 relExp: relExp op . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL

    IDENT           shift, and go to state 133
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    bitshiftExp  go to state 155
    sumExp       go to state 46
    mulExp       go to state 47
    unaryExp     go to state 48
    value        go to state 49


State 114

   50 bitshiftExp: bitshiftExp BIT_LSHIFT_OP . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL

    IDENT           shift, and go to state 133
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    sumExp    go to state 156
    mulExp    go to state 47
    unaryExp  go to state 48
    value     go to state 49


State 115

   51 bitshiftExp: bitshiftExp BIT_RSHIFT_OP . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL

    IDENT           shift, and go to state 133
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    sumExp    go to state 157
    mulExp    go to state 47
    unaryExp  go to state 48
    value     go to state 49


State 116

   53 pls_min: ADD_OP .

    $default  reduce using rule 53 (pls_min)


State 117

   54 pls_min: SUB_OP .

    $default  reduce using rule 54 (pls_min)


State 118

   58 sumExp: sumExp pls_min . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL

    IDENT           shift, and go to state 133
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    mulExp    go to state 158
    unaryExp  go to state 48
    value     go to state 49


State 119

   55 mul_div: MUL_OP .

    $default  reduce using rule 55 (mul_div)


State 120

   56 mul_div: DIV_OP .

    $default  reduce using rule 56 (mul_div)


State 121

   57 mul_div: MOD_OP .

    $default  reduce using rule 57 (mul_div)


State 122

   60 mulExp: mulExp mul_div . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL

    IDENT           shift, and go to state 133
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    unaryExp  go to state 159
    value     go to state 49


State 123

   95 statements: statements statement .

    $default  reduce using rule 95 (statements)


State 124

  117 function_tail: LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET .

    $default  reduce using rule 117 (function_tail)


State 125

  121 parameter: type IDENT .

    $default  reduce using rule 121 (parameter)


State 126

    5 type: . INTEGER
    6     | . FLOAT
    7     | . DOUBLE
    8     | . VOID
    9     | . BOOLEAN
   10     | . CHAR
  116 function_head: FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN . type

    INTEGER  shift, and go to state 63
    FLOAT    shift, and go to state 64
    DOUBLE   shift, and go to state 65
    VOID     shift, and go to state 66
    BOOLEAN  shift, and go to state 67
    CHAR     shift, and go to state 68

    type  go to state 160


State 127

    5 type: . INTEGER
    6     | . FLOAT
    7     | . DOUBLE
    8     | . VOID
    9     | . BOOLEAN
   10     | . CHAR
  119 parameters: parameters COMMA . parameter
  121 parameter: . type IDENT

    INTEGER  shift, and go to state 63
    FLOAT    shift, and go to state 64
    DOUBLE   shift, and go to state 65
    VOID     shift, and go to state 66
    BOOLEAN  shift, and go to state 67
    CHAR     shift, and go to state 68

    type       go to state 69
    parameter  go to state 161


State 128

  132 argument: expression .

    $default  reduce using rule 132 (argument)


State 129

  127 func_call: IDENT LEFT_PAREN arguments . RIGHT_PAREN
  130 arguments: arguments . COMMA argument

    RIGHT_PAREN  shift, and go to state 162
    COMMA        shift, and go to state 163


State 130

  129 arguments: argument .

    $default  reduce using rule 129 (arguments)


State 131

   25 assign: IDENT . ASSIGN_OP expression
   27 expression: IDENT . INC_OP
   28           | IDENT . DEC_OP
   30           | IDENT .  [SEMICOLON]
   65 unaryExp: IDENT .  [SEMICOLON, ADD_OP, SUB_OP, MUL_OP, DIV_OP, MOD_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
  128 func_call: IDENT ASSIGN_OP IDENT . LEFT_PAREN arguments RIGHT_PAREN

    LEFT_PAREN  shift, and go to state 164
    INC_OP      shift, and go to state 74
    DEC_OP      shift, and go to state 75
    ASSIGN_OP   shift, and go to state 145

    SEMICOLON  reduce using rule 30 (expression)
    SEMICOLON  [reduce using rule 65 (unaryExp)]
    $default   reduce using rule 65 (unaryExp)


State 132

   25 assign: IDENT ASSIGN_OP expression .

    $default  reduce using rule 25 (assign)


State 133

   65 unaryExp: IDENT .

    $default  reduce using rule 65 (unaryExp)


State 134

   77 if_statement: IF LEFT_PAREN bool_expression . RIGHT_PAREN tail else_if else_part

    RIGHT_PAREN  shift, and go to state 165


State 135

   22 bool_expression: relExp .  [RIGHT_PAREN, SEMICOLON]
   40 op: . EQ_OP
   41   | . NE_OP
   42   | . GT_OP
   43   | . LT_OP
   44   | . LE_OP
   45   | . GE_OP
   46   | . OR_OP
   47   | . AND_OP
   48 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 105
    AND_OP  shift, and go to state 106
    EQ_OP   shift, and go to state 107
    NE_OP   shift, and go to state 108
    GT_OP   shift, and go to state 109
    LT_OP   shift, and go to state 110
    GE_OP   shift, and go to state 111
    LE_OP   shift, and go to state 112

    $default  reduce using rule 22 (bool_expression)

    op  go to state 113


State 136

   78 while_statement: WHILE LEFT_PAREN bool_expression . RIGHT_PAREN tail_inloop

    RIGHT_PAREN  shift, and go to state 166


State 137

   25 assign: IDENT . ASSIGN_OP expression

    ASSIGN_OP  shift, and go to state 145


State 138

   79 for_statement: FOR LEFT_PAREN assign . SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

    SEMICOLON  shift, and go to state 167


State 139

   90 break_statement: BREAK SEMICOLON .

    $default  reduce using rule 90 (break_statement)


State 140

   91 continue_statement: CONTINUE SEMICOLON .

    $default  reduce using rule 91 (continue_statement)


State 141

   15 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@2 declaration
   17             | . declarations declaration
   21 tail_inloop: LEFT_CURLY_BRACKET statements_inloop . RIGHT_CURLY_BRACKET
   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31           | . bool_expression
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   90 break_statement: . BREAK SEMICOLON
   91 continue_statement: . CONTINUE SEMICOLON
   92 expression_statement: . expression SEMICOLON
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  105          | . func_call
  106 statement_inloop: . statement
  107                 | . break_statement
  108                 | . continue_statement
  110 statements_inloop: statements_inloop . statement_inloop
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT                shift, and go to state 17
    CONST_INT            shift, and go to state 18
    CONST_FLOAT          shift, and go to state 19
    CONST_CHAR           shift, and go to state 20
    STRING_LITERAL       shift, and go to state 21
    IF                   shift, and go to state 22
    WHILE                shift, and go to state 23
    FOR                  shift, and go to state 24
    DO                   shift, and go to state 25
    SWITCH               shift, and go to state 26
    RETURN               shift, and go to state 27
    BREAK                shift, and go to state 80
    CONTINUE             shift, and go to state 81
    TRUE_TOKEN           shift, and go to state 28
    FALSE_TOKEN          shift, and go to state 29
    ENUM                 shift, and go to state 30
    LEFT_PAREN           shift, and go to state 31
    RIGHT_CURLY_BRACKET  shift, and go to state 168
    INC_OP               shift, and go to state 32
    DEC_OP               shift, and go to state 33
    NOT_OP               shift, and go to state 34

    $default  reduce using rule 15 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    break_statement       go to state 84
    continue_statement    go to state 85
    expression_statement  go to state 56
    statement             go to state 86
    statement_inloop      go to state 143
    enum_statement        go to state 59
    func_call             go to state 60


State 142

   80 do_statement: DO tail_inloop WHILE . LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON

    LEFT_PAREN  shift, and go to state 169


State 143

  110 statements_inloop: statements_inloop statement_inloop .

    $default  reduce using rule 110 (statements_inloop)


State 144

   81 switch_statement: SWITCH LEFT_PAREN expression . RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    RIGHT_PAREN  shift, and go to state 170


State 145

   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   25 assign: . IDENT ASSIGN_OP expression
   25       | IDENT ASSIGN_OP . expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31           | . bool_expression
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL

    IDENT           shift, and go to state 90
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    bool_expression  go to state 38
    assign           go to state 39
    expression       go to state 132
    simpleExp        go to state 41
    andExp           go to state 42
    bitRelExp        go to state 43
    relExp           go to state 44
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49


State 146

   89 return_statement: RETURN return_val SEMICOLON .

    $default  reduce using rule 89 (return_statement)


State 147

  122 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET . enum_list RIGHT_CURLY_BRACKET
  123 enum_list: . one_val
  124          | . enum_list COMMA one_val
  125 one_val: . IDENT
  126        | . IDENT ASSIGN_OP value

    IDENT  shift, and go to state 171

    enum_list  go to state 172
    one_val    go to state 173


State 148

   67 unaryExp: LEFT_PAREN expression RIGHT_PAREN .

    $default  reduce using rule 67 (unaryExp)


State 149

   13 declaration: beforedecl type IDENT . SEMICOLON
   14            | beforedecl type IDENT . ASSIGN_OP expression SEMICOLON

    SEMICOLON  shift, and go to state 174
    ASSIGN_OP  shift, and go to state 175


State 150

   32 simpleExp: simpleExp OR_OP andExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP]
   34 andExp: andExp . AND_OP

    AND_OP  shift, and go to state 101

    $default  reduce using rule 32 (simpleExp)


State 151

   39 bitRelExp: relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   40 op: . EQ_OP
   41   | . NE_OP
   42   | . GT_OP
   43   | . LT_OP
   44   | . LE_OP
   45   | . GE_OP
   46   | . OR_OP
   47   | . AND_OP
   48 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 105
    AND_OP  shift, and go to state 106
    EQ_OP   shift, and go to state 107
    NE_OP   shift, and go to state 108
    GT_OP   shift, and go to state 109
    LT_OP   shift, and go to state 110
    GE_OP   shift, and go to state 111
    LE_OP   shift, and go to state 112

    OR_OP     [reduce using rule 39 (bitRelExp)]
    AND_OP    [reduce using rule 39 (bitRelExp)]
    $default  reduce using rule 39 (bitRelExp)

    op  go to state 113


State 152

   36 bitRelExp: bitRelExp BIT_OR_OP relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   40 op: . EQ_OP
   41   | . NE_OP
   42   | . GT_OP
   43   | . LT_OP
   44   | . LE_OP
   45   | . GE_OP
   46   | . OR_OP
   47   | . AND_OP
   48 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 105
    AND_OP  shift, and go to state 106
    EQ_OP   shift, and go to state 107
    NE_OP   shift, and go to state 108
    GT_OP   shift, and go to state 109
    LT_OP   shift, and go to state 110
    GE_OP   shift, and go to state 111
    LE_OP   shift, and go to state 112

    OR_OP     [reduce using rule 36 (bitRelExp)]
    AND_OP    [reduce using rule 36 (bitRelExp)]
    $default  reduce using rule 36 (bitRelExp)

    op  go to state 113


State 153

   37 bitRelExp: bitRelExp AND relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   40 op: . EQ_OP
   41   | . NE_OP
   42   | . GT_OP
   43   | . LT_OP
   44   | . LE_OP
   45   | . GE_OP
   46   | . OR_OP
   47   | . AND_OP
   48 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 105
    AND_OP  shift, and go to state 106
    EQ_OP   shift, and go to state 107
    NE_OP   shift, and go to state 108
    GT_OP   shift, and go to state 109
    LT_OP   shift, and go to state 110
    GE_OP   shift, and go to state 111
    LE_OP   shift, and go to state 112

    OR_OP     [reduce using rule 37 (bitRelExp)]
    AND_OP    [reduce using rule 37 (bitRelExp)]
    $default  reduce using rule 37 (bitRelExp)

    op  go to state 113


State 154

   38 bitRelExp: bitRelExp BIT_XOR_OP relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   40 op: . EQ_OP
   41   | . NE_OP
   42   | . GT_OP
   43   | . LT_OP
   44   | . LE_OP
   45   | . GE_OP
   46   | . OR_OP
   47   | . AND_OP
   48 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 105
    AND_OP  shift, and go to state 106
    EQ_OP   shift, and go to state 107
    NE_OP   shift, and go to state 108
    GT_OP   shift, and go to state 109
    LT_OP   shift, and go to state 110
    GE_OP   shift, and go to state 111
    LE_OP   shift, and go to state 112

    OR_OP     [reduce using rule 38 (bitRelExp)]
    AND_OP    [reduce using rule 38 (bitRelExp)]
    $default  reduce using rule 38 (bitRelExp)

    op  go to state 113


State 155

   48 relExp: relExp op bitshiftExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   50 bitshiftExp: bitshiftExp . BIT_LSHIFT_OP sumExp
   51            | bitshiftExp . BIT_RSHIFT_OP sumExp

    BIT_LSHIFT_OP  shift, and go to state 114
    BIT_RSHIFT_OP  shift, and go to state 115

    $default  reduce using rule 48 (relExp)


State 156

   50 bitshiftExp: bitshiftExp BIT_LSHIFT_OP sumExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   53 pls_min: . ADD_OP
   54        | . SUB_OP
   58 sumExp: sumExp . pls_min mulExp

    ADD_OP  shift, and go to state 116
    SUB_OP  shift, and go to state 117

    $default  reduce using rule 50 (bitshiftExp)

    pls_min  go to state 118


State 157

   51 bitshiftExp: bitshiftExp BIT_RSHIFT_OP sumExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   53 pls_min: . ADD_OP
   54        | . SUB_OP
   58 sumExp: sumExp . pls_min mulExp

    ADD_OP  shift, and go to state 116
    SUB_OP  shift, and go to state 117

    $default  reduce using rule 51 (bitshiftExp)

    pls_min  go to state 118


State 158

   55 mul_div: . MUL_OP
   56        | . DIV_OP
   57        | . MOD_OP
   58 sumExp: sumExp pls_min mulExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, ADD_OP, SUB_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   60 mulExp: mulExp . mul_div unaryExp

    MUL_OP  shift, and go to state 119
    DIV_OP  shift, and go to state 120
    MOD_OP  shift, and go to state 121

    $default  reduce using rule 58 (sumExp)

    mul_div  go to state 122


State 159

   60 mulExp: mulExp mul_div unaryExp .

    $default  reduce using rule 60 (mulExp)


State 160

  116 function_head: FUNC IDENT LEFT_PAREN param_empty RIGHT_PAREN type .

    $default  reduce using rule 116 (function_head)


State 161

  119 parameters: parameters COMMA parameter .

    $default  reduce using rule 119 (parameters)


State 162

  127 func_call: IDENT LEFT_PAREN arguments RIGHT_PAREN .

    $default  reduce using rule 127 (func_call)


State 163

   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31           | . bool_expression
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
  130 arguments: arguments COMMA . argument
  132 argument: . expression

    IDENT           shift, and go to state 90
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    bool_expression  go to state 38
    assign           go to state 39
    expression       go to state 128
    simpleExp        go to state 41
    andExp           go to state 42
    bitRelExp        go to state 43
    relExp           go to state 44
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49
    argument         go to state 176


State 164

   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31           | . bool_expression
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
  128 func_call: IDENT ASSIGN_OP IDENT LEFT_PAREN . arguments RIGHT_PAREN
  129 arguments: . argument
  130          | . arguments COMMA argument
  131          | . %empty  [RIGHT_PAREN, COMMA]
  132 argument: . expression

    IDENT           shift, and go to state 90
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    $default  reduce using rule 131 (arguments)

    bool_expression  go to state 38
    assign           go to state 39
    expression       go to state 128
    simpleExp        go to state 41
    andExp           go to state 42
    bitRelExp        go to state 43
    relExp           go to state 44
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49
    arguments        go to state 177
    argument         go to state 130


State 165

   15 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@2 declaration
   17             | . declarations declaration
   18 tail: . statements
   19     | . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31           | . bool_expression
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   77             | IF LEFT_PAREN bool_expression RIGHT_PAREN . tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   92 expression_statement: . expression SEMICOLON
   93 statements: . %empty  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, FUNC, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   94           | . statement
   95           | . statements statement
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  105          | . func_call
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT               shift, and go to state 17
    CONST_INT           shift, and go to state 18
    CONST_FLOAT         shift, and go to state 19
    CONST_CHAR          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    IF                  shift, and go to state 22
    WHILE               shift, and go to state 23
    FOR                 shift, and go to state 24
    DO                  shift, and go to state 25
    SWITCH              shift, and go to state 26
    RETURN              shift, and go to state 27
    TRUE_TOKEN          shift, and go to state 28
    FALSE_TOKEN         shift, and go to state 29
    ENUM                shift, and go to state 30
    LEFT_PAREN          shift, and go to state 31
    LEFT_CURLY_BRACKET  shift, and go to state 178
    INC_OP              shift, and go to state 32
    DEC_OP              shift, and go to state 33
    NOT_OP              shift, and go to state 34

    $end                 reduce using rule 93 (statements)
    INTEGER              reduce using rule 15 ($@2)
    INTEGER              [reduce using rule 93 (statements)]
    FLOAT                reduce using rule 15 ($@2)
    FLOAT                [reduce using rule 93 (statements)]
    DOUBLE               reduce using rule 15 ($@2)
    DOUBLE               [reduce using rule 93 (statements)]
    VOID                 reduce using rule 15 ($@2)
    VOID                 [reduce using rule 93 (statements)]
    BOOLEAN              reduce using rule 15 ($@2)
    BOOLEAN              [reduce using rule 93 (statements)]
    CHAR                 reduce using rule 15 ($@2)
    CHAR                 [reduce using rule 93 (statements)]
    CONST                reduce using rule 15 ($@2)
    CONST                [reduce using rule 93 (statements)]
    IDENT                [reduce using rule 93 (statements)]
    CONST_INT            [reduce using rule 93 (statements)]
    CONST_FLOAT          [reduce using rule 93 (statements)]
    CONST_CHAR           [reduce using rule 93 (statements)]
    STRING_LITERAL       [reduce using rule 93 (statements)]
    IF                   [reduce using rule 93 (statements)]
    ELSE                 reduce using rule 93 (statements)
    ELIF                 reduce using rule 93 (statements)
    WHILE                [reduce using rule 93 (statements)]
    FOR                  [reduce using rule 93 (statements)]
    DO                   [reduce using rule 93 (statements)]
    SWITCH               [reduce using rule 93 (statements)]
    RETURN               [reduce using rule 93 (statements)]
    BREAK                reduce using rule 93 (statements)
    CONTINUE             reduce using rule 93 (statements)
    TRUE_TOKEN           [reduce using rule 93 (statements)]
    FALSE_TOKEN          [reduce using rule 93 (statements)]
    ENUM                 [reduce using rule 93 (statements)]
    FUNC                 reduce using rule 93 (statements)
    LEFT_PAREN           [reduce using rule 93 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 93 (statements)
    INC_OP               [reduce using rule 93 (statements)]
    DEC_OP               [reduce using rule 93 (statements)]
    NOT_OP               [reduce using rule 93 (statements)]
    $default             reduce using rule 15 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    tail                  go to state 179
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    expression_statement  go to state 56
    statements            go to state 180
    statement             go to state 58
    enum_statement        go to state 59
    func_call             go to state 60


State 166

   15 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@2 declaration
   17             | . declarations declaration
   20 tail_inloop: . statements_inloop
   21            | . LEFT_CURLY_BRACKET statements_inloop RIGHT_CURLY_BRACKET
   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31           | . bool_expression
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   78                | WHILE LEFT_PAREN bool_expression RIGHT_PAREN . tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   90 break_statement: . BREAK SEMICOLON
   91 continue_statement: . CONTINUE SEMICOLON
   92 expression_statement: . expression SEMICOLON
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  105          | . func_call
  106 statement_inloop: . statement
  107                 | . break_statement
  108                 | . continue_statement
  109 statements_inloop: . statement_inloop
  110                  | . statements_inloop statement_inloop
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT               shift, and go to state 17
    CONST_INT           shift, and go to state 18
    CONST_FLOAT         shift, and go to state 19
    CONST_CHAR          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    IF                  shift, and go to state 22
    WHILE               shift, and go to state 23
    FOR                 shift, and go to state 24
    DO                  shift, and go to state 25
    SWITCH              shift, and go to state 26
    RETURN              shift, and go to state 27
    BREAK               shift, and go to state 80
    CONTINUE            shift, and go to state 81
    TRUE_TOKEN          shift, and go to state 28
    FALSE_TOKEN         shift, and go to state 29
    ENUM                shift, and go to state 30
    LEFT_PAREN          shift, and go to state 31
    LEFT_CURLY_BRACKET  shift, and go to state 82
    INC_OP              shift, and go to state 32
    DEC_OP              shift, and go to state 33
    NOT_OP              shift, and go to state 34

    $default  reduce using rule 15 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    tail_inloop           go to state 181
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    break_statement       go to state 84
    continue_statement    go to state 85
    expression_statement  go to state 56
    statement             go to state 86
    statement_inloop      go to state 87
    statements_inloop     go to state 88
    enum_statement        go to state 59
    func_call             go to state 60


State 167

   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   79 for_statement: FOR LEFT_PAREN assign SEMICOLON . bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

    IDENT           shift, and go to state 133
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    bool_expression  go to state 182
    relExp           go to state 135
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49


State 168

   21 tail_inloop: LEFT_CURLY_BRACKET statements_inloop RIGHT_CURLY_BRACKET .

    $default  reduce using rule 21 (tail_inloop)


State 169

   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   80 do_statement: DO tail_inloop WHILE LEFT_PAREN . bool_expression RIGHT_PAREN SEMICOLON

    IDENT           shift, and go to state 133
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    bool_expression  go to state 183
    relExp           go to state 135
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49


State 170

   81 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN . LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 184


State 171

  125 one_val: IDENT .  [RIGHT_CURLY_BRACKET, COMMA]
  126        | IDENT . ASSIGN_OP value

    ASSIGN_OP  shift, and go to state 185

    $default  reduce using rule 125 (one_val)


State 172

  122 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET enum_list . RIGHT_CURLY_BRACKET
  124 enum_list: enum_list . COMMA one_val

    RIGHT_CURLY_BRACKET  shift, and go to state 186
    COMMA                shift, and go to state 187


State 173

  123 enum_list: one_val .

    $default  reduce using rule 123 (enum_list)


State 174

   13 declaration: beforedecl type IDENT SEMICOLON .

    $default  reduce using rule 13 (declaration)


State 175

   14 declaration: beforedecl type IDENT ASSIGN_OP . expression SEMICOLON
   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31           | . bool_expression
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL

    IDENT           shift, and go to state 90
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    bool_expression  go to state 38
    assign           go to state 39
    expression       go to state 188
    simpleExp        go to state 41
    andExp           go to state 42
    bitRelExp        go to state 43
    relExp           go to state 44
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49


State 176

  130 arguments: arguments COMMA argument .

    $default  reduce using rule 130 (arguments)


State 177

  128 func_call: IDENT ASSIGN_OP IDENT LEFT_PAREN arguments . RIGHT_PAREN
  130 arguments: arguments . COMMA argument

    RIGHT_PAREN  shift, and go to state 189
    COMMA        shift, and go to state 163


State 178

   15 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@2 declaration
   17             | . declarations declaration
   19 tail: LEFT_CURLY_BRACKET . statements RIGHT_CURLY_BRACKET
   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31           | . bool_expression
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   92 expression_statement: . expression SEMICOLON
   93 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, TRUE_TOKEN, FALSE_TOKEN, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   94           | . statement
   95           | . statements statement
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  105          | . func_call
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 17
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    IF              shift, and go to state 22
    WHILE           shift, and go to state 23
    FOR             shift, and go to state 24
    DO              shift, and go to state 25
    SWITCH          shift, and go to state 26
    RETURN          shift, and go to state 27
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    ENUM            shift, and go to state 30
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    INTEGER              reduce using rule 15 ($@2)
    INTEGER              [reduce using rule 93 (statements)]
    FLOAT                reduce using rule 15 ($@2)
    FLOAT                [reduce using rule 93 (statements)]
    DOUBLE               reduce using rule 15 ($@2)
    DOUBLE               [reduce using rule 93 (statements)]
    VOID                 reduce using rule 15 ($@2)
    VOID                 [reduce using rule 93 (statements)]
    BOOLEAN              reduce using rule 15 ($@2)
    BOOLEAN              [reduce using rule 93 (statements)]
    CHAR                 reduce using rule 15 ($@2)
    CHAR                 [reduce using rule 93 (statements)]
    CONST                reduce using rule 15 ($@2)
    CONST                [reduce using rule 93 (statements)]
    IDENT                [reduce using rule 93 (statements)]
    CONST_INT            [reduce using rule 93 (statements)]
    CONST_FLOAT          [reduce using rule 93 (statements)]
    CONST_CHAR           [reduce using rule 93 (statements)]
    STRING_LITERAL       [reduce using rule 93 (statements)]
    IF                   [reduce using rule 93 (statements)]
    WHILE                [reduce using rule 93 (statements)]
    FOR                  [reduce using rule 93 (statements)]
    DO                   [reduce using rule 93 (statements)]
    SWITCH               [reduce using rule 93 (statements)]
    RETURN               [reduce using rule 93 (statements)]
    TRUE_TOKEN           [reduce using rule 93 (statements)]
    FALSE_TOKEN          [reduce using rule 93 (statements)]
    ENUM                 [reduce using rule 93 (statements)]
    LEFT_PAREN           [reduce using rule 93 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 93 (statements)
    INC_OP               [reduce using rule 93 (statements)]
    DEC_OP               [reduce using rule 93 (statements)]
    NOT_OP               [reduce using rule 93 (statements)]
    $default             reduce using rule 15 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    expression_statement  go to state 56
    statements            go to state 190
    statement             go to state 58
    enum_statement        go to state 59
    func_call             go to state 60


State 179

   72 else_if: . ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   73        | . else_if ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   74        | . %empty  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, FUNC, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   77 if_statement: IF LEFT_PAREN bool_expression RIGHT_PAREN tail . else_if else_part

    ELIF  shift, and go to state 191

    ELIF      [reduce using rule 74 (else_if)]
    $default  reduce using rule 74 (else_if)

    else_if  go to state 192


State 180

   15 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@2 declaration
   17             | . declarations declaration
   18 tail: statements .  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, FUNC, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31           | . bool_expression
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   92 expression_statement: . expression SEMICOLON
   95 statements: statements . statement
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  105          | . func_call
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 17
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    IF              shift, and go to state 22
    WHILE           shift, and go to state 23
    FOR             shift, and go to state 24
    DO              shift, and go to state 25
    SWITCH          shift, and go to state 26
    RETURN          shift, and go to state 27
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    ENUM            shift, and go to state 30
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    $end                 reduce using rule 18 (tail)
    INTEGER              reduce using rule 15 ($@2)
    INTEGER              [reduce using rule 18 (tail)]
    FLOAT                reduce using rule 15 ($@2)
    FLOAT                [reduce using rule 18 (tail)]
    DOUBLE               reduce using rule 15 ($@2)
    DOUBLE               [reduce using rule 18 (tail)]
    VOID                 reduce using rule 15 ($@2)
    VOID                 [reduce using rule 18 (tail)]
    BOOLEAN              reduce using rule 15 ($@2)
    BOOLEAN              [reduce using rule 18 (tail)]
    CHAR                 reduce using rule 15 ($@2)
    CHAR                 [reduce using rule 18 (tail)]
    CONST                reduce using rule 15 ($@2)
    CONST                [reduce using rule 18 (tail)]
    IDENT                [reduce using rule 18 (tail)]
    CONST_INT            [reduce using rule 18 (tail)]
    CONST_FLOAT          [reduce using rule 18 (tail)]
    CONST_CHAR           [reduce using rule 18 (tail)]
    STRING_LITERAL       [reduce using rule 18 (tail)]
    IF                   [reduce using rule 18 (tail)]
    ELSE                 reduce using rule 18 (tail)
    ELIF                 reduce using rule 18 (tail)
    WHILE                [reduce using rule 18 (tail)]
    FOR                  [reduce using rule 18 (tail)]
    DO                   [reduce using rule 18 (tail)]
    SWITCH               [reduce using rule 18 (tail)]
    RETURN               [reduce using rule 18 (tail)]
    BREAK                reduce using rule 18 (tail)
    CONTINUE             reduce using rule 18 (tail)
    TRUE_TOKEN           [reduce using rule 18 (tail)]
    FALSE_TOKEN          [reduce using rule 18 (tail)]
    ENUM                 [reduce using rule 18 (tail)]
    FUNC                 reduce using rule 18 (tail)
    LEFT_PAREN           [reduce using rule 18 (tail)]
    RIGHT_CURLY_BRACKET  reduce using rule 18 (tail)
    INC_OP               [reduce using rule 18 (tail)]
    DEC_OP               [reduce using rule 18 (tail)]
    NOT_OP               [reduce using rule 18 (tail)]
    $default             reduce using rule 15 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    expression_statement  go to state 56
    statement             go to state 123
    enum_statement        go to state 59
    func_call             go to state 60


State 181

   78 while_statement: WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop .

    $default  reduce using rule 78 (while_statement)


State 182

   79 for_statement: FOR LEFT_PAREN assign SEMICOLON bool_expression . SEMICOLON expression RIGHT_PAREN tail_inloop

    SEMICOLON  shift, and go to state 193


State 183

   80 do_statement: DO tail_inloop WHILE LEFT_PAREN bool_expression . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN  shift, and go to state 194


State 184

   81 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET . cases RIGHT_CURLY_BRACKET
   82 cases: . case
   83      | . cases case
   84      | . cases default
   86 case: . CASE expression COLON statements BREAK SEMICOLON

    CASE  shift, and go to state 195

    cases  go to state 196
    case   go to state 197


State 185

   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
  126 one_val: IDENT ASSIGN_OP . value

    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21

    value  go to state 198


State 186

  122 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET .

    $default  reduce using rule 122 (enum_statement)


State 187

  124 enum_list: enum_list COMMA . one_val
  125 one_val: . IDENT
  126        | . IDENT ASSIGN_OP value

    IDENT  shift, and go to state 171

    one_val  go to state 199


State 188

   14 declaration: beforedecl type IDENT ASSIGN_OP expression . SEMICOLON

    SEMICOLON  shift, and go to state 200


State 189

  128 func_call: IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN .

    $default  reduce using rule 128 (func_call)


State 190

   15 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@2 declaration
   17             | . declarations declaration
   19 tail: LEFT_CURLY_BRACKET statements . RIGHT_CURLY_BRACKET
   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31           | . bool_expression
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   92 expression_statement: . expression SEMICOLON
   95 statements: statements . statement
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  105          | . func_call
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT                shift, and go to state 17
    CONST_INT            shift, and go to state 18
    CONST_FLOAT          shift, and go to state 19
    CONST_CHAR           shift, and go to state 20
    STRING_LITERAL       shift, and go to state 21
    IF                   shift, and go to state 22
    WHILE                shift, and go to state 23
    FOR                  shift, and go to state 24
    DO                   shift, and go to state 25
    SWITCH               shift, and go to state 26
    RETURN               shift, and go to state 27
    TRUE_TOKEN           shift, and go to state 28
    FALSE_TOKEN          shift, and go to state 29
    ENUM                 shift, and go to state 30
    LEFT_PAREN           shift, and go to state 31
    RIGHT_CURLY_BRACKET  shift, and go to state 201
    INC_OP               shift, and go to state 32
    DEC_OP               shift, and go to state 33
    NOT_OP               shift, and go to state 34

    $default  reduce using rule 15 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    expression_statement  go to state 56
    statement             go to state 123
    enum_statement        go to state 59
    func_call             go to state 60


State 191

   72 else_if: ELIF . LEFT_PAREN bool_expression RIGHT_PAREN tail

    LEFT_PAREN  shift, and go to state 202


State 192

   73 else_if: else_if . ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   75 else_part: . ELSE tail
   76          | . %empty  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, FUNC, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   77 if_statement: IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if . else_part

    ELSE  shift, and go to state 203
    ELIF  shift, and go to state 204

    ELSE      [reduce using rule 76 (else_part)]
    ELIF      [reduce using rule 76 (else_part)]
    $default  reduce using rule 76 (else_part)

    else_part  go to state 205


State 193

   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31           | . bool_expression
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   79 for_statement: FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON . expression RIGHT_PAREN tail_inloop

    IDENT           shift, and go to state 90
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    bool_expression  go to state 38
    assign           go to state 39
    expression       go to state 206
    simpleExp        go to state 41
    andExp           go to state 42
    bitRelExp        go to state 43
    relExp           go to state 44
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49


State 194

   80 do_statement: DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN . SEMICOLON

    SEMICOLON  shift, and go to state 207


State 195

   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31           | . bool_expression
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   86 case: CASE . expression COLON statements BREAK SEMICOLON

    IDENT           shift, and go to state 90
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    bool_expression  go to state 38
    assign           go to state 39
    expression       go to state 208
    simpleExp        go to state 41
    andExp           go to state 42
    bitRelExp        go to state 43
    relExp           go to state 44
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49


State 196

   81 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases . RIGHT_CURLY_BRACKET
   83 cases: cases . case
   84      | cases . default
   85 default: . DEFAULT COLON statements BREAK SEMICOLON
   86 case: . CASE expression COLON statements BREAK SEMICOLON

    CASE                 shift, and go to state 195
    DEFAULT              shift, and go to state 209
    RIGHT_CURLY_BRACKET  shift, and go to state 210

    default  go to state 211
    case     go to state 212


State 197

   82 cases: case .

    $default  reduce using rule 82 (cases)


State 198

  126 one_val: IDENT ASSIGN_OP value .

    $default  reduce using rule 126 (one_val)


State 199

  124 enum_list: enum_list COMMA one_val .

    $default  reduce using rule 124 (enum_list)


State 200

   14 declaration: beforedecl type IDENT ASSIGN_OP expression SEMICOLON .

    $default  reduce using rule 14 (declaration)


State 201

   19 tail: LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET .

    $default  reduce using rule 19 (tail)


State 202

   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   72 else_if: ELIF LEFT_PAREN . bool_expression RIGHT_PAREN tail

    IDENT           shift, and go to state 133
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    bool_expression  go to state 213
    relExp           go to state 135
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49


State 203

   15 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@2 declaration
   17             | . declarations declaration
   18 tail: . statements
   19     | . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31           | . bool_expression
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   75 else_part: ELSE . tail
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   92 expression_statement: . expression SEMICOLON
   93 statements: . %empty  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, FUNC, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   94           | . statement
   95           | . statements statement
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  105          | . func_call
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT               shift, and go to state 17
    CONST_INT           shift, and go to state 18
    CONST_FLOAT         shift, and go to state 19
    CONST_CHAR          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    IF                  shift, and go to state 22
    WHILE               shift, and go to state 23
    FOR                 shift, and go to state 24
    DO                  shift, and go to state 25
    SWITCH              shift, and go to state 26
    RETURN              shift, and go to state 27
    TRUE_TOKEN          shift, and go to state 28
    FALSE_TOKEN         shift, and go to state 29
    ENUM                shift, and go to state 30
    LEFT_PAREN          shift, and go to state 31
    LEFT_CURLY_BRACKET  shift, and go to state 178
    INC_OP              shift, and go to state 32
    DEC_OP              shift, and go to state 33
    NOT_OP              shift, and go to state 34

    $end                 reduce using rule 93 (statements)
    INTEGER              reduce using rule 15 ($@2)
    INTEGER              [reduce using rule 93 (statements)]
    FLOAT                reduce using rule 15 ($@2)
    FLOAT                [reduce using rule 93 (statements)]
    DOUBLE               reduce using rule 15 ($@2)
    DOUBLE               [reduce using rule 93 (statements)]
    VOID                 reduce using rule 15 ($@2)
    VOID                 [reduce using rule 93 (statements)]
    BOOLEAN              reduce using rule 15 ($@2)
    BOOLEAN              [reduce using rule 93 (statements)]
    CHAR                 reduce using rule 15 ($@2)
    CHAR                 [reduce using rule 93 (statements)]
    CONST                reduce using rule 15 ($@2)
    CONST                [reduce using rule 93 (statements)]
    IDENT                [reduce using rule 93 (statements)]
    CONST_INT            [reduce using rule 93 (statements)]
    CONST_FLOAT          [reduce using rule 93 (statements)]
    CONST_CHAR           [reduce using rule 93 (statements)]
    STRING_LITERAL       [reduce using rule 93 (statements)]
    IF                   [reduce using rule 93 (statements)]
    ELSE                 reduce using rule 93 (statements)
    ELIF                 reduce using rule 93 (statements)
    WHILE                [reduce using rule 93 (statements)]
    FOR                  [reduce using rule 93 (statements)]
    DO                   [reduce using rule 93 (statements)]
    SWITCH               [reduce using rule 93 (statements)]
    RETURN               [reduce using rule 93 (statements)]
    BREAK                reduce using rule 93 (statements)
    CONTINUE             reduce using rule 93 (statements)
    TRUE_TOKEN           [reduce using rule 93 (statements)]
    FALSE_TOKEN          [reduce using rule 93 (statements)]
    ENUM                 [reduce using rule 93 (statements)]
    FUNC                 reduce using rule 93 (statements)
    LEFT_PAREN           [reduce using rule 93 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 93 (statements)
    INC_OP               [reduce using rule 93 (statements)]
    DEC_OP               [reduce using rule 93 (statements)]
    NOT_OP               [reduce using rule 93 (statements)]
    $default             reduce using rule 15 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    tail                  go to state 214
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    expression_statement  go to state 56
    statements            go to state 180
    statement             go to state 58
    enum_statement        go to state 59
    func_call             go to state 60


State 204

   73 else_if: else_if ELIF . LEFT_PAREN bool_expression RIGHT_PAREN tail

    LEFT_PAREN  shift, and go to state 215


State 205

   77 if_statement: IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part .

    $default  reduce using rule 77 (if_statement)


State 206

   79 for_statement: FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression . RIGHT_PAREN tail_inloop

    RIGHT_PAREN  shift, and go to state 216


State 207

   80 do_statement: DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON .

    $default  reduce using rule 80 (do_statement)


State 208

   86 case: CASE expression . COLON statements BREAK SEMICOLON

    COLON  shift, and go to state 217


State 209

   85 default: DEFAULT . COLON statements BREAK SEMICOLON

    COLON  shift, and go to state 218


State 210

   81 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .

    $default  reduce using rule 81 (switch_statement)


State 211

   84 cases: cases default .

    $default  reduce using rule 84 (cases)


State 212

   83 cases: cases case .

    $default  reduce using rule 83 (cases)


State 213

   72 else_if: ELIF LEFT_PAREN bool_expression . RIGHT_PAREN tail

    RIGHT_PAREN  shift, and go to state 219


State 214

   75 else_part: ELSE tail .

    $default  reduce using rule 75 (else_part)


State 215

   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   73 else_if: else_if ELIF LEFT_PAREN . bool_expression RIGHT_PAREN tail

    IDENT           shift, and go to state 133
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    bool_expression  go to state 220
    relExp           go to state 135
    bitshiftExp      go to state 45
    sumExp           go to state 46
    mulExp           go to state 47
    unaryExp         go to state 48
    value            go to state 49


State 216

   15 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@2 declaration
   17             | . declarations declaration
   20 tail_inloop: . statements_inloop
   21            | . LEFT_CURLY_BRACKET statements_inloop RIGHT_CURLY_BRACKET
   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31           | . bool_expression
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   79              | FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN . tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   90 break_statement: . BREAK SEMICOLON
   91 continue_statement: . CONTINUE SEMICOLON
   92 expression_statement: . expression SEMICOLON
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  105          | . func_call
  106 statement_inloop: . statement
  107                 | . break_statement
  108                 | . continue_statement
  109 statements_inloop: . statement_inloop
  110                  | . statements_inloop statement_inloop
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT               shift, and go to state 17
    CONST_INT           shift, and go to state 18
    CONST_FLOAT         shift, and go to state 19
    CONST_CHAR          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    IF                  shift, and go to state 22
    WHILE               shift, and go to state 23
    FOR                 shift, and go to state 24
    DO                  shift, and go to state 25
    SWITCH              shift, and go to state 26
    RETURN              shift, and go to state 27
    BREAK               shift, and go to state 80
    CONTINUE            shift, and go to state 81
    TRUE_TOKEN          shift, and go to state 28
    FALSE_TOKEN         shift, and go to state 29
    ENUM                shift, and go to state 30
    LEFT_PAREN          shift, and go to state 31
    LEFT_CURLY_BRACKET  shift, and go to state 82
    INC_OP              shift, and go to state 32
    DEC_OP              shift, and go to state 33
    NOT_OP              shift, and go to state 34

    $default  reduce using rule 15 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    tail_inloop           go to state 221
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    break_statement       go to state 84
    continue_statement    go to state 85
    expression_statement  go to state 56
    statement             go to state 86
    statement_inloop      go to state 87
    statements_inloop     go to state 88
    enum_statement        go to state 59
    func_call             go to state 60


State 217

   15 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@2 declaration
   17             | . declarations declaration
   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31           | . bool_expression
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   86 case: CASE expression COLON . statements BREAK SEMICOLON
   89 return_statement: . RETURN return_val SEMICOLON
   92 expression_statement: . expression SEMICOLON
   93 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, TRUE_TOKEN, FALSE_TOKEN, ENUM, LEFT_PAREN, INC_OP, DEC_OP, NOT_OP]
   94           | . statement
   95           | . statements statement
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  105          | . func_call
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 17
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    IF              shift, and go to state 22
    WHILE           shift, and go to state 23
    FOR             shift, and go to state 24
    DO              shift, and go to state 25
    SWITCH          shift, and go to state 26
    RETURN          shift, and go to state 27
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    ENUM            shift, and go to state 30
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    INTEGER         reduce using rule 15 ($@2)
    INTEGER         [reduce using rule 93 (statements)]
    FLOAT           reduce using rule 15 ($@2)
    FLOAT           [reduce using rule 93 (statements)]
    DOUBLE          reduce using rule 15 ($@2)
    DOUBLE          [reduce using rule 93 (statements)]
    VOID            reduce using rule 15 ($@2)
    VOID            [reduce using rule 93 (statements)]
    BOOLEAN         reduce using rule 15 ($@2)
    BOOLEAN         [reduce using rule 93 (statements)]
    CHAR            reduce using rule 15 ($@2)
    CHAR            [reduce using rule 93 (statements)]
    CONST           reduce using rule 15 ($@2)
    CONST           [reduce using rule 93 (statements)]
    IDENT           [reduce using rule 93 (statements)]
    CONST_INT       [reduce using rule 93 (statements)]
    CONST_FLOAT     [reduce using rule 93 (statements)]
    CONST_CHAR      [reduce using rule 93 (statements)]
    STRING_LITERAL  [reduce using rule 93 (statements)]
    IF              [reduce using rule 93 (statements)]
    WHILE           [reduce using rule 93 (statements)]
    FOR             [reduce using rule 93 (statements)]
    DO              [reduce using rule 93 (statements)]
    SWITCH          [reduce using rule 93 (statements)]
    RETURN          [reduce using rule 93 (statements)]
    BREAK           reduce using rule 93 (statements)
    TRUE_TOKEN      [reduce using rule 93 (statements)]
    FALSE_TOKEN     [reduce using rule 93 (statements)]
    ENUM            [reduce using rule 93 (statements)]
    LEFT_PAREN      [reduce using rule 93 (statements)]
    INC_OP          [reduce using rule 93 (statements)]
    DEC_OP          [reduce using rule 93 (statements)]
    NOT_OP          [reduce using rule 93 (statements)]
    $default        reduce using rule 15 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    expression_statement  go to state 56
    statements            go to state 222
    statement             go to state 58
    enum_statement        go to state 59
    func_call             go to state 60


State 218

   15 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@2 declaration
   17             | . declarations declaration
   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31           | . bool_expression
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   85 default: DEFAULT COLON . statements BREAK SEMICOLON
   89 return_statement: . RETURN return_val SEMICOLON
   92 expression_statement: . expression SEMICOLON
   93 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, TRUE_TOKEN, FALSE_TOKEN, ENUM, LEFT_PAREN, INC_OP, DEC_OP, NOT_OP]
   94           | . statement
   95           | . statements statement
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  105          | . func_call
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 17
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    IF              shift, and go to state 22
    WHILE           shift, and go to state 23
    FOR             shift, and go to state 24
    DO              shift, and go to state 25
    SWITCH          shift, and go to state 26
    RETURN          shift, and go to state 27
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    ENUM            shift, and go to state 30
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    INTEGER         reduce using rule 15 ($@2)
    INTEGER         [reduce using rule 93 (statements)]
    FLOAT           reduce using rule 15 ($@2)
    FLOAT           [reduce using rule 93 (statements)]
    DOUBLE          reduce using rule 15 ($@2)
    DOUBLE          [reduce using rule 93 (statements)]
    VOID            reduce using rule 15 ($@2)
    VOID            [reduce using rule 93 (statements)]
    BOOLEAN         reduce using rule 15 ($@2)
    BOOLEAN         [reduce using rule 93 (statements)]
    CHAR            reduce using rule 15 ($@2)
    CHAR            [reduce using rule 93 (statements)]
    CONST           reduce using rule 15 ($@2)
    CONST           [reduce using rule 93 (statements)]
    IDENT           [reduce using rule 93 (statements)]
    CONST_INT       [reduce using rule 93 (statements)]
    CONST_FLOAT     [reduce using rule 93 (statements)]
    CONST_CHAR      [reduce using rule 93 (statements)]
    STRING_LITERAL  [reduce using rule 93 (statements)]
    IF              [reduce using rule 93 (statements)]
    WHILE           [reduce using rule 93 (statements)]
    FOR             [reduce using rule 93 (statements)]
    DO              [reduce using rule 93 (statements)]
    SWITCH          [reduce using rule 93 (statements)]
    RETURN          [reduce using rule 93 (statements)]
    BREAK           reduce using rule 93 (statements)
    TRUE_TOKEN      [reduce using rule 93 (statements)]
    FALSE_TOKEN     [reduce using rule 93 (statements)]
    ENUM            [reduce using rule 93 (statements)]
    LEFT_PAREN      [reduce using rule 93 (statements)]
    INC_OP          [reduce using rule 93 (statements)]
    DEC_OP          [reduce using rule 93 (statements)]
    NOT_OP          [reduce using rule 93 (statements)]
    $default        reduce using rule 15 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    expression_statement  go to state 56
    statements            go to state 223
    statement             go to state 58
    enum_statement        go to state 59
    func_call             go to state 60


State 219

   15 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@2 declaration
   17             | . declarations declaration
   18 tail: . statements
   19     | . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31           | . bool_expression
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   72 else_if: ELIF LEFT_PAREN bool_expression RIGHT_PAREN . tail
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   92 expression_statement: . expression SEMICOLON
   93 statements: . %empty  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, FUNC, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   94           | . statement
   95           | . statements statement
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  105          | . func_call
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT               shift, and go to state 17
    CONST_INT           shift, and go to state 18
    CONST_FLOAT         shift, and go to state 19
    CONST_CHAR          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    IF                  shift, and go to state 22
    WHILE               shift, and go to state 23
    FOR                 shift, and go to state 24
    DO                  shift, and go to state 25
    SWITCH              shift, and go to state 26
    RETURN              shift, and go to state 27
    TRUE_TOKEN          shift, and go to state 28
    FALSE_TOKEN         shift, and go to state 29
    ENUM                shift, and go to state 30
    LEFT_PAREN          shift, and go to state 31
    LEFT_CURLY_BRACKET  shift, and go to state 178
    INC_OP              shift, and go to state 32
    DEC_OP              shift, and go to state 33
    NOT_OP              shift, and go to state 34

    $end                 reduce using rule 93 (statements)
    INTEGER              reduce using rule 15 ($@2)
    INTEGER              [reduce using rule 93 (statements)]
    FLOAT                reduce using rule 15 ($@2)
    FLOAT                [reduce using rule 93 (statements)]
    DOUBLE               reduce using rule 15 ($@2)
    DOUBLE               [reduce using rule 93 (statements)]
    VOID                 reduce using rule 15 ($@2)
    VOID                 [reduce using rule 93 (statements)]
    BOOLEAN              reduce using rule 15 ($@2)
    BOOLEAN              [reduce using rule 93 (statements)]
    CHAR                 reduce using rule 15 ($@2)
    CHAR                 [reduce using rule 93 (statements)]
    CONST                reduce using rule 15 ($@2)
    CONST                [reduce using rule 93 (statements)]
    IDENT                [reduce using rule 93 (statements)]
    CONST_INT            [reduce using rule 93 (statements)]
    CONST_FLOAT          [reduce using rule 93 (statements)]
    CONST_CHAR           [reduce using rule 93 (statements)]
    STRING_LITERAL       [reduce using rule 93 (statements)]
    IF                   [reduce using rule 93 (statements)]
    ELSE                 reduce using rule 93 (statements)
    ELIF                 reduce using rule 93 (statements)
    WHILE                [reduce using rule 93 (statements)]
    FOR                  [reduce using rule 93 (statements)]
    DO                   [reduce using rule 93 (statements)]
    SWITCH               [reduce using rule 93 (statements)]
    RETURN               [reduce using rule 93 (statements)]
    BREAK                reduce using rule 93 (statements)
    CONTINUE             reduce using rule 93 (statements)
    TRUE_TOKEN           [reduce using rule 93 (statements)]
    FALSE_TOKEN          [reduce using rule 93 (statements)]
    ENUM                 [reduce using rule 93 (statements)]
    FUNC                 reduce using rule 93 (statements)
    LEFT_PAREN           [reduce using rule 93 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 93 (statements)
    INC_OP               [reduce using rule 93 (statements)]
    DEC_OP               [reduce using rule 93 (statements)]
    NOT_OP               [reduce using rule 93 (statements)]
    $default             reduce using rule 15 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    tail                  go to state 224
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    expression_statement  go to state 56
    statements            go to state 180
    statement             go to state 58
    enum_statement        go to state 59
    func_call             go to state 60


State 220

   73 else_if: else_if ELIF LEFT_PAREN bool_expression . RIGHT_PAREN tail

    RIGHT_PAREN  shift, and go to state 225


State 221

   79 for_statement: FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop .

    $default  reduce using rule 79 (for_statement)


State 222

   15 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@2 declaration
   17             | . declarations declaration
   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31           | . bool_expression
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   86 case: CASE expression COLON statements . BREAK SEMICOLON
   89 return_statement: . RETURN return_val SEMICOLON
   92 expression_statement: . expression SEMICOLON
   95 statements: statements . statement
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  105          | . func_call
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 17
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    IF              shift, and go to state 22
    WHILE           shift, and go to state 23
    FOR             shift, and go to state 24
    DO              shift, and go to state 25
    SWITCH          shift, and go to state 26
    RETURN          shift, and go to state 27
    BREAK           shift, and go to state 226
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    ENUM            shift, and go to state 30
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    $default  reduce using rule 15 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    expression_statement  go to state 56
    statement             go to state 123
    enum_statement        go to state 59
    func_call             go to state 60


State 223

   15 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@2 declaration
   17             | . declarations declaration
   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31           | . bool_expression
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   85 default: DEFAULT COLON statements . BREAK SEMICOLON
   89 return_statement: . RETURN return_val SEMICOLON
   92 expression_statement: . expression SEMICOLON
   95 statements: statements . statement
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  105          | . func_call
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 17
    CONST_INT       shift, and go to state 18
    CONST_FLOAT     shift, and go to state 19
    CONST_CHAR      shift, and go to state 20
    STRING_LITERAL  shift, and go to state 21
    IF              shift, and go to state 22
    WHILE           shift, and go to state 23
    FOR             shift, and go to state 24
    DO              shift, and go to state 25
    SWITCH          shift, and go to state 26
    RETURN          shift, and go to state 27
    BREAK           shift, and go to state 227
    TRUE_TOKEN      shift, and go to state 28
    FALSE_TOKEN     shift, and go to state 29
    ENUM            shift, and go to state 30
    LEFT_PAREN      shift, and go to state 31
    INC_OP          shift, and go to state 32
    DEC_OP          shift, and go to state 33
    NOT_OP          shift, and go to state 34

    $default  reduce using rule 15 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    expression_statement  go to state 56
    statement             go to state 123
    enum_statement        go to state 59
    func_call             go to state 60


State 224

   72 else_if: ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail .

    $default  reduce using rule 72 (else_if)


State 225

   15 $@2: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST]
   16 declarations: . $@2 declaration
   17             | . declarations declaration
   18 tail: . statements
   19     | . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   22 bool_expression: . relExp
   23                | . TRUE_TOKEN
   24                | . FALSE_TOKEN
   25 assign: . IDENT ASSIGN_OP expression
   26 expression: . assign
   27           | . IDENT INC_OP
   28           | . IDENT DEC_OP
   29           | . simpleExp
   30           | . IDENT
   31           | . bool_expression
   32 simpleExp: . simpleExp OR_OP andExp
   33          | . andExp
   34 andExp: . andExp AND_OP
   35       | . bitRelExp
   36 bitRelExp: . bitRelExp BIT_OR_OP relExp
   37          | . bitRelExp AND relExp
   38          | . bitRelExp BIT_XOR_OP relExp
   39          | . relExp
   48 relExp: . relExp op bitshiftExp
   49       | . bitshiftExp
   50 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   51            | . bitshiftExp BIT_RSHIFT_OP sumExp
   52            | . sumExp
   58 sumExp: . sumExp pls_min mulExp
   59       | . mulExp
   60 mulExp: . mulExp mul_div unaryExp
   61       | . unaryExp
   62 unaryExp: . INC_OP IDENT
   63         | . DEC_OP IDENT
   64         | . NOT_OP IDENT
   65         | . IDENT
   66         | . value
   67         | . LEFT_PAREN expression RIGHT_PAREN
   68 value: . CONST_INT
   69      | . CONST_FLOAT
   70      | . CONST_CHAR
   71      | . STRING_LITERAL
   73 else_if: else_if ELIF LEFT_PAREN bool_expression RIGHT_PAREN . tail
   77 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   78 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   79 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   80 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   81 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   89 return_statement: . RETURN return_val SEMICOLON
   92 expression_statement: . expression SEMICOLON
   93 statements: . %empty  [$end, INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, TRUE_TOKEN, FALSE_TOKEN, ENUM, FUNC, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   94           | . statement
   95           | . statements statement
   96 statement: . if_statement
   97          | . while_statement
   98          | . for_statement
   99          | . do_statement
  100          | . switch_statement
  101          | . return_statement
  102          | . expression_statement
  103          | . declarations
  104          | . enum_statement
  105          | . func_call
  122 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  127 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  128          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT               shift, and go to state 17
    CONST_INT           shift, and go to state 18
    CONST_FLOAT         shift, and go to state 19
    CONST_CHAR          shift, and go to state 20
    STRING_LITERAL      shift, and go to state 21
    IF                  shift, and go to state 22
    WHILE               shift, and go to state 23
    FOR                 shift, and go to state 24
    DO                  shift, and go to state 25
    SWITCH              shift, and go to state 26
    RETURN              shift, and go to state 27
    TRUE_TOKEN          shift, and go to state 28
    FALSE_TOKEN         shift, and go to state 29
    ENUM                shift, and go to state 30
    LEFT_PAREN          shift, and go to state 31
    LEFT_CURLY_BRACKET  shift, and go to state 178
    INC_OP              shift, and go to state 32
    DEC_OP              shift, and go to state 33
    NOT_OP              shift, and go to state 34

    $end                 reduce using rule 93 (statements)
    INTEGER              reduce using rule 15 ($@2)
    INTEGER              [reduce using rule 93 (statements)]
    FLOAT                reduce using rule 15 ($@2)
    FLOAT                [reduce using rule 93 (statements)]
    DOUBLE               reduce using rule 15 ($@2)
    DOUBLE               [reduce using rule 93 (statements)]
    VOID                 reduce using rule 15 ($@2)
    VOID                 [reduce using rule 93 (statements)]
    BOOLEAN              reduce using rule 15 ($@2)
    BOOLEAN              [reduce using rule 93 (statements)]
    CHAR                 reduce using rule 15 ($@2)
    CHAR                 [reduce using rule 93 (statements)]
    CONST                reduce using rule 15 ($@2)
    CONST                [reduce using rule 93 (statements)]
    IDENT                [reduce using rule 93 (statements)]
    CONST_INT            [reduce using rule 93 (statements)]
    CONST_FLOAT          [reduce using rule 93 (statements)]
    CONST_CHAR           [reduce using rule 93 (statements)]
    STRING_LITERAL       [reduce using rule 93 (statements)]
    IF                   [reduce using rule 93 (statements)]
    ELSE                 reduce using rule 93 (statements)
    ELIF                 reduce using rule 93 (statements)
    WHILE                [reduce using rule 93 (statements)]
    FOR                  [reduce using rule 93 (statements)]
    DO                   [reduce using rule 93 (statements)]
    SWITCH               [reduce using rule 93 (statements)]
    RETURN               [reduce using rule 93 (statements)]
    BREAK                reduce using rule 93 (statements)
    CONTINUE             reduce using rule 93 (statements)
    TRUE_TOKEN           [reduce using rule 93 (statements)]
    FALSE_TOKEN          [reduce using rule 93 (statements)]
    ENUM                 [reduce using rule 93 (statements)]
    FUNC                 reduce using rule 93 (statements)
    LEFT_PAREN           [reduce using rule 93 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 93 (statements)
    INC_OP               [reduce using rule 93 (statements)]
    DEC_OP               [reduce using rule 93 (statements)]
    NOT_OP               [reduce using rule 93 (statements)]
    $default             reduce using rule 15 ($@2)

    declarations          go to state 37
    $@2                   go to state 11
    tail                  go to state 228
    bool_expression       go to state 38
    assign                go to state 39
    expression            go to state 40
    simpleExp             go to state 41
    andExp                go to state 42
    bitRelExp             go to state 43
    relExp                go to state 44
    bitshiftExp           go to state 45
    sumExp                go to state 46
    mulExp                go to state 47
    unaryExp              go to state 48
    value                 go to state 49
    if_statement          go to state 50
    while_statement       go to state 51
    for_statement         go to state 52
    do_statement          go to state 53
    switch_statement      go to state 54
    return_statement      go to state 55
    expression_statement  go to state 56
    statements            go to state 180
    statement             go to state 58
    enum_statement        go to state 59
    func_call             go to state 60


State 226

   86 case: CASE expression COLON statements BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 229


State 227

   85 default: DEFAULT COLON statements BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 230


State 228

   73 else_if: else_if ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail .

    $default  reduce using rule 73 (else_if)


State 229

   86 case: CASE expression COLON statements BREAK SEMICOLON .

    $default  reduce using rule 86 (case)


State 230

   85 default: DEFAULT COLON statements BREAK SEMICOLON .

    $default  reduce using rule 85 (default)
