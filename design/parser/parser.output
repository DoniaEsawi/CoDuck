Terminals unused in grammar

    LEFT_SQ_BRACKET
    RIGHT_SQ_BRACKET
    QUESTION_MARK
    DOT
    BIT_LOGIC_OP


Grammar

    0 $accept: program $end

    1 $@1: %empty

    2 $@2: %empty

    3 program: declarations $@1 statements $@2 RETURN SEMICOLON functions_optional

    4 functions_optional: functions
    5                   | %empty

    6 type: INTEGER
    7     | FLOAT
    8     | DOUBLE
    9     | VOID
   10     | BOOLEAN
   11     | CHAR
   12     | STR

   13 $@3: %empty

   14 $@4: %empty

   15 declaration: type $@3 names $@4 SEMICOLON

   16 $@5: %empty

   17 $@6: %empty

   18 declaration: CONST type $@5 names $@6 SEMICOLON

   19 names: names COMMA variable
   20      | names COMMA init
   21      | variable
   22      | init

   23 init: var_init

   24 var_init: IDENT ASSIGN_OP value

   25 variable: IDENT

   26 var_ref: variable

   27 declarations: declarations declaration
   28             | declaration

   29 expression: expression ADD_OP expression
   30           | expression SUB_OP expression
   31           | expression MUL_OP expression
   32           | expression DIV_OP expression
   33           | expression MOD_OP expression
   34           | expression AND_OP expression
   35           | expression OR_OP expression
   36           | NOT_OP expression
   37           | expression EQ_OP expression
   38           | expression REL_OP expression
   39           | LEFT_PAREN expression RIGHT_PAREN
   40           | INC_OP IDENT
   41           | DEC_OP IDENT
   42           | IDENT INC_OP
   43           | IDENT DEC_OP
   44           | func_call
   45           | var_ref
   46           | value
   47           | SUB_OP value

   48 value: CONST_INT
   49      | CONST_FLOAT
   50      | CONST_CHAR
   51      | STRING_LITERAL
   52      | TRUE_TOKEN
   53      | FALSE_TOKEN

   54 tail: LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET

   55 else_if: ELIF LEFT_PAREN expression RIGHT_PAREN tail
   56        | else_if ELIF LEFT_PAREN expression RIGHT_PAREN tail

   57 else_part: ELSE tail
   58          | %empty

   59 if_statement: IF LEFT_PAREN expression RIGHT_PAREN tail else_if else_part
   60             | IF LEFT_PAREN expression RIGHT_PAREN tail else_part

   61 while_statement: WHILE LEFT_PAREN expression RIGHT_PAREN tail

   62 assignment: var_ref ASSIGN_OP expression

   63 for_statement: FOR LEFT_PAREN assignment SEMICOLON expression SEMICOLON IDENT INC_OP RIGHT_PAREN tail
   64              | FOR LEFT_PAREN assignment SEMICOLON expression SEMICOLON IDENT DEC_OP RIGHT_PAREN tail

   65 do_statement: DO tail UNTIL LEFT_PAREN expression RIGHT_PAREN SEMICOLON

   66 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

   67 cases: cases case
   68      | case
   69      | cases default

   70 default: DEFAULT COLON statements

   71 case: CASE expression COLON statements

   72 statements: statements statement
   73           | statement

   74 statement: if_statement
   75          | while_statement
   76          | for_statement
   77          | do_statement
   78          | switch_statement
   79          | enum_statement
   80          | func_call SEMICOLON
   81          | CONTINUE SEMICOLON
   82          | BREAK SEMICOLON
   83          | assignment SEMICOLON
   84          | INC_OP IDENT SEMICOLON
   85          | DEC_OP IDENT SEMICOLON
   86          | IDENT INC_OP SEMICOLON
   87          | IDENT DEC_OP SEMICOLON

   88 functions: functions function
   89          | function

   90 $@7: %empty

   91 function: $@7 function_head function_tail

   92 $@8: %empty

   93 function_head: FUNC $@8 IDENT LEFT_PAREN param_empty RIGHT_PAREN return_type

   94 return_type: type

   95 function_tail: LEFT_CURLY_BRACKET declarations_optional statements_optional return_optional RIGHT_CURLY_BRACKET

   96 statements_optional: statements
   97                    | %empty

   98 declarations_optional: declarations
   99                      | %empty

  100 return_optional: RETURN expression SEMICOLON
  101                | %empty

  102 param_empty: parameters
  103            | %empty

  104 parameters: parameters COMMA parameter
  105           | parameter

  106 $@9: %empty

  107 parameter: $@9 type variable

  108 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON

  109 enum_list: one_val
  110          | enum_list COMMA one_val

  111 one_val: IDENT
  112        | var_init

  113 func_call: IDENT LEFT_PAREN arguments RIGHT_PAREN

  114 arguments: argument
  115          | %empty

  116 argument: argument COMMA expression
  117         | expression


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INTEGER <val> (258) 6
    FLOAT <val> (259) 7
    DOUBLE <val> (260) 8
    VOID <val> (261) 9
    BOOLEAN <val> (262) 10
    CHAR <val> (263) 11
    CONST <val> (264) 18
    STR <val> (265) 12
    IDENT <symbol_table_item> (266) 24 25 40 41 42 43 63 64 84 85 86 87 93 108 111 113
    CONST_INT <val> (267) 48
    CONST_FLOAT <val> (268) 49
    CONST_CHAR <val> (269) 50
    STRING_LITERAL <val> (270) 51
    IF <val> (271) 59 60
    ELSE <val> (272) 57
    ELIF <val> (273) 55 56
    WHILE <val> (274) 61
    FOR <val> (275) 63 64
    DO <val> (276) 65
    SWITCH <val> (277) 66
    CASE <val> (278) 71
    DEFAULT <val> (279) 70
    RETURN <val> (280) 3 100
    BREAK <val> (281) 82
    CONTINUE <val> (282) 81
    TRUE_TOKEN <val> (283) 52
    FALSE_TOKEN <val> (284) 53
    ENUM <val> (285) 108
    FUNC <val> (286) 93
    UNTIL <val> (287) 65
    LEFT_PAREN <val> (288) 39 55 56 59 60 61 63 64 65 66 93 113
    RIGHT_PAREN <val> (289) 39 55 56 59 60 61 63 64 65 66 93 113
    LEFT_CURLY_BRACKET <val> (290) 54 66 95 108
    RIGHT_CURLY_BRACKET <val> (291) 54 66 95 108
    LEFT_SQ_BRACKET <val> (292)
    RIGHT_SQ_BRACKET <val> (293)
    SEMICOLON <val> (294) 3 15 18 63 64 65 80 81 82 83 84 85 86 87 100 108
    COMMA <val> (295) 19 20 104 110 116
    COLON <val> (296) 70 71
    QUESTION_MARK <val> (297)
    DOT <val> (298)
    ADD_OP <val> (299) 29
    SUB_OP <val> (300) 30 47
    MUL_OP <val> (301) 31
    DIV_OP <val> (302) 32
    MOD_OP <val> (303) 33
    INC_OP <val> (304) 40 42 63 84 86
    DEC_OP <val> (305) 41 43 64 85 87
    OR_OP <val> (306) 35
    AND_OP <val> (307) 34
    NOT_OP <val> (308) 36
    BIT_LOGIC_OP <val> (309)
    EQ_OP <val> (310) 37
    REL_OP <val> (311) 38
    ASSIGN_OP <val> (312) 24 62
    MINUS (313)


Nonterminals, with rules where they appear

    $accept (59)
        on left: 0
    program <node> (60)
        on left: 3
        on right: 0
    $@1 (61)
        on left: 1
        on right: 3
    $@2 (62)
        on left: 2
        on right: 3
    functions_optional <node> (63)
        on left: 4 5
        on right: 3
    type <data_type> (64)
        on left: 6 7 8 9 10 11 12
        on right: 15 18 94 107
    declaration <node> (65)
        on left: 15 18
        on right: 27 28
    $@3 (66)
        on left: 13
        on right: 15
    $@4 (67)
        on left: 14
        on right: 15
    $@5 (68)
        on left: 16
        on right: 18
    $@6 (69)
        on left: 17
        on right: 18
    names (70)
        on left: 19 20 21 22
        on right: 15 18 19 20
    init <symbol_table_item> (71)
        on left: 23
        on right: 20 22
    var_init <symbol_table_item> (72)
        on left: 24
        on right: 23 112
    variable <symbol_table_item> (73)
        on left: 25
        on right: 19 21 26 107
    var_ref <node> (74)
        on left: 26
        on right: 45 62
    declarations <node> (75)
        on left: 27 28
        on right: 3 27 98
    expression <node> (76)
        on left: 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
        on right: 29 30 31 32 33 34 35 36 37 38 39 55 56 59 60 61 62 63 64 65 66 71 100 116 117
    value <node> (77)
        on left: 48 49 50 51 52 53
        on right: 24 46 47
    tail <node> (78)
        on left: 54
        on right: 55 56 57 59 60 61 63 64 65
    else_if <node> (79)
        on left: 55 56
        on right: 56 59
    else_part <node> (80)
        on left: 57 58
        on right: 59 60
    if_statement <node> (81)
        on left: 59 60
        on right: 74
    while_statement <node> (82)
        on left: 61
        on right: 75
    assignment <node> (83)
        on left: 62
        on right: 63 64 83
    for_statement <node> (84)
        on left: 63 64
        on right: 76
    do_statement <node> (85)
        on left: 65
        on right: 77
    switch_statement (86)
        on left: 66
        on right: 78
    cases (87)
        on left: 67 68 69
        on right: 66 67 69
    default (88)
        on left: 70
        on right: 69
    case (89)
        on left: 71
        on right: 67 68
    statements <node> (90)
        on left: 72 73
        on right: 3 54 70 71 72 96
    statement <node> (91)
        on left: 74 75 76 77 78 79 80 81 82 83 84 85 86 87
        on right: 72 73
    functions <node> (92)
        on left: 88 89
        on right: 4 88
    function <node> (93)
        on left: 91
        on right: 88 89
    $@7 (94)
        on left: 90
        on right: 91
    function_head (95)
        on left: 93
        on right: 91
    $@8 (96)
        on left: 92
        on right: 93
    return_type <node> (97)
        on left: 94
        on right: 93
    function_tail (98)
        on left: 95
        on right: 91
    statements_optional (99)
        on left: 96 97
        on right: 95
    declarations_optional (100)
        on left: 98 99
        on right: 95
    return_optional (101)
        on left: 100 101
        on right: 95
    param_empty <node> (102)
        on left: 102 103
        on right: 93
    parameters <node> (103)
        on left: 104 105
        on right: 102 104
    parameter <par> (104)
        on left: 107
        on right: 104 105
    $@9 (105)
        on left: 106
        on right: 107
    enum_statement (106)
        on left: 108
        on right: 79
    enum_list (107)
        on left: 109 110
        on right: 108 110
    one_val (108)
        on left: 111 112
        on right: 109 110
    func_call <node> (109)
        on left: 113
        on right: 44 80
    arguments <node> (110)
        on left: 114 115
        on right: 113
    argument <node> (111)
        on left: 116 117
        on right: 114 116


State 0

    0 $accept: . program $end
    3 program: . declarations $@1 statements $@2 RETURN SEMICOLON functions_optional
    6 type: . INTEGER
    7     | . FLOAT
    8     | . DOUBLE
    9     | . VOID
   10     | . BOOLEAN
   11     | . CHAR
   12     | . STR
   15 declaration: . type $@3 names $@4 SEMICOLON
   18            | . CONST type $@5 names $@6 SEMICOLON
   27 declarations: . declarations declaration
   28             | . declaration

    INTEGER  shift, and go to state 1
    FLOAT    shift, and go to state 2
    DOUBLE   shift, and go to state 3
    VOID     shift, and go to state 4
    BOOLEAN  shift, and go to state 5
    CHAR     shift, and go to state 6
    CONST    shift, and go to state 7
    STR      shift, and go to state 8

    program       go to state 9
    type          go to state 10
    declaration   go to state 11
    declarations  go to state 12


State 1

    6 type: INTEGER .

    $default  reduce using rule 6 (type)


State 2

    7 type: FLOAT .

    $default  reduce using rule 7 (type)


State 3

    8 type: DOUBLE .

    $default  reduce using rule 8 (type)


State 4

    9 type: VOID .

    $default  reduce using rule 9 (type)


State 5

   10 type: BOOLEAN .

    $default  reduce using rule 10 (type)


State 6

   11 type: CHAR .

    $default  reduce using rule 11 (type)


State 7

    6 type: . INTEGER
    7     | . FLOAT
    8     | . DOUBLE
    9     | . VOID
   10     | . BOOLEAN
   11     | . CHAR
   12     | . STR
   18 declaration: CONST . type $@5 names $@6 SEMICOLON

    INTEGER  shift, and go to state 1
    FLOAT    shift, and go to state 2
    DOUBLE   shift, and go to state 3
    VOID     shift, and go to state 4
    BOOLEAN  shift, and go to state 5
    CHAR     shift, and go to state 6
    STR      shift, and go to state 8

    type  go to state 13


State 8

   12 type: STR .

    $default  reduce using rule 12 (type)


State 9

    0 $accept: program . $end

    $end  shift, and go to state 14


State 10

   13 $@3: . %empty
   15 declaration: type . $@3 names $@4 SEMICOLON

    $default  reduce using rule 13 ($@3)

    $@3  go to state 15


State 11

   28 declarations: declaration .

    $default  reduce using rule 28 (declarations)


State 12

    1 $@1: . %empty  [IDENT, IF, WHILE, FOR, DO, SWITCH, BREAK, CONTINUE, ENUM, INC_OP, DEC_OP]
    3 program: declarations . $@1 statements $@2 RETURN SEMICOLON functions_optional
    6 type: . INTEGER
    7     | . FLOAT
    8     | . DOUBLE
    9     | . VOID
   10     | . BOOLEAN
   11     | . CHAR
   12     | . STR
   15 declaration: . type $@3 names $@4 SEMICOLON
   18            | . CONST type $@5 names $@6 SEMICOLON
   27 declarations: declarations . declaration

    INTEGER  shift, and go to state 1
    FLOAT    shift, and go to state 2
    DOUBLE   shift, and go to state 3
    VOID     shift, and go to state 4
    BOOLEAN  shift, and go to state 5
    CHAR     shift, and go to state 6
    CONST    shift, and go to state 7
    STR      shift, and go to state 8

    $default  reduce using rule 1 ($@1)

    $@1          go to state 16
    type         go to state 10
    declaration  go to state 17


State 13

   16 $@5: . %empty
   18 declaration: CONST type . $@5 names $@6 SEMICOLON

    $default  reduce using rule 16 ($@5)

    $@5  go to state 18


State 14

    0 $accept: program $end .

    $default  accept


State 15

   15 declaration: type $@3 . names $@4 SEMICOLON
   19 names: . names COMMA variable
   20      | . names COMMA init
   21      | . variable
   22      | . init
   23 init: . var_init
   24 var_init: . IDENT ASSIGN_OP value
   25 variable: . IDENT

    IDENT  shift, and go to state 19

    names     go to state 20
    init      go to state 21
    var_init  go to state 22
    variable  go to state 23


State 16

    3 program: declarations $@1 . statements $@2 RETURN SEMICOLON functions_optional
   25 variable: . IDENT
   26 var_ref: . variable
   59 if_statement: . IF LEFT_PAREN expression RIGHT_PAREN tail else_if else_part
   60             | . IF LEFT_PAREN expression RIGHT_PAREN tail else_part
   61 while_statement: . WHILE LEFT_PAREN expression RIGHT_PAREN tail
   62 assignment: . var_ref ASSIGN_OP expression
   63 for_statement: . FOR LEFT_PAREN assignment SEMICOLON expression SEMICOLON IDENT INC_OP RIGHT_PAREN tail
   64              | . FOR LEFT_PAREN assignment SEMICOLON expression SEMICOLON IDENT DEC_OP RIGHT_PAREN tail
   65 do_statement: . DO tail UNTIL LEFT_PAREN expression RIGHT_PAREN SEMICOLON
   66 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   72 statements: . statements statement
   73           | . statement
   74 statement: . if_statement
   75          | . while_statement
   76          | . for_statement
   77          | . do_statement
   78          | . switch_statement
   79          | . enum_statement
   80          | . func_call SEMICOLON
   81          | . CONTINUE SEMICOLON
   82          | . BREAK SEMICOLON
   83          | . assignment SEMICOLON
   84          | . INC_OP IDENT SEMICOLON
   85          | . DEC_OP IDENT SEMICOLON
   86          | . IDENT INC_OP SEMICOLON
   87          | . IDENT DEC_OP SEMICOLON
  108 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT     shift, and go to state 24
    IF        shift, and go to state 25
    WHILE     shift, and go to state 26
    FOR       shift, and go to state 27
    DO        shift, and go to state 28
    SWITCH    shift, and go to state 29
    BREAK     shift, and go to state 30
    CONTINUE  shift, and go to state 31
    ENUM      shift, and go to state 32
    INC_OP    shift, and go to state 33
    DEC_OP    shift, and go to state 34

    variable          go to state 35
    var_ref           go to state 36
    if_statement      go to state 37
    while_statement   go to state 38
    assignment        go to state 39
    for_statement     go to state 40
    do_statement      go to state 41
    switch_statement  go to state 42
    statements        go to state 43
    statement         go to state 44
    enum_statement    go to state 45
    func_call         go to state 46


State 17

   27 declarations: declarations declaration .

    $default  reduce using rule 27 (declarations)


State 18

   18 declaration: CONST type $@5 . names $@6 SEMICOLON
   19 names: . names COMMA variable
   20      | . names COMMA init
   21      | . variable
   22      | . init
   23 init: . var_init
   24 var_init: . IDENT ASSIGN_OP value
   25 variable: . IDENT

    IDENT  shift, and go to state 19

    names     go to state 47
    init      go to state 21
    var_init  go to state 22
    variable  go to state 23


State 19

   24 var_init: IDENT . ASSIGN_OP value
   25 variable: IDENT .  [SEMICOLON, COMMA]

    ASSIGN_OP  shift, and go to state 48

    $default  reduce using rule 25 (variable)


State 20

   14 $@4: . %empty  [SEMICOLON]
   15 declaration: type $@3 names . $@4 SEMICOLON
   19 names: names . COMMA variable
   20      | names . COMMA init

    COMMA  shift, and go to state 49

    $default  reduce using rule 14 ($@4)

    $@4  go to state 50


State 21

   22 names: init .

    $default  reduce using rule 22 (names)


State 22

   23 init: var_init .

    $default  reduce using rule 23 (init)


State 23

   21 names: variable .

    $default  reduce using rule 21 (names)


State 24

   25 variable: IDENT .  [ASSIGN_OP]
   86 statement: IDENT . INC_OP SEMICOLON
   87          | IDENT . DEC_OP SEMICOLON
  113 func_call: IDENT . LEFT_PAREN arguments RIGHT_PAREN

    LEFT_PAREN  shift, and go to state 51
    INC_OP      shift, and go to state 52
    DEC_OP      shift, and go to state 53

    $default  reduce using rule 25 (variable)


State 25

   59 if_statement: IF . LEFT_PAREN expression RIGHT_PAREN tail else_if else_part
   60             | IF . LEFT_PAREN expression RIGHT_PAREN tail else_part

    LEFT_PAREN  shift, and go to state 54


State 26

   61 while_statement: WHILE . LEFT_PAREN expression RIGHT_PAREN tail

    LEFT_PAREN  shift, and go to state 55


State 27

   63 for_statement: FOR . LEFT_PAREN assignment SEMICOLON expression SEMICOLON IDENT INC_OP RIGHT_PAREN tail
   64              | FOR . LEFT_PAREN assignment SEMICOLON expression SEMICOLON IDENT DEC_OP RIGHT_PAREN tail

    LEFT_PAREN  shift, and go to state 56


State 28

   54 tail: . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   65 do_statement: DO . tail UNTIL LEFT_PAREN expression RIGHT_PAREN SEMICOLON

    LEFT_CURLY_BRACKET  shift, and go to state 57

    tail  go to state 58


State 29

   66 switch_statement: SWITCH . LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    LEFT_PAREN  shift, and go to state 59


State 30

   82 statement: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 60


State 31

   81 statement: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 61


State 32

  108 enum_statement: ENUM . IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON

    IDENT  shift, and go to state 62


State 33

   84 statement: INC_OP . IDENT SEMICOLON

    IDENT  shift, and go to state 63


State 34

   85 statement: DEC_OP . IDENT SEMICOLON

    IDENT  shift, and go to state 64


State 35

   26 var_ref: variable .

    $default  reduce using rule 26 (var_ref)


State 36

   62 assignment: var_ref . ASSIGN_OP expression

    ASSIGN_OP  shift, and go to state 65


State 37

   74 statement: if_statement .

    $default  reduce using rule 74 (statement)


State 38

   75 statement: while_statement .

    $default  reduce using rule 75 (statement)


State 39

   83 statement: assignment . SEMICOLON

    SEMICOLON  shift, and go to state 66


State 40

   76 statement: for_statement .

    $default  reduce using rule 76 (statement)


State 41

   77 statement: do_statement .

    $default  reduce using rule 77 (statement)


State 42

   78 statement: switch_statement .

    $default  reduce using rule 78 (statement)


State 43

    2 $@2: . %empty  [RETURN]
    3 program: declarations $@1 statements . $@2 RETURN SEMICOLON functions_optional
   25 variable: . IDENT
   26 var_ref: . variable
   59 if_statement: . IF LEFT_PAREN expression RIGHT_PAREN tail else_if else_part
   60             | . IF LEFT_PAREN expression RIGHT_PAREN tail else_part
   61 while_statement: . WHILE LEFT_PAREN expression RIGHT_PAREN tail
   62 assignment: . var_ref ASSIGN_OP expression
   63 for_statement: . FOR LEFT_PAREN assignment SEMICOLON expression SEMICOLON IDENT INC_OP RIGHT_PAREN tail
   64              | . FOR LEFT_PAREN assignment SEMICOLON expression SEMICOLON IDENT DEC_OP RIGHT_PAREN tail
   65 do_statement: . DO tail UNTIL LEFT_PAREN expression RIGHT_PAREN SEMICOLON
   66 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   72 statements: statements . statement
   74 statement: . if_statement
   75          | . while_statement
   76          | . for_statement
   77          | . do_statement
   78          | . switch_statement
   79          | . enum_statement
   80          | . func_call SEMICOLON
   81          | . CONTINUE SEMICOLON
   82          | . BREAK SEMICOLON
   83          | . assignment SEMICOLON
   84          | . INC_OP IDENT SEMICOLON
   85          | . DEC_OP IDENT SEMICOLON
   86          | . IDENT INC_OP SEMICOLON
   87          | . IDENT DEC_OP SEMICOLON
  108 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT     shift, and go to state 24
    IF        shift, and go to state 25
    WHILE     shift, and go to state 26
    FOR       shift, and go to state 27
    DO        shift, and go to state 28
    SWITCH    shift, and go to state 29
    BREAK     shift, and go to state 30
    CONTINUE  shift, and go to state 31
    ENUM      shift, and go to state 32
    INC_OP    shift, and go to state 33
    DEC_OP    shift, and go to state 34

    $default  reduce using rule 2 ($@2)

    $@2               go to state 67
    variable          go to state 35
    var_ref           go to state 36
    if_statement      go to state 37
    while_statement   go to state 38
    assignment        go to state 39
    for_statement     go to state 40
    do_statement      go to state 41
    switch_statement  go to state 42
    statement         go to state 68
    enum_statement    go to state 45
    func_call         go to state 46


State 44

   73 statements: statement .

    $default  reduce using rule 73 (statements)


State 45

   79 statement: enum_statement .

    $default  reduce using rule 79 (statement)


State 46

   80 statement: func_call . SEMICOLON

    SEMICOLON  shift, and go to state 69


State 47

   17 $@6: . %empty  [SEMICOLON]
   18 declaration: CONST type $@5 names . $@6 SEMICOLON
   19 names: names . COMMA variable
   20      | names . COMMA init

    COMMA  shift, and go to state 49

    $default  reduce using rule 17 ($@6)

    $@6  go to state 70


State 48

   24 var_init: IDENT ASSIGN_OP . value
   48 value: . CONST_INT
   49      | . CONST_FLOAT
   50      | . CONST_CHAR
   51      | . STRING_LITERAL
   52      | . TRUE_TOKEN
   53      | . FALSE_TOKEN

    CONST_INT       shift, and go to state 71
    CONST_FLOAT     shift, and go to state 72
    CONST_CHAR      shift, and go to state 73
    STRING_LITERAL  shift, and go to state 74
    TRUE_TOKEN      shift, and go to state 75
    FALSE_TOKEN     shift, and go to state 76

    value  go to state 77


State 49

   19 names: names COMMA . variable
   20      | names COMMA . init
   23 init: . var_init
   24 var_init: . IDENT ASSIGN_OP value
   25 variable: . IDENT

    IDENT  shift, and go to state 19

    init      go to state 78
    var_init  go to state 22
    variable  go to state 79


State 50

   15 declaration: type $@3 names $@4 . SEMICOLON

    SEMICOLON  shift, and go to state 80


State 51

   25 variable: . IDENT
   26 var_ref: . variable
   29 expression: . expression ADD_OP expression
   30           | . expression SUB_OP expression
   31           | . expression MUL_OP expression
   32           | . expression DIV_OP expression
   33           | . expression MOD_OP expression
   34           | . expression AND_OP expression
   35           | . expression OR_OP expression
   36           | . NOT_OP expression
   37           | . expression EQ_OP expression
   38           | . expression REL_OP expression
   39           | . LEFT_PAREN expression RIGHT_PAREN
   40           | . INC_OP IDENT
   41           | . DEC_OP IDENT
   42           | . IDENT INC_OP
   43           | . IDENT DEC_OP
   44           | . func_call
   45           | . var_ref
   46           | . value
   47           | . SUB_OP value
   48 value: . CONST_INT
   49      | . CONST_FLOAT
   50      | . CONST_CHAR
   51      | . STRING_LITERAL
   52      | . TRUE_TOKEN
   53      | . FALSE_TOKEN
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  113          | IDENT LEFT_PAREN . arguments RIGHT_PAREN
  114 arguments: . argument
  115          | . %empty  [RIGHT_PAREN]
  116 argument: . argument COMMA expression
  117         | . expression

    IDENT           shift, and go to state 81
    CONST_INT       shift, and go to state 71
    CONST_FLOAT     shift, and go to state 72
    CONST_CHAR      shift, and go to state 73
    STRING_LITERAL  shift, and go to state 74
    TRUE_TOKEN      shift, and go to state 75
    FALSE_TOKEN     shift, and go to state 76
    LEFT_PAREN      shift, and go to state 82
    SUB_OP          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    NOT_OP          shift, and go to state 86

    $default  reduce using rule 115 (arguments)

    variable    go to state 35
    var_ref     go to state 87
    expression  go to state 88
    value       go to state 89
    func_call   go to state 90
    arguments   go to state 91
    argument    go to state 92


State 52

   86 statement: IDENT INC_OP . SEMICOLON

    SEMICOLON  shift, and go to state 93


State 53

   87 statement: IDENT DEC_OP . SEMICOLON

    SEMICOLON  shift, and go to state 94


State 54

   25 variable: . IDENT
   26 var_ref: . variable
   29 expression: . expression ADD_OP expression
   30           | . expression SUB_OP expression
   31           | . expression MUL_OP expression
   32           | . expression DIV_OP expression
   33           | . expression MOD_OP expression
   34           | . expression AND_OP expression
   35           | . expression OR_OP expression
   36           | . NOT_OP expression
   37           | . expression EQ_OP expression
   38           | . expression REL_OP expression
   39           | . LEFT_PAREN expression RIGHT_PAREN
   40           | . INC_OP IDENT
   41           | . DEC_OP IDENT
   42           | . IDENT INC_OP
   43           | . IDENT DEC_OP
   44           | . func_call
   45           | . var_ref
   46           | . value
   47           | . SUB_OP value
   48 value: . CONST_INT
   49      | . CONST_FLOAT
   50      | . CONST_CHAR
   51      | . STRING_LITERAL
   52      | . TRUE_TOKEN
   53      | . FALSE_TOKEN
   59 if_statement: IF LEFT_PAREN . expression RIGHT_PAREN tail else_if else_part
   60             | IF LEFT_PAREN . expression RIGHT_PAREN tail else_part
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 81
    CONST_INT       shift, and go to state 71
    CONST_FLOAT     shift, and go to state 72
    CONST_CHAR      shift, and go to state 73
    STRING_LITERAL  shift, and go to state 74
    TRUE_TOKEN      shift, and go to state 75
    FALSE_TOKEN     shift, and go to state 76
    LEFT_PAREN      shift, and go to state 82
    SUB_OP          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    NOT_OP          shift, and go to state 86

    variable    go to state 35
    var_ref     go to state 87
    expression  go to state 95
    value       go to state 89
    func_call   go to state 90


State 55

   25 variable: . IDENT
   26 var_ref: . variable
   29 expression: . expression ADD_OP expression
   30           | . expression SUB_OP expression
   31           | . expression MUL_OP expression
   32           | . expression DIV_OP expression
   33           | . expression MOD_OP expression
   34           | . expression AND_OP expression
   35           | . expression OR_OP expression
   36           | . NOT_OP expression
   37           | . expression EQ_OP expression
   38           | . expression REL_OP expression
   39           | . LEFT_PAREN expression RIGHT_PAREN
   40           | . INC_OP IDENT
   41           | . DEC_OP IDENT
   42           | . IDENT INC_OP
   43           | . IDENT DEC_OP
   44           | . func_call
   45           | . var_ref
   46           | . value
   47           | . SUB_OP value
   48 value: . CONST_INT
   49      | . CONST_FLOAT
   50      | . CONST_CHAR
   51      | . STRING_LITERAL
   52      | . TRUE_TOKEN
   53      | . FALSE_TOKEN
   61 while_statement: WHILE LEFT_PAREN . expression RIGHT_PAREN tail
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 81
    CONST_INT       shift, and go to state 71
    CONST_FLOAT     shift, and go to state 72
    CONST_CHAR      shift, and go to state 73
    STRING_LITERAL  shift, and go to state 74
    TRUE_TOKEN      shift, and go to state 75
    FALSE_TOKEN     shift, and go to state 76
    LEFT_PAREN      shift, and go to state 82
    SUB_OP          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    NOT_OP          shift, and go to state 86

    variable    go to state 35
    var_ref     go to state 87
    expression  go to state 96
    value       go to state 89
    func_call   go to state 90


State 56

   25 variable: . IDENT
   26 var_ref: . variable
   62 assignment: . var_ref ASSIGN_OP expression
   63 for_statement: FOR LEFT_PAREN . assignment SEMICOLON expression SEMICOLON IDENT INC_OP RIGHT_PAREN tail
   64              | FOR LEFT_PAREN . assignment SEMICOLON expression SEMICOLON IDENT DEC_OP RIGHT_PAREN tail

    IDENT  shift, and go to state 97

    variable    go to state 35
    var_ref     go to state 36
    assignment  go to state 98


State 57

   25 variable: . IDENT
   26 var_ref: . variable
   54 tail: LEFT_CURLY_BRACKET . statements RIGHT_CURLY_BRACKET
   59 if_statement: . IF LEFT_PAREN expression RIGHT_PAREN tail else_if else_part
   60             | . IF LEFT_PAREN expression RIGHT_PAREN tail else_part
   61 while_statement: . WHILE LEFT_PAREN expression RIGHT_PAREN tail
   62 assignment: . var_ref ASSIGN_OP expression
   63 for_statement: . FOR LEFT_PAREN assignment SEMICOLON expression SEMICOLON IDENT INC_OP RIGHT_PAREN tail
   64              | . FOR LEFT_PAREN assignment SEMICOLON expression SEMICOLON IDENT DEC_OP RIGHT_PAREN tail
   65 do_statement: . DO tail UNTIL LEFT_PAREN expression RIGHT_PAREN SEMICOLON
   66 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   72 statements: . statements statement
   73           | . statement
   74 statement: . if_statement
   75          | . while_statement
   76          | . for_statement
   77          | . do_statement
   78          | . switch_statement
   79          | . enum_statement
   80          | . func_call SEMICOLON
   81          | . CONTINUE SEMICOLON
   82          | . BREAK SEMICOLON
   83          | . assignment SEMICOLON
   84          | . INC_OP IDENT SEMICOLON
   85          | . DEC_OP IDENT SEMICOLON
   86          | . IDENT INC_OP SEMICOLON
   87          | . IDENT DEC_OP SEMICOLON
  108 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT     shift, and go to state 24
    IF        shift, and go to state 25
    WHILE     shift, and go to state 26
    FOR       shift, and go to state 27
    DO        shift, and go to state 28
    SWITCH    shift, and go to state 29
    BREAK     shift, and go to state 30
    CONTINUE  shift, and go to state 31
    ENUM      shift, and go to state 32
    INC_OP    shift, and go to state 33
    DEC_OP    shift, and go to state 34

    variable          go to state 35
    var_ref           go to state 36
    if_statement      go to state 37
    while_statement   go to state 38
    assignment        go to state 39
    for_statement     go to state 40
    do_statement      go to state 41
    switch_statement  go to state 42
    statements        go to state 99
    statement         go to state 44
    enum_statement    go to state 45
    func_call         go to state 46


State 58

   65 do_statement: DO tail . UNTIL LEFT_PAREN expression RIGHT_PAREN SEMICOLON

    UNTIL  shift, and go to state 100


State 59

   25 variable: . IDENT
   26 var_ref: . variable
   29 expression: . expression ADD_OP expression
   30           | . expression SUB_OP expression
   31           | . expression MUL_OP expression
   32           | . expression DIV_OP expression
   33           | . expression MOD_OP expression
   34           | . expression AND_OP expression
   35           | . expression OR_OP expression
   36           | . NOT_OP expression
   37           | . expression EQ_OP expression
   38           | . expression REL_OP expression
   39           | . LEFT_PAREN expression RIGHT_PAREN
   40           | . INC_OP IDENT
   41           | . DEC_OP IDENT
   42           | . IDENT INC_OP
   43           | . IDENT DEC_OP
   44           | . func_call
   45           | . var_ref
   46           | . value
   47           | . SUB_OP value
   48 value: . CONST_INT
   49      | . CONST_FLOAT
   50      | . CONST_CHAR
   51      | . STRING_LITERAL
   52      | . TRUE_TOKEN
   53      | . FALSE_TOKEN
   66 switch_statement: SWITCH LEFT_PAREN . expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 81
    CONST_INT       shift, and go to state 71
    CONST_FLOAT     shift, and go to state 72
    CONST_CHAR      shift, and go to state 73
    STRING_LITERAL  shift, and go to state 74
    TRUE_TOKEN      shift, and go to state 75
    FALSE_TOKEN     shift, and go to state 76
    LEFT_PAREN      shift, and go to state 82
    SUB_OP          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    NOT_OP          shift, and go to state 86

    variable    go to state 35
    var_ref     go to state 87
    expression  go to state 101
    value       go to state 89
    func_call   go to state 90


State 60

   82 statement: BREAK SEMICOLON .

    $default  reduce using rule 82 (statement)


State 61

   81 statement: CONTINUE SEMICOLON .

    $default  reduce using rule 81 (statement)


State 62

  108 enum_statement: ENUM IDENT . LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON

    LEFT_CURLY_BRACKET  shift, and go to state 102


State 63

   84 statement: INC_OP IDENT . SEMICOLON

    SEMICOLON  shift, and go to state 103


State 64

   85 statement: DEC_OP IDENT . SEMICOLON

    SEMICOLON  shift, and go to state 104


State 65

   25 variable: . IDENT
   26 var_ref: . variable
   29 expression: . expression ADD_OP expression
   30           | . expression SUB_OP expression
   31           | . expression MUL_OP expression
   32           | . expression DIV_OP expression
   33           | . expression MOD_OP expression
   34           | . expression AND_OP expression
   35           | . expression OR_OP expression
   36           | . NOT_OP expression
   37           | . expression EQ_OP expression
   38           | . expression REL_OP expression
   39           | . LEFT_PAREN expression RIGHT_PAREN
   40           | . INC_OP IDENT
   41           | . DEC_OP IDENT
   42           | . IDENT INC_OP
   43           | . IDENT DEC_OP
   44           | . func_call
   45           | . var_ref
   46           | . value
   47           | . SUB_OP value
   48 value: . CONST_INT
   49      | . CONST_FLOAT
   50      | . CONST_CHAR
   51      | . STRING_LITERAL
   52      | . TRUE_TOKEN
   53      | . FALSE_TOKEN
   62 assignment: var_ref ASSIGN_OP . expression
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 81
    CONST_INT       shift, and go to state 71
    CONST_FLOAT     shift, and go to state 72
    CONST_CHAR      shift, and go to state 73
    STRING_LITERAL  shift, and go to state 74
    TRUE_TOKEN      shift, and go to state 75
    FALSE_TOKEN     shift, and go to state 76
    LEFT_PAREN      shift, and go to state 82
    SUB_OP          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    NOT_OP          shift, and go to state 86

    variable    go to state 35
    var_ref     go to state 87
    expression  go to state 105
    value       go to state 89
    func_call   go to state 90


State 66

   83 statement: assignment SEMICOLON .

    $default  reduce using rule 83 (statement)


State 67

    3 program: declarations $@1 statements $@2 . RETURN SEMICOLON functions_optional

    RETURN  shift, and go to state 106


State 68

   72 statements: statements statement .

    $default  reduce using rule 72 (statements)


State 69

   80 statement: func_call SEMICOLON .

    $default  reduce using rule 80 (statement)


State 70

   18 declaration: CONST type $@5 names $@6 . SEMICOLON

    SEMICOLON  shift, and go to state 107


State 71

   48 value: CONST_INT .

    $default  reduce using rule 48 (value)


State 72

   49 value: CONST_FLOAT .

    $default  reduce using rule 49 (value)


State 73

   50 value: CONST_CHAR .

    $default  reduce using rule 50 (value)


State 74

   51 value: STRING_LITERAL .

    $default  reduce using rule 51 (value)


State 75

   52 value: TRUE_TOKEN .

    $default  reduce using rule 52 (value)


State 76

   53 value: FALSE_TOKEN .

    $default  reduce using rule 53 (value)


State 77

   24 var_init: IDENT ASSIGN_OP value .

    $default  reduce using rule 24 (var_init)


State 78

   20 names: names COMMA init .

    $default  reduce using rule 20 (names)


State 79

   19 names: names COMMA variable .

    $default  reduce using rule 19 (names)


State 80

   15 declaration: type $@3 names $@4 SEMICOLON .

    $default  reduce using rule 15 (declaration)


State 81

   25 variable: IDENT .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, ADD_OP, SUB_OP, MUL_OP, DIV_OP, MOD_OP, OR_OP, AND_OP, EQ_OP, REL_OP]
   42 expression: IDENT . INC_OP
   43           | IDENT . DEC_OP
  113 func_call: IDENT . LEFT_PAREN arguments RIGHT_PAREN

    LEFT_PAREN  shift, and go to state 51
    INC_OP      shift, and go to state 108
    DEC_OP      shift, and go to state 109

    $default  reduce using rule 25 (variable)


State 82

   25 variable: . IDENT
   26 var_ref: . variable
   29 expression: . expression ADD_OP expression
   30           | . expression SUB_OP expression
   31           | . expression MUL_OP expression
   32           | . expression DIV_OP expression
   33           | . expression MOD_OP expression
   34           | . expression AND_OP expression
   35           | . expression OR_OP expression
   36           | . NOT_OP expression
   37           | . expression EQ_OP expression
   38           | . expression REL_OP expression
   39           | . LEFT_PAREN expression RIGHT_PAREN
   39           | LEFT_PAREN . expression RIGHT_PAREN
   40           | . INC_OP IDENT
   41           | . DEC_OP IDENT
   42           | . IDENT INC_OP
   43           | . IDENT DEC_OP
   44           | . func_call
   45           | . var_ref
   46           | . value
   47           | . SUB_OP value
   48 value: . CONST_INT
   49      | . CONST_FLOAT
   50      | . CONST_CHAR
   51      | . STRING_LITERAL
   52      | . TRUE_TOKEN
   53      | . FALSE_TOKEN
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 81
    CONST_INT       shift, and go to state 71
    CONST_FLOAT     shift, and go to state 72
    CONST_CHAR      shift, and go to state 73
    STRING_LITERAL  shift, and go to state 74
    TRUE_TOKEN      shift, and go to state 75
    FALSE_TOKEN     shift, and go to state 76
    LEFT_PAREN      shift, and go to state 82
    SUB_OP          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    NOT_OP          shift, and go to state 86

    variable    go to state 35
    var_ref     go to state 87
    expression  go to state 110
    value       go to state 89
    func_call   go to state 90


State 83

   47 expression: SUB_OP . value
   48 value: . CONST_INT
   49      | . CONST_FLOAT
   50      | . CONST_CHAR
   51      | . STRING_LITERAL
   52      | . TRUE_TOKEN
   53      | . FALSE_TOKEN

    CONST_INT       shift, and go to state 71
    CONST_FLOAT     shift, and go to state 72
    CONST_CHAR      shift, and go to state 73
    STRING_LITERAL  shift, and go to state 74
    TRUE_TOKEN      shift, and go to state 75
    FALSE_TOKEN     shift, and go to state 76

    value  go to state 111


State 84

   40 expression: INC_OP . IDENT

    IDENT  shift, and go to state 112


State 85

   41 expression: DEC_OP . IDENT

    IDENT  shift, and go to state 113


State 86

   25 variable: . IDENT
   26 var_ref: . variable
   29 expression: . expression ADD_OP expression
   30           | . expression SUB_OP expression
   31           | . expression MUL_OP expression
   32           | . expression DIV_OP expression
   33           | . expression MOD_OP expression
   34           | . expression AND_OP expression
   35           | . expression OR_OP expression
   36           | . NOT_OP expression
   36           | NOT_OP . expression
   37           | . expression EQ_OP expression
   38           | . expression REL_OP expression
   39           | . LEFT_PAREN expression RIGHT_PAREN
   40           | . INC_OP IDENT
   41           | . DEC_OP IDENT
   42           | . IDENT INC_OP
   43           | . IDENT DEC_OP
   44           | . func_call
   45           | . var_ref
   46           | . value
   47           | . SUB_OP value
   48 value: . CONST_INT
   49      | . CONST_FLOAT
   50      | . CONST_CHAR
   51      | . STRING_LITERAL
   52      | . TRUE_TOKEN
   53      | . FALSE_TOKEN
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 81
    CONST_INT       shift, and go to state 71
    CONST_FLOAT     shift, and go to state 72
    CONST_CHAR      shift, and go to state 73
    STRING_LITERAL  shift, and go to state 74
    TRUE_TOKEN      shift, and go to state 75
    FALSE_TOKEN     shift, and go to state 76
    LEFT_PAREN      shift, and go to state 82
    SUB_OP          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    NOT_OP          shift, and go to state 86

    variable    go to state 35
    var_ref     go to state 87
    expression  go to state 114
    value       go to state 89
    func_call   go to state 90


State 87

   45 expression: var_ref .

    $default  reduce using rule 45 (expression)


State 88

   29 expression: expression . ADD_OP expression
   30           | expression . SUB_OP expression
   31           | expression . MUL_OP expression
   32           | expression . DIV_OP expression
   33           | expression . MOD_OP expression
   34           | expression . AND_OP expression
   35           | expression . OR_OP expression
   37           | expression . EQ_OP expression
   38           | expression . REL_OP expression
  117 argument: expression .  [RIGHT_PAREN, COMMA]

    ADD_OP  shift, and go to state 115
    SUB_OP  shift, and go to state 116
    MUL_OP  shift, and go to state 117
    DIV_OP  shift, and go to state 118
    MOD_OP  shift, and go to state 119
    OR_OP   shift, and go to state 120
    AND_OP  shift, and go to state 121
    EQ_OP   shift, and go to state 122
    REL_OP  shift, and go to state 123

    $default  reduce using rule 117 (argument)


State 89

   46 expression: value .

    $default  reduce using rule 46 (expression)


State 90

   44 expression: func_call .

    $default  reduce using rule 44 (expression)


State 91

  113 func_call: IDENT LEFT_PAREN arguments . RIGHT_PAREN

    RIGHT_PAREN  shift, and go to state 124


State 92

  114 arguments: argument .  [RIGHT_PAREN]
  116 argument: argument . COMMA expression

    COMMA  shift, and go to state 125

    $default  reduce using rule 114 (arguments)


State 93

   86 statement: IDENT INC_OP SEMICOLON .

    $default  reduce using rule 86 (statement)


State 94

   87 statement: IDENT DEC_OP SEMICOLON .

    $default  reduce using rule 87 (statement)


State 95

   29 expression: expression . ADD_OP expression
   30           | expression . SUB_OP expression
   31           | expression . MUL_OP expression
   32           | expression . DIV_OP expression
   33           | expression . MOD_OP expression
   34           | expression . AND_OP expression
   35           | expression . OR_OP expression
   37           | expression . EQ_OP expression
   38           | expression . REL_OP expression
   59 if_statement: IF LEFT_PAREN expression . RIGHT_PAREN tail else_if else_part
   60             | IF LEFT_PAREN expression . RIGHT_PAREN tail else_part

    RIGHT_PAREN  shift, and go to state 126
    ADD_OP       shift, and go to state 115
    SUB_OP       shift, and go to state 116
    MUL_OP       shift, and go to state 117
    DIV_OP       shift, and go to state 118
    MOD_OP       shift, and go to state 119
    OR_OP        shift, and go to state 120
    AND_OP       shift, and go to state 121
    EQ_OP        shift, and go to state 122
    REL_OP       shift, and go to state 123


State 96

   29 expression: expression . ADD_OP expression
   30           | expression . SUB_OP expression
   31           | expression . MUL_OP expression
   32           | expression . DIV_OP expression
   33           | expression . MOD_OP expression
   34           | expression . AND_OP expression
   35           | expression . OR_OP expression
   37           | expression . EQ_OP expression
   38           | expression . REL_OP expression
   61 while_statement: WHILE LEFT_PAREN expression . RIGHT_PAREN tail

    RIGHT_PAREN  shift, and go to state 127
    ADD_OP       shift, and go to state 115
    SUB_OP       shift, and go to state 116
    MUL_OP       shift, and go to state 117
    DIV_OP       shift, and go to state 118
    MOD_OP       shift, and go to state 119
    OR_OP        shift, and go to state 120
    AND_OP       shift, and go to state 121
    EQ_OP        shift, and go to state 122
    REL_OP       shift, and go to state 123


State 97

   25 variable: IDENT .

    $default  reduce using rule 25 (variable)


State 98

   63 for_statement: FOR LEFT_PAREN assignment . SEMICOLON expression SEMICOLON IDENT INC_OP RIGHT_PAREN tail
   64              | FOR LEFT_PAREN assignment . SEMICOLON expression SEMICOLON IDENT DEC_OP RIGHT_PAREN tail

    SEMICOLON  shift, and go to state 128


State 99

   25 variable: . IDENT
   26 var_ref: . variable
   54 tail: LEFT_CURLY_BRACKET statements . RIGHT_CURLY_BRACKET
   59 if_statement: . IF LEFT_PAREN expression RIGHT_PAREN tail else_if else_part
   60             | . IF LEFT_PAREN expression RIGHT_PAREN tail else_part
   61 while_statement: . WHILE LEFT_PAREN expression RIGHT_PAREN tail
   62 assignment: . var_ref ASSIGN_OP expression
   63 for_statement: . FOR LEFT_PAREN assignment SEMICOLON expression SEMICOLON IDENT INC_OP RIGHT_PAREN tail
   64              | . FOR LEFT_PAREN assignment SEMICOLON expression SEMICOLON IDENT DEC_OP RIGHT_PAREN tail
   65 do_statement: . DO tail UNTIL LEFT_PAREN expression RIGHT_PAREN SEMICOLON
   66 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   72 statements: statements . statement
   74 statement: . if_statement
   75          | . while_statement
   76          | . for_statement
   77          | . do_statement
   78          | . switch_statement
   79          | . enum_statement
   80          | . func_call SEMICOLON
   81          | . CONTINUE SEMICOLON
   82          | . BREAK SEMICOLON
   83          | . assignment SEMICOLON
   84          | . INC_OP IDENT SEMICOLON
   85          | . DEC_OP IDENT SEMICOLON
   86          | . IDENT INC_OP SEMICOLON
   87          | . IDENT DEC_OP SEMICOLON
  108 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT                shift, and go to state 24
    IF                   shift, and go to state 25
    WHILE                shift, and go to state 26
    FOR                  shift, and go to state 27
    DO                   shift, and go to state 28
    SWITCH               shift, and go to state 29
    BREAK                shift, and go to state 30
    CONTINUE             shift, and go to state 31
    ENUM                 shift, and go to state 32
    RIGHT_CURLY_BRACKET  shift, and go to state 129
    INC_OP               shift, and go to state 33
    DEC_OP               shift, and go to state 34

    variable          go to state 35
    var_ref           go to state 36
    if_statement      go to state 37
    while_statement   go to state 38
    assignment        go to state 39
    for_statement     go to state 40
    do_statement      go to state 41
    switch_statement  go to state 42
    statement         go to state 68
    enum_statement    go to state 45
    func_call         go to state 46


State 100

   65 do_statement: DO tail UNTIL . LEFT_PAREN expression RIGHT_PAREN SEMICOLON

    LEFT_PAREN  shift, and go to state 130


State 101

   29 expression: expression . ADD_OP expression
   30           | expression . SUB_OP expression
   31           | expression . MUL_OP expression
   32           | expression . DIV_OP expression
   33           | expression . MOD_OP expression
   34           | expression . AND_OP expression
   35           | expression . OR_OP expression
   37           | expression . EQ_OP expression
   38           | expression . REL_OP expression
   66 switch_statement: SWITCH LEFT_PAREN expression . RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    RIGHT_PAREN  shift, and go to state 131
    ADD_OP       shift, and go to state 115
    SUB_OP       shift, and go to state 116
    MUL_OP       shift, and go to state 117
    DIV_OP       shift, and go to state 118
    MOD_OP       shift, and go to state 119
    OR_OP        shift, and go to state 120
    AND_OP       shift, and go to state 121
    EQ_OP        shift, and go to state 122
    REL_OP       shift, and go to state 123


State 102

   24 var_init: . IDENT ASSIGN_OP value
  108 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET . enum_list RIGHT_CURLY_BRACKET SEMICOLON
  109 enum_list: . one_val
  110          | . enum_list COMMA one_val
  111 one_val: . IDENT
  112        | . var_init

    IDENT  shift, and go to state 132

    var_init   go to state 133
    enum_list  go to state 134
    one_val    go to state 135


State 103

   84 statement: INC_OP IDENT SEMICOLON .

    $default  reduce using rule 84 (statement)


State 104

   85 statement: DEC_OP IDENT SEMICOLON .

    $default  reduce using rule 85 (statement)


State 105

   29 expression: expression . ADD_OP expression
   30           | expression . SUB_OP expression
   31           | expression . MUL_OP expression
   32           | expression . DIV_OP expression
   33           | expression . MOD_OP expression
   34           | expression . AND_OP expression
   35           | expression . OR_OP expression
   37           | expression . EQ_OP expression
   38           | expression . REL_OP expression
   62 assignment: var_ref ASSIGN_OP expression .  [SEMICOLON]

    ADD_OP  shift, and go to state 115
    SUB_OP  shift, and go to state 116
    MUL_OP  shift, and go to state 117
    DIV_OP  shift, and go to state 118
    MOD_OP  shift, and go to state 119
    OR_OP   shift, and go to state 120
    AND_OP  shift, and go to state 121
    EQ_OP   shift, and go to state 122
    REL_OP  shift, and go to state 123

    $default  reduce using rule 62 (assignment)


State 106

    3 program: declarations $@1 statements $@2 RETURN . SEMICOLON functions_optional

    SEMICOLON  shift, and go to state 136


State 107

   18 declaration: CONST type $@5 names $@6 SEMICOLON .

    $default  reduce using rule 18 (declaration)


State 108

   42 expression: IDENT INC_OP .

    $default  reduce using rule 42 (expression)


State 109

   43 expression: IDENT DEC_OP .

    $default  reduce using rule 43 (expression)


State 110

   29 expression: expression . ADD_OP expression
   30           | expression . SUB_OP expression
   31           | expression . MUL_OP expression
   32           | expression . DIV_OP expression
   33           | expression . MOD_OP expression
   34           | expression . AND_OP expression
   35           | expression . OR_OP expression
   37           | expression . EQ_OP expression
   38           | expression . REL_OP expression
   39           | LEFT_PAREN expression . RIGHT_PAREN

    RIGHT_PAREN  shift, and go to state 137
    ADD_OP       shift, and go to state 115
    SUB_OP       shift, and go to state 116
    MUL_OP       shift, and go to state 117
    DIV_OP       shift, and go to state 118
    MOD_OP       shift, and go to state 119
    OR_OP        shift, and go to state 120
    AND_OP       shift, and go to state 121
    EQ_OP        shift, and go to state 122
    REL_OP       shift, and go to state 123


State 111

   47 expression: SUB_OP value .

    $default  reduce using rule 47 (expression)


State 112

   40 expression: INC_OP IDENT .

    $default  reduce using rule 40 (expression)


State 113

   41 expression: DEC_OP IDENT .

    $default  reduce using rule 41 (expression)


State 114

   29 expression: expression . ADD_OP expression
   30           | expression . SUB_OP expression
   31           | expression . MUL_OP expression
   32           | expression . DIV_OP expression
   33           | expression . MOD_OP expression
   34           | expression . AND_OP expression
   35           | expression . OR_OP expression
   36           | NOT_OP expression .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, ADD_OP, SUB_OP, MUL_OP, DIV_OP, MOD_OP, OR_OP, AND_OP, EQ_OP, REL_OP]
   37           | expression . EQ_OP expression
   38           | expression . REL_OP expression

    $default  reduce using rule 36 (expression)

    Conflict between rule 36 and token ADD_OP resolved as reduce (ADD_OP < NOT_OP).
    Conflict between rule 36 and token SUB_OP resolved as reduce (SUB_OP < NOT_OP).
    Conflict between rule 36 and token MUL_OP resolved as reduce (MUL_OP < NOT_OP).
    Conflict between rule 36 and token DIV_OP resolved as reduce (DIV_OP < NOT_OP).
    Conflict between rule 36 and token MOD_OP resolved as reduce (MOD_OP < NOT_OP).
    Conflict between rule 36 and token OR_OP resolved as reduce (OR_OP < NOT_OP).
    Conflict between rule 36 and token AND_OP resolved as reduce (AND_OP < NOT_OP).
    Conflict between rule 36 and token EQ_OP resolved as reduce (EQ_OP < NOT_OP).
    Conflict between rule 36 and token REL_OP resolved as reduce (REL_OP < NOT_OP).


State 115

   25 variable: . IDENT
   26 var_ref: . variable
   29 expression: . expression ADD_OP expression
   29           | expression ADD_OP . expression
   30           | . expression SUB_OP expression
   31           | . expression MUL_OP expression
   32           | . expression DIV_OP expression
   33           | . expression MOD_OP expression
   34           | . expression AND_OP expression
   35           | . expression OR_OP expression
   36           | . NOT_OP expression
   37           | . expression EQ_OP expression
   38           | . expression REL_OP expression
   39           | . LEFT_PAREN expression RIGHT_PAREN
   40           | . INC_OP IDENT
   41           | . DEC_OP IDENT
   42           | . IDENT INC_OP
   43           | . IDENT DEC_OP
   44           | . func_call
   45           | . var_ref
   46           | . value
   47           | . SUB_OP value
   48 value: . CONST_INT
   49      | . CONST_FLOAT
   50      | . CONST_CHAR
   51      | . STRING_LITERAL
   52      | . TRUE_TOKEN
   53      | . FALSE_TOKEN
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 81
    CONST_INT       shift, and go to state 71
    CONST_FLOAT     shift, and go to state 72
    CONST_CHAR      shift, and go to state 73
    STRING_LITERAL  shift, and go to state 74
    TRUE_TOKEN      shift, and go to state 75
    FALSE_TOKEN     shift, and go to state 76
    LEFT_PAREN      shift, and go to state 82
    SUB_OP          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    NOT_OP          shift, and go to state 86

    variable    go to state 35
    var_ref     go to state 87
    expression  go to state 138
    value       go to state 89
    func_call   go to state 90


State 116

   25 variable: . IDENT
   26 var_ref: . variable
   29 expression: . expression ADD_OP expression
   30           | . expression SUB_OP expression
   30           | expression SUB_OP . expression
   31           | . expression MUL_OP expression
   32           | . expression DIV_OP expression
   33           | . expression MOD_OP expression
   34           | . expression AND_OP expression
   35           | . expression OR_OP expression
   36           | . NOT_OP expression
   37           | . expression EQ_OP expression
   38           | . expression REL_OP expression
   39           | . LEFT_PAREN expression RIGHT_PAREN
   40           | . INC_OP IDENT
   41           | . DEC_OP IDENT
   42           | . IDENT INC_OP
   43           | . IDENT DEC_OP
   44           | . func_call
   45           | . var_ref
   46           | . value
   47           | . SUB_OP value
   48 value: . CONST_INT
   49      | . CONST_FLOAT
   50      | . CONST_CHAR
   51      | . STRING_LITERAL
   52      | . TRUE_TOKEN
   53      | . FALSE_TOKEN
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 81
    CONST_INT       shift, and go to state 71
    CONST_FLOAT     shift, and go to state 72
    CONST_CHAR      shift, and go to state 73
    STRING_LITERAL  shift, and go to state 74
    TRUE_TOKEN      shift, and go to state 75
    FALSE_TOKEN     shift, and go to state 76
    LEFT_PAREN      shift, and go to state 82
    SUB_OP          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    NOT_OP          shift, and go to state 86

    variable    go to state 35
    var_ref     go to state 87
    expression  go to state 139
    value       go to state 89
    func_call   go to state 90


State 117

   25 variable: . IDENT
   26 var_ref: . variable
   29 expression: . expression ADD_OP expression
   30           | . expression SUB_OP expression
   31           | . expression MUL_OP expression
   31           | expression MUL_OP . expression
   32           | . expression DIV_OP expression
   33           | . expression MOD_OP expression
   34           | . expression AND_OP expression
   35           | . expression OR_OP expression
   36           | . NOT_OP expression
   37           | . expression EQ_OP expression
   38           | . expression REL_OP expression
   39           | . LEFT_PAREN expression RIGHT_PAREN
   40           | . INC_OP IDENT
   41           | . DEC_OP IDENT
   42           | . IDENT INC_OP
   43           | . IDENT DEC_OP
   44           | . func_call
   45           | . var_ref
   46           | . value
   47           | . SUB_OP value
   48 value: . CONST_INT
   49      | . CONST_FLOAT
   50      | . CONST_CHAR
   51      | . STRING_LITERAL
   52      | . TRUE_TOKEN
   53      | . FALSE_TOKEN
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 81
    CONST_INT       shift, and go to state 71
    CONST_FLOAT     shift, and go to state 72
    CONST_CHAR      shift, and go to state 73
    STRING_LITERAL  shift, and go to state 74
    TRUE_TOKEN      shift, and go to state 75
    FALSE_TOKEN     shift, and go to state 76
    LEFT_PAREN      shift, and go to state 82
    SUB_OP          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    NOT_OP          shift, and go to state 86

    variable    go to state 35
    var_ref     go to state 87
    expression  go to state 140
    value       go to state 89
    func_call   go to state 90


State 118

   25 variable: . IDENT
   26 var_ref: . variable
   29 expression: . expression ADD_OP expression
   30           | . expression SUB_OP expression
   31           | . expression MUL_OP expression
   32           | . expression DIV_OP expression
   32           | expression DIV_OP . expression
   33           | . expression MOD_OP expression
   34           | . expression AND_OP expression
   35           | . expression OR_OP expression
   36           | . NOT_OP expression
   37           | . expression EQ_OP expression
   38           | . expression REL_OP expression
   39           | . LEFT_PAREN expression RIGHT_PAREN
   40           | . INC_OP IDENT
   41           | . DEC_OP IDENT
   42           | . IDENT INC_OP
   43           | . IDENT DEC_OP
   44           | . func_call
   45           | . var_ref
   46           | . value
   47           | . SUB_OP value
   48 value: . CONST_INT
   49      | . CONST_FLOAT
   50      | . CONST_CHAR
   51      | . STRING_LITERAL
   52      | . TRUE_TOKEN
   53      | . FALSE_TOKEN
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 81
    CONST_INT       shift, and go to state 71
    CONST_FLOAT     shift, and go to state 72
    CONST_CHAR      shift, and go to state 73
    STRING_LITERAL  shift, and go to state 74
    TRUE_TOKEN      shift, and go to state 75
    FALSE_TOKEN     shift, and go to state 76
    LEFT_PAREN      shift, and go to state 82
    SUB_OP          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    NOT_OP          shift, and go to state 86

    variable    go to state 35
    var_ref     go to state 87
    expression  go to state 141
    value       go to state 89
    func_call   go to state 90


State 119

   25 variable: . IDENT
   26 var_ref: . variable
   29 expression: . expression ADD_OP expression
   30           | . expression SUB_OP expression
   31           | . expression MUL_OP expression
   32           | . expression DIV_OP expression
   33           | . expression MOD_OP expression
   33           | expression MOD_OP . expression
   34           | . expression AND_OP expression
   35           | . expression OR_OP expression
   36           | . NOT_OP expression
   37           | . expression EQ_OP expression
   38           | . expression REL_OP expression
   39           | . LEFT_PAREN expression RIGHT_PAREN
   40           | . INC_OP IDENT
   41           | . DEC_OP IDENT
   42           | . IDENT INC_OP
   43           | . IDENT DEC_OP
   44           | . func_call
   45           | . var_ref
   46           | . value
   47           | . SUB_OP value
   48 value: . CONST_INT
   49      | . CONST_FLOAT
   50      | . CONST_CHAR
   51      | . STRING_LITERAL
   52      | . TRUE_TOKEN
   53      | . FALSE_TOKEN
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 81
    CONST_INT       shift, and go to state 71
    CONST_FLOAT     shift, and go to state 72
    CONST_CHAR      shift, and go to state 73
    STRING_LITERAL  shift, and go to state 74
    TRUE_TOKEN      shift, and go to state 75
    FALSE_TOKEN     shift, and go to state 76
    LEFT_PAREN      shift, and go to state 82
    SUB_OP          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    NOT_OP          shift, and go to state 86

    variable    go to state 35
    var_ref     go to state 87
    expression  go to state 142
    value       go to state 89
    func_call   go to state 90


State 120

   25 variable: . IDENT
   26 var_ref: . variable
   29 expression: . expression ADD_OP expression
   30           | . expression SUB_OP expression
   31           | . expression MUL_OP expression
   32           | . expression DIV_OP expression
   33           | . expression MOD_OP expression
   34           | . expression AND_OP expression
   35           | . expression OR_OP expression
   35           | expression OR_OP . expression
   36           | . NOT_OP expression
   37           | . expression EQ_OP expression
   38           | . expression REL_OP expression
   39           | . LEFT_PAREN expression RIGHT_PAREN
   40           | . INC_OP IDENT
   41           | . DEC_OP IDENT
   42           | . IDENT INC_OP
   43           | . IDENT DEC_OP
   44           | . func_call
   45           | . var_ref
   46           | . value
   47           | . SUB_OP value
   48 value: . CONST_INT
   49      | . CONST_FLOAT
   50      | . CONST_CHAR
   51      | . STRING_LITERAL
   52      | . TRUE_TOKEN
   53      | . FALSE_TOKEN
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 81
    CONST_INT       shift, and go to state 71
    CONST_FLOAT     shift, and go to state 72
    CONST_CHAR      shift, and go to state 73
    STRING_LITERAL  shift, and go to state 74
    TRUE_TOKEN      shift, and go to state 75
    FALSE_TOKEN     shift, and go to state 76
    LEFT_PAREN      shift, and go to state 82
    SUB_OP          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    NOT_OP          shift, and go to state 86

    variable    go to state 35
    var_ref     go to state 87
    expression  go to state 143
    value       go to state 89
    func_call   go to state 90


State 121

   25 variable: . IDENT
   26 var_ref: . variable
   29 expression: . expression ADD_OP expression
   30           | . expression SUB_OP expression
   31           | . expression MUL_OP expression
   32           | . expression DIV_OP expression
   33           | . expression MOD_OP expression
   34           | . expression AND_OP expression
   34           | expression AND_OP . expression
   35           | . expression OR_OP expression
   36           | . NOT_OP expression
   37           | . expression EQ_OP expression
   38           | . expression REL_OP expression
   39           | . LEFT_PAREN expression RIGHT_PAREN
   40           | . INC_OP IDENT
   41           | . DEC_OP IDENT
   42           | . IDENT INC_OP
   43           | . IDENT DEC_OP
   44           | . func_call
   45           | . var_ref
   46           | . value
   47           | . SUB_OP value
   48 value: . CONST_INT
   49      | . CONST_FLOAT
   50      | . CONST_CHAR
   51      | . STRING_LITERAL
   52      | . TRUE_TOKEN
   53      | . FALSE_TOKEN
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 81
    CONST_INT       shift, and go to state 71
    CONST_FLOAT     shift, and go to state 72
    CONST_CHAR      shift, and go to state 73
    STRING_LITERAL  shift, and go to state 74
    TRUE_TOKEN      shift, and go to state 75
    FALSE_TOKEN     shift, and go to state 76
    LEFT_PAREN      shift, and go to state 82
    SUB_OP          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    NOT_OP          shift, and go to state 86

    variable    go to state 35
    var_ref     go to state 87
    expression  go to state 144
    value       go to state 89
    func_call   go to state 90


State 122

   25 variable: . IDENT
   26 var_ref: . variable
   29 expression: . expression ADD_OP expression
   30           | . expression SUB_OP expression
   31           | . expression MUL_OP expression
   32           | . expression DIV_OP expression
   33           | . expression MOD_OP expression
   34           | . expression AND_OP expression
   35           | . expression OR_OP expression
   36           | . NOT_OP expression
   37           | . expression EQ_OP expression
   37           | expression EQ_OP . expression
   38           | . expression REL_OP expression
   39           | . LEFT_PAREN expression RIGHT_PAREN
   40           | . INC_OP IDENT
   41           | . DEC_OP IDENT
   42           | . IDENT INC_OP
   43           | . IDENT DEC_OP
   44           | . func_call
   45           | . var_ref
   46           | . value
   47           | . SUB_OP value
   48 value: . CONST_INT
   49      | . CONST_FLOAT
   50      | . CONST_CHAR
   51      | . STRING_LITERAL
   52      | . TRUE_TOKEN
   53      | . FALSE_TOKEN
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 81
    CONST_INT       shift, and go to state 71
    CONST_FLOAT     shift, and go to state 72
    CONST_CHAR      shift, and go to state 73
    STRING_LITERAL  shift, and go to state 74
    TRUE_TOKEN      shift, and go to state 75
    FALSE_TOKEN     shift, and go to state 76
    LEFT_PAREN      shift, and go to state 82
    SUB_OP          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    NOT_OP          shift, and go to state 86

    variable    go to state 35
    var_ref     go to state 87
    expression  go to state 145
    value       go to state 89
    func_call   go to state 90


State 123

   25 variable: . IDENT
   26 var_ref: . variable
   29 expression: . expression ADD_OP expression
   30           | . expression SUB_OP expression
   31           | . expression MUL_OP expression
   32           | . expression DIV_OP expression
   33           | . expression MOD_OP expression
   34           | . expression AND_OP expression
   35           | . expression OR_OP expression
   36           | . NOT_OP expression
   37           | . expression EQ_OP expression
   38           | . expression REL_OP expression
   38           | expression REL_OP . expression
   39           | . LEFT_PAREN expression RIGHT_PAREN
   40           | . INC_OP IDENT
   41           | . DEC_OP IDENT
   42           | . IDENT INC_OP
   43           | . IDENT DEC_OP
   44           | . func_call
   45           | . var_ref
   46           | . value
   47           | . SUB_OP value
   48 value: . CONST_INT
   49      | . CONST_FLOAT
   50      | . CONST_CHAR
   51      | . STRING_LITERAL
   52      | . TRUE_TOKEN
   53      | . FALSE_TOKEN
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 81
    CONST_INT       shift, and go to state 71
    CONST_FLOAT     shift, and go to state 72
    CONST_CHAR      shift, and go to state 73
    STRING_LITERAL  shift, and go to state 74
    TRUE_TOKEN      shift, and go to state 75
    FALSE_TOKEN     shift, and go to state 76
    LEFT_PAREN      shift, and go to state 82
    SUB_OP          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    NOT_OP          shift, and go to state 86

    variable    go to state 35
    var_ref     go to state 87
    expression  go to state 146
    value       go to state 89
    func_call   go to state 90


State 124

  113 func_call: IDENT LEFT_PAREN arguments RIGHT_PAREN .

    $default  reduce using rule 113 (func_call)


State 125

   25 variable: . IDENT
   26 var_ref: . variable
   29 expression: . expression ADD_OP expression
   30           | . expression SUB_OP expression
   31           | . expression MUL_OP expression
   32           | . expression DIV_OP expression
   33           | . expression MOD_OP expression
   34           | . expression AND_OP expression
   35           | . expression OR_OP expression
   36           | . NOT_OP expression
   37           | . expression EQ_OP expression
   38           | . expression REL_OP expression
   39           | . LEFT_PAREN expression RIGHT_PAREN
   40           | . INC_OP IDENT
   41           | . DEC_OP IDENT
   42           | . IDENT INC_OP
   43           | . IDENT DEC_OP
   44           | . func_call
   45           | . var_ref
   46           | . value
   47           | . SUB_OP value
   48 value: . CONST_INT
   49      | . CONST_FLOAT
   50      | . CONST_CHAR
   51      | . STRING_LITERAL
   52      | . TRUE_TOKEN
   53      | . FALSE_TOKEN
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  116 argument: argument COMMA . expression

    IDENT           shift, and go to state 81
    CONST_INT       shift, and go to state 71
    CONST_FLOAT     shift, and go to state 72
    CONST_CHAR      shift, and go to state 73
    STRING_LITERAL  shift, and go to state 74
    TRUE_TOKEN      shift, and go to state 75
    FALSE_TOKEN     shift, and go to state 76
    LEFT_PAREN      shift, and go to state 82
    SUB_OP          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    NOT_OP          shift, and go to state 86

    variable    go to state 35
    var_ref     go to state 87
    expression  go to state 147
    value       go to state 89
    func_call   go to state 90


State 126

   54 tail: . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   59 if_statement: IF LEFT_PAREN expression RIGHT_PAREN . tail else_if else_part
   60             | IF LEFT_PAREN expression RIGHT_PAREN . tail else_part

    LEFT_CURLY_BRACKET  shift, and go to state 57

    tail  go to state 148


State 127

   54 tail: . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   61 while_statement: WHILE LEFT_PAREN expression RIGHT_PAREN . tail

    LEFT_CURLY_BRACKET  shift, and go to state 57

    tail  go to state 149


State 128

   25 variable: . IDENT
   26 var_ref: . variable
   29 expression: . expression ADD_OP expression
   30           | . expression SUB_OP expression
   31           | . expression MUL_OP expression
   32           | . expression DIV_OP expression
   33           | . expression MOD_OP expression
   34           | . expression AND_OP expression
   35           | . expression OR_OP expression
   36           | . NOT_OP expression
   37           | . expression EQ_OP expression
   38           | . expression REL_OP expression
   39           | . LEFT_PAREN expression RIGHT_PAREN
   40           | . INC_OP IDENT
   41           | . DEC_OP IDENT
   42           | . IDENT INC_OP
   43           | . IDENT DEC_OP
   44           | . func_call
   45           | . var_ref
   46           | . value
   47           | . SUB_OP value
   48 value: . CONST_INT
   49      | . CONST_FLOAT
   50      | . CONST_CHAR
   51      | . STRING_LITERAL
   52      | . TRUE_TOKEN
   53      | . FALSE_TOKEN
   63 for_statement: FOR LEFT_PAREN assignment SEMICOLON . expression SEMICOLON IDENT INC_OP RIGHT_PAREN tail
   64              | FOR LEFT_PAREN assignment SEMICOLON . expression SEMICOLON IDENT DEC_OP RIGHT_PAREN tail
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 81
    CONST_INT       shift, and go to state 71
    CONST_FLOAT     shift, and go to state 72
    CONST_CHAR      shift, and go to state 73
    STRING_LITERAL  shift, and go to state 74
    TRUE_TOKEN      shift, and go to state 75
    FALSE_TOKEN     shift, and go to state 76
    LEFT_PAREN      shift, and go to state 82
    SUB_OP          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    NOT_OP          shift, and go to state 86

    variable    go to state 35
    var_ref     go to state 87
    expression  go to state 150
    value       go to state 89
    func_call   go to state 90


State 129

   54 tail: LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET .

    $default  reduce using rule 54 (tail)


State 130

   25 variable: . IDENT
   26 var_ref: . variable
   29 expression: . expression ADD_OP expression
   30           | . expression SUB_OP expression
   31           | . expression MUL_OP expression
   32           | . expression DIV_OP expression
   33           | . expression MOD_OP expression
   34           | . expression AND_OP expression
   35           | . expression OR_OP expression
   36           | . NOT_OP expression
   37           | . expression EQ_OP expression
   38           | . expression REL_OP expression
   39           | . LEFT_PAREN expression RIGHT_PAREN
   40           | . INC_OP IDENT
   41           | . DEC_OP IDENT
   42           | . IDENT INC_OP
   43           | . IDENT DEC_OP
   44           | . func_call
   45           | . var_ref
   46           | . value
   47           | . SUB_OP value
   48 value: . CONST_INT
   49      | . CONST_FLOAT
   50      | . CONST_CHAR
   51      | . STRING_LITERAL
   52      | . TRUE_TOKEN
   53      | . FALSE_TOKEN
   65 do_statement: DO tail UNTIL LEFT_PAREN . expression RIGHT_PAREN SEMICOLON
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 81
    CONST_INT       shift, and go to state 71
    CONST_FLOAT     shift, and go to state 72
    CONST_CHAR      shift, and go to state 73
    STRING_LITERAL  shift, and go to state 74
    TRUE_TOKEN      shift, and go to state 75
    FALSE_TOKEN     shift, and go to state 76
    LEFT_PAREN      shift, and go to state 82
    SUB_OP          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    NOT_OP          shift, and go to state 86

    variable    go to state 35
    var_ref     go to state 87
    expression  go to state 151
    value       go to state 89
    func_call   go to state 90


State 131

   66 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN . LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 152


State 132

   24 var_init: IDENT . ASSIGN_OP value
  111 one_val: IDENT .  [RIGHT_CURLY_BRACKET, COMMA]

    ASSIGN_OP  shift, and go to state 48

    $default  reduce using rule 111 (one_val)


State 133

  112 one_val: var_init .

    $default  reduce using rule 112 (one_val)


State 134

  108 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET enum_list . RIGHT_CURLY_BRACKET SEMICOLON
  110 enum_list: enum_list . COMMA one_val

    RIGHT_CURLY_BRACKET  shift, and go to state 153
    COMMA                shift, and go to state 154


State 135

  109 enum_list: one_val .

    $default  reduce using rule 109 (enum_list)


State 136

    3 program: declarations $@1 statements $@2 RETURN SEMICOLON . functions_optional
    4 functions_optional: . functions
    5                   | . %empty  [$end]
   88 functions: . functions function
   89          | . function
   90 $@7: . %empty  [FUNC]
   91 function: . $@7 function_head function_tail

    FUNC      reduce using rule 90 ($@7)
    $default  reduce using rule 5 (functions_optional)

    functions_optional  go to state 155
    functions           go to state 156
    function            go to state 157
    $@7                 go to state 158


State 137

   39 expression: LEFT_PAREN expression RIGHT_PAREN .

    $default  reduce using rule 39 (expression)


State 138

   29 expression: expression . ADD_OP expression
   29           | expression ADD_OP expression .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, ADD_OP, SUB_OP, OR_OP, AND_OP, EQ_OP, REL_OP]
   30           | expression . SUB_OP expression
   31           | expression . MUL_OP expression
   32           | expression . DIV_OP expression
   33           | expression . MOD_OP expression
   34           | expression . AND_OP expression
   35           | expression . OR_OP expression
   37           | expression . EQ_OP expression
   38           | expression . REL_OP expression

    MUL_OP  shift, and go to state 117
    DIV_OP  shift, and go to state 118
    MOD_OP  shift, and go to state 119

    $default  reduce using rule 29 (expression)

    Conflict between rule 29 and token ADD_OP resolved as reduce (%left ADD_OP).
    Conflict between rule 29 and token SUB_OP resolved as reduce (%left SUB_OP).
    Conflict between rule 29 and token MUL_OP resolved as shift (ADD_OP < MUL_OP).
    Conflict between rule 29 and token DIV_OP resolved as shift (ADD_OP < DIV_OP).
    Conflict between rule 29 and token MOD_OP resolved as shift (ADD_OP < MOD_OP).
    Conflict between rule 29 and token OR_OP resolved as reduce (OR_OP < ADD_OP).
    Conflict between rule 29 and token AND_OP resolved as reduce (AND_OP < ADD_OP).
    Conflict between rule 29 and token EQ_OP resolved as reduce (EQ_OP < ADD_OP).
    Conflict between rule 29 and token REL_OP resolved as reduce (REL_OP < ADD_OP).


State 139

   29 expression: expression . ADD_OP expression
   30           | expression . SUB_OP expression
   30           | expression SUB_OP expression .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, ADD_OP, SUB_OP, OR_OP, AND_OP, EQ_OP, REL_OP]
   31           | expression . MUL_OP expression
   32           | expression . DIV_OP expression
   33           | expression . MOD_OP expression
   34           | expression . AND_OP expression
   35           | expression . OR_OP expression
   37           | expression . EQ_OP expression
   38           | expression . REL_OP expression

    MUL_OP  shift, and go to state 117
    DIV_OP  shift, and go to state 118
    MOD_OP  shift, and go to state 119

    $default  reduce using rule 30 (expression)

    Conflict between rule 30 and token ADD_OP resolved as reduce (%left ADD_OP).
    Conflict between rule 30 and token SUB_OP resolved as reduce (%left SUB_OP).
    Conflict between rule 30 and token MUL_OP resolved as shift (SUB_OP < MUL_OP).
    Conflict between rule 30 and token DIV_OP resolved as shift (SUB_OP < DIV_OP).
    Conflict between rule 30 and token MOD_OP resolved as shift (SUB_OP < MOD_OP).
    Conflict between rule 30 and token OR_OP resolved as reduce (OR_OP < SUB_OP).
    Conflict between rule 30 and token AND_OP resolved as reduce (AND_OP < SUB_OP).
    Conflict between rule 30 and token EQ_OP resolved as reduce (EQ_OP < SUB_OP).
    Conflict between rule 30 and token REL_OP resolved as reduce (REL_OP < SUB_OP).


State 140

   29 expression: expression . ADD_OP expression
   30           | expression . SUB_OP expression
   31           | expression . MUL_OP expression
   31           | expression MUL_OP expression .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, ADD_OP, SUB_OP, MUL_OP, DIV_OP, MOD_OP, OR_OP, AND_OP, EQ_OP, REL_OP]
   32           | expression . DIV_OP expression
   33           | expression . MOD_OP expression
   34           | expression . AND_OP expression
   35           | expression . OR_OP expression
   37           | expression . EQ_OP expression
   38           | expression . REL_OP expression

    $default  reduce using rule 31 (expression)

    Conflict between rule 31 and token ADD_OP resolved as reduce (ADD_OP < MUL_OP).
    Conflict between rule 31 and token SUB_OP resolved as reduce (SUB_OP < MUL_OP).
    Conflict between rule 31 and token MUL_OP resolved as reduce (%left MUL_OP).
    Conflict between rule 31 and token DIV_OP resolved as reduce (%left DIV_OP).
    Conflict between rule 31 and token MOD_OP resolved as reduce (%left MOD_OP).
    Conflict between rule 31 and token OR_OP resolved as reduce (OR_OP < MUL_OP).
    Conflict between rule 31 and token AND_OP resolved as reduce (AND_OP < MUL_OP).
    Conflict between rule 31 and token EQ_OP resolved as reduce (EQ_OP < MUL_OP).
    Conflict between rule 31 and token REL_OP resolved as reduce (REL_OP < MUL_OP).


State 141

   29 expression: expression . ADD_OP expression
   30           | expression . SUB_OP expression
   31           | expression . MUL_OP expression
   32           | expression . DIV_OP expression
   32           | expression DIV_OP expression .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, ADD_OP, SUB_OP, MUL_OP, DIV_OP, MOD_OP, OR_OP, AND_OP, EQ_OP, REL_OP]
   33           | expression . MOD_OP expression
   34           | expression . AND_OP expression
   35           | expression . OR_OP expression
   37           | expression . EQ_OP expression
   38           | expression . REL_OP expression

    $default  reduce using rule 32 (expression)

    Conflict between rule 32 and token ADD_OP resolved as reduce (ADD_OP < DIV_OP).
    Conflict between rule 32 and token SUB_OP resolved as reduce (SUB_OP < DIV_OP).
    Conflict between rule 32 and token MUL_OP resolved as reduce (%left MUL_OP).
    Conflict between rule 32 and token DIV_OP resolved as reduce (%left DIV_OP).
    Conflict between rule 32 and token MOD_OP resolved as reduce (%left MOD_OP).
    Conflict between rule 32 and token OR_OP resolved as reduce (OR_OP < DIV_OP).
    Conflict between rule 32 and token AND_OP resolved as reduce (AND_OP < DIV_OP).
    Conflict between rule 32 and token EQ_OP resolved as reduce (EQ_OP < DIV_OP).
    Conflict between rule 32 and token REL_OP resolved as reduce (REL_OP < DIV_OP).


State 142

   29 expression: expression . ADD_OP expression
   30           | expression . SUB_OP expression
   31           | expression . MUL_OP expression
   32           | expression . DIV_OP expression
   33           | expression . MOD_OP expression
   33           | expression MOD_OP expression .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, ADD_OP, SUB_OP, MUL_OP, DIV_OP, MOD_OP, OR_OP, AND_OP, EQ_OP, REL_OP]
   34           | expression . AND_OP expression
   35           | expression . OR_OP expression
   37           | expression . EQ_OP expression
   38           | expression . REL_OP expression

    $default  reduce using rule 33 (expression)

    Conflict between rule 33 and token ADD_OP resolved as reduce (ADD_OP < MOD_OP).
    Conflict between rule 33 and token SUB_OP resolved as reduce (SUB_OP < MOD_OP).
    Conflict between rule 33 and token MUL_OP resolved as reduce (%left MUL_OP).
    Conflict between rule 33 and token DIV_OP resolved as reduce (%left DIV_OP).
    Conflict between rule 33 and token MOD_OP resolved as reduce (%left MOD_OP).
    Conflict between rule 33 and token OR_OP resolved as reduce (OR_OP < MOD_OP).
    Conflict between rule 33 and token AND_OP resolved as reduce (AND_OP < MOD_OP).
    Conflict between rule 33 and token EQ_OP resolved as reduce (EQ_OP < MOD_OP).
    Conflict between rule 33 and token REL_OP resolved as reduce (REL_OP < MOD_OP).


State 143

   29 expression: expression . ADD_OP expression
   30           | expression . SUB_OP expression
   31           | expression . MUL_OP expression
   32           | expression . DIV_OP expression
   33           | expression . MOD_OP expression
   34           | expression . AND_OP expression
   35           | expression . OR_OP expression
   35           | expression OR_OP expression .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP]
   37           | expression . EQ_OP expression
   38           | expression . REL_OP expression

    ADD_OP  shift, and go to state 115
    SUB_OP  shift, and go to state 116
    MUL_OP  shift, and go to state 117
    DIV_OP  shift, and go to state 118
    MOD_OP  shift, and go to state 119
    AND_OP  shift, and go to state 121
    EQ_OP   shift, and go to state 122
    REL_OP  shift, and go to state 123

    $default  reduce using rule 35 (expression)

    Conflict between rule 35 and token ADD_OP resolved as shift (OR_OP < ADD_OP).
    Conflict between rule 35 and token SUB_OP resolved as shift (OR_OP < SUB_OP).
    Conflict between rule 35 and token MUL_OP resolved as shift (OR_OP < MUL_OP).
    Conflict between rule 35 and token DIV_OP resolved as shift (OR_OP < DIV_OP).
    Conflict between rule 35 and token MOD_OP resolved as shift (OR_OP < MOD_OP).
    Conflict between rule 35 and token OR_OP resolved as reduce (%left OR_OP).
    Conflict between rule 35 and token AND_OP resolved as shift (OR_OP < AND_OP).
    Conflict between rule 35 and token EQ_OP resolved as shift (OR_OP < EQ_OP).
    Conflict between rule 35 and token REL_OP resolved as shift (OR_OP < REL_OP).


State 144

   29 expression: expression . ADD_OP expression
   30           | expression . SUB_OP expression
   31           | expression . MUL_OP expression
   32           | expression . DIV_OP expression
   33           | expression . MOD_OP expression
   34           | expression . AND_OP expression
   34           | expression AND_OP expression .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP]
   35           | expression . OR_OP expression
   37           | expression . EQ_OP expression
   38           | expression . REL_OP expression

    ADD_OP  shift, and go to state 115
    SUB_OP  shift, and go to state 116
    MUL_OP  shift, and go to state 117
    DIV_OP  shift, and go to state 118
    MOD_OP  shift, and go to state 119
    EQ_OP   shift, and go to state 122
    REL_OP  shift, and go to state 123

    $default  reduce using rule 34 (expression)

    Conflict between rule 34 and token ADD_OP resolved as shift (AND_OP < ADD_OP).
    Conflict between rule 34 and token SUB_OP resolved as shift (AND_OP < SUB_OP).
    Conflict between rule 34 and token MUL_OP resolved as shift (AND_OP < MUL_OP).
    Conflict between rule 34 and token DIV_OP resolved as shift (AND_OP < DIV_OP).
    Conflict between rule 34 and token MOD_OP resolved as shift (AND_OP < MOD_OP).
    Conflict between rule 34 and token OR_OP resolved as reduce (OR_OP < AND_OP).
    Conflict between rule 34 and token AND_OP resolved as reduce (%left AND_OP).
    Conflict between rule 34 and token EQ_OP resolved as shift (AND_OP < EQ_OP).
    Conflict between rule 34 and token REL_OP resolved as shift (AND_OP < REL_OP).


State 145

   29 expression: expression . ADD_OP expression
   30           | expression . SUB_OP expression
   31           | expression . MUL_OP expression
   32           | expression . DIV_OP expression
   33           | expression . MOD_OP expression
   34           | expression . AND_OP expression
   35           | expression . OR_OP expression
   37           | expression . EQ_OP expression
   37           | expression EQ_OP expression .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, EQ_OP]
   38           | expression . REL_OP expression

    ADD_OP  shift, and go to state 115
    SUB_OP  shift, and go to state 116
    MUL_OP  shift, and go to state 117
    DIV_OP  shift, and go to state 118
    MOD_OP  shift, and go to state 119
    REL_OP  shift, and go to state 123

    $default  reduce using rule 37 (expression)

    Conflict between rule 37 and token ADD_OP resolved as shift (EQ_OP < ADD_OP).
    Conflict between rule 37 and token SUB_OP resolved as shift (EQ_OP < SUB_OP).
    Conflict between rule 37 and token MUL_OP resolved as shift (EQ_OP < MUL_OP).
    Conflict between rule 37 and token DIV_OP resolved as shift (EQ_OP < DIV_OP).
    Conflict between rule 37 and token MOD_OP resolved as shift (EQ_OP < MOD_OP).
    Conflict between rule 37 and token OR_OP resolved as reduce (OR_OP < EQ_OP).
    Conflict between rule 37 and token AND_OP resolved as reduce (AND_OP < EQ_OP).
    Conflict between rule 37 and token EQ_OP resolved as reduce (%left EQ_OP).
    Conflict between rule 37 and token REL_OP resolved as shift (EQ_OP < REL_OP).


State 146

   29 expression: expression . ADD_OP expression
   30           | expression . SUB_OP expression
   31           | expression . MUL_OP expression
   32           | expression . DIV_OP expression
   33           | expression . MOD_OP expression
   34           | expression . AND_OP expression
   35           | expression . OR_OP expression
   37           | expression . EQ_OP expression
   38           | expression . REL_OP expression
   38           | expression REL_OP expression .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, EQ_OP, REL_OP]

    ADD_OP  shift, and go to state 115
    SUB_OP  shift, and go to state 116
    MUL_OP  shift, and go to state 117
    DIV_OP  shift, and go to state 118
    MOD_OP  shift, and go to state 119

    $default  reduce using rule 38 (expression)

    Conflict between rule 38 and token ADD_OP resolved as shift (REL_OP < ADD_OP).
    Conflict between rule 38 and token SUB_OP resolved as shift (REL_OP < SUB_OP).
    Conflict between rule 38 and token MUL_OP resolved as shift (REL_OP < MUL_OP).
    Conflict between rule 38 and token DIV_OP resolved as shift (REL_OP < DIV_OP).
    Conflict between rule 38 and token MOD_OP resolved as shift (REL_OP < MOD_OP).
    Conflict between rule 38 and token OR_OP resolved as reduce (OR_OP < REL_OP).
    Conflict between rule 38 and token AND_OP resolved as reduce (AND_OP < REL_OP).
    Conflict between rule 38 and token EQ_OP resolved as reduce (EQ_OP < REL_OP).
    Conflict between rule 38 and token REL_OP resolved as reduce (%left REL_OP).


State 147

   29 expression: expression . ADD_OP expression
   30           | expression . SUB_OP expression
   31           | expression . MUL_OP expression
   32           | expression . DIV_OP expression
   33           | expression . MOD_OP expression
   34           | expression . AND_OP expression
   35           | expression . OR_OP expression
   37           | expression . EQ_OP expression
   38           | expression . REL_OP expression
  116 argument: argument COMMA expression .  [RIGHT_PAREN, COMMA]

    ADD_OP  shift, and go to state 115
    SUB_OP  shift, and go to state 116
    MUL_OP  shift, and go to state 117
    DIV_OP  shift, and go to state 118
    MOD_OP  shift, and go to state 119
    OR_OP   shift, and go to state 120
    AND_OP  shift, and go to state 121
    EQ_OP   shift, and go to state 122
    REL_OP  shift, and go to state 123

    $default  reduce using rule 116 (argument)


State 148

   55 else_if: . ELIF LEFT_PAREN expression RIGHT_PAREN tail
   56        | . else_if ELIF LEFT_PAREN expression RIGHT_PAREN tail
   57 else_part: . ELSE tail
   58          | . %empty  [IDENT, IF, WHILE, FOR, DO, SWITCH, CASE, DEFAULT, RETURN, BREAK, CONTINUE, ENUM, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP]
   59 if_statement: IF LEFT_PAREN expression RIGHT_PAREN tail . else_if else_part
   60             | IF LEFT_PAREN expression RIGHT_PAREN tail . else_part

    ELSE  shift, and go to state 159
    ELIF  shift, and go to state 160

    $default  reduce using rule 58 (else_part)

    else_if    go to state 161
    else_part  go to state 162


State 149

   61 while_statement: WHILE LEFT_PAREN expression RIGHT_PAREN tail .

    $default  reduce using rule 61 (while_statement)


State 150

   29 expression: expression . ADD_OP expression
   30           | expression . SUB_OP expression
   31           | expression . MUL_OP expression
   32           | expression . DIV_OP expression
   33           | expression . MOD_OP expression
   34           | expression . AND_OP expression
   35           | expression . OR_OP expression
   37           | expression . EQ_OP expression
   38           | expression . REL_OP expression
   63 for_statement: FOR LEFT_PAREN assignment SEMICOLON expression . SEMICOLON IDENT INC_OP RIGHT_PAREN tail
   64              | FOR LEFT_PAREN assignment SEMICOLON expression . SEMICOLON IDENT DEC_OP RIGHT_PAREN tail

    SEMICOLON  shift, and go to state 163
    ADD_OP     shift, and go to state 115
    SUB_OP     shift, and go to state 116
    MUL_OP     shift, and go to state 117
    DIV_OP     shift, and go to state 118
    MOD_OP     shift, and go to state 119
    OR_OP      shift, and go to state 120
    AND_OP     shift, and go to state 121
    EQ_OP      shift, and go to state 122
    REL_OP     shift, and go to state 123


State 151

   29 expression: expression . ADD_OP expression
   30           | expression . SUB_OP expression
   31           | expression . MUL_OP expression
   32           | expression . DIV_OP expression
   33           | expression . MOD_OP expression
   34           | expression . AND_OP expression
   35           | expression . OR_OP expression
   37           | expression . EQ_OP expression
   38           | expression . REL_OP expression
   65 do_statement: DO tail UNTIL LEFT_PAREN expression . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN  shift, and go to state 164
    ADD_OP       shift, and go to state 115
    SUB_OP       shift, and go to state 116
    MUL_OP       shift, and go to state 117
    DIV_OP       shift, and go to state 118
    MOD_OP       shift, and go to state 119
    OR_OP        shift, and go to state 120
    AND_OP       shift, and go to state 121
    EQ_OP        shift, and go to state 122
    REL_OP       shift, and go to state 123


State 152

   66 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET . cases RIGHT_CURLY_BRACKET
   67 cases: . cases case
   68      | . case
   69      | . cases default
   71 case: . CASE expression COLON statements

    CASE  shift, and go to state 165

    cases  go to state 166
    case   go to state 167


State 153

  108 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET . SEMICOLON

    SEMICOLON  shift, and go to state 168


State 154

   24 var_init: . IDENT ASSIGN_OP value
  110 enum_list: enum_list COMMA . one_val
  111 one_val: . IDENT
  112        | . var_init

    IDENT  shift, and go to state 132

    var_init  go to state 133
    one_val   go to state 169


State 155

    3 program: declarations $@1 statements $@2 RETURN SEMICOLON functions_optional .

    $default  reduce using rule 3 (program)


State 156

    4 functions_optional: functions .  [$end]
   88 functions: functions . function
   90 $@7: . %empty  [FUNC]
   91 function: . $@7 function_head function_tail

    FUNC      reduce using rule 90 ($@7)
    $default  reduce using rule 4 (functions_optional)

    function  go to state 170
    $@7       go to state 158


State 157

   89 functions: function .

    $default  reduce using rule 89 (functions)


State 158

   91 function: $@7 . function_head function_tail
   93 function_head: . FUNC $@8 IDENT LEFT_PAREN param_empty RIGHT_PAREN return_type

    FUNC  shift, and go to state 171

    function_head  go to state 172


State 159

   54 tail: . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   57 else_part: ELSE . tail

    LEFT_CURLY_BRACKET  shift, and go to state 57

    tail  go to state 173


State 160

   55 else_if: ELIF . LEFT_PAREN expression RIGHT_PAREN tail

    LEFT_PAREN  shift, and go to state 174


State 161

   56 else_if: else_if . ELIF LEFT_PAREN expression RIGHT_PAREN tail
   57 else_part: . ELSE tail
   58          | . %empty  [IDENT, IF, WHILE, FOR, DO, SWITCH, CASE, DEFAULT, RETURN, BREAK, CONTINUE, ENUM, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP]
   59 if_statement: IF LEFT_PAREN expression RIGHT_PAREN tail else_if . else_part

    ELSE  shift, and go to state 159
    ELIF  shift, and go to state 175

    $default  reduce using rule 58 (else_part)

    else_part  go to state 176


State 162

   60 if_statement: IF LEFT_PAREN expression RIGHT_PAREN tail else_part .

    $default  reduce using rule 60 (if_statement)


State 163

   63 for_statement: FOR LEFT_PAREN assignment SEMICOLON expression SEMICOLON . IDENT INC_OP RIGHT_PAREN tail
   64              | FOR LEFT_PAREN assignment SEMICOLON expression SEMICOLON . IDENT DEC_OP RIGHT_PAREN tail

    IDENT  shift, and go to state 177


State 164

   65 do_statement: DO tail UNTIL LEFT_PAREN expression RIGHT_PAREN . SEMICOLON

    SEMICOLON  shift, and go to state 178


State 165

   25 variable: . IDENT
   26 var_ref: . variable
   29 expression: . expression ADD_OP expression
   30           | . expression SUB_OP expression
   31           | . expression MUL_OP expression
   32           | . expression DIV_OP expression
   33           | . expression MOD_OP expression
   34           | . expression AND_OP expression
   35           | . expression OR_OP expression
   36           | . NOT_OP expression
   37           | . expression EQ_OP expression
   38           | . expression REL_OP expression
   39           | . LEFT_PAREN expression RIGHT_PAREN
   40           | . INC_OP IDENT
   41           | . DEC_OP IDENT
   42           | . IDENT INC_OP
   43           | . IDENT DEC_OP
   44           | . func_call
   45           | . var_ref
   46           | . value
   47           | . SUB_OP value
   48 value: . CONST_INT
   49      | . CONST_FLOAT
   50      | . CONST_CHAR
   51      | . STRING_LITERAL
   52      | . TRUE_TOKEN
   53      | . FALSE_TOKEN
   71 case: CASE . expression COLON statements
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 81
    CONST_INT       shift, and go to state 71
    CONST_FLOAT     shift, and go to state 72
    CONST_CHAR      shift, and go to state 73
    STRING_LITERAL  shift, and go to state 74
    TRUE_TOKEN      shift, and go to state 75
    FALSE_TOKEN     shift, and go to state 76
    LEFT_PAREN      shift, and go to state 82
    SUB_OP          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    NOT_OP          shift, and go to state 86

    variable    go to state 35
    var_ref     go to state 87
    expression  go to state 179
    value       go to state 89
    func_call   go to state 90


State 166

   66 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases . RIGHT_CURLY_BRACKET
   67 cases: cases . case
   69      | cases . default
   70 default: . DEFAULT COLON statements
   71 case: . CASE expression COLON statements

    CASE                 shift, and go to state 165
    DEFAULT              shift, and go to state 180
    RIGHT_CURLY_BRACKET  shift, and go to state 181

    default  go to state 182
    case     go to state 183


State 167

   68 cases: case .

    $default  reduce using rule 68 (cases)


State 168

  108 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON .

    $default  reduce using rule 108 (enum_statement)


State 169

  110 enum_list: enum_list COMMA one_val .

    $default  reduce using rule 110 (enum_list)


State 170

   88 functions: functions function .

    $default  reduce using rule 88 (functions)


State 171

   92 $@8: . %empty
   93 function_head: FUNC . $@8 IDENT LEFT_PAREN param_empty RIGHT_PAREN return_type

    $default  reduce using rule 92 ($@8)

    $@8  go to state 184


State 172

   91 function: $@7 function_head . function_tail
   95 function_tail: . LEFT_CURLY_BRACKET declarations_optional statements_optional return_optional RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 185

    function_tail  go to state 186


State 173

   57 else_part: ELSE tail .

    $default  reduce using rule 57 (else_part)


State 174

   25 variable: . IDENT
   26 var_ref: . variable
   29 expression: . expression ADD_OP expression
   30           | . expression SUB_OP expression
   31           | . expression MUL_OP expression
   32           | . expression DIV_OP expression
   33           | . expression MOD_OP expression
   34           | . expression AND_OP expression
   35           | . expression OR_OP expression
   36           | . NOT_OP expression
   37           | . expression EQ_OP expression
   38           | . expression REL_OP expression
   39           | . LEFT_PAREN expression RIGHT_PAREN
   40           | . INC_OP IDENT
   41           | . DEC_OP IDENT
   42           | . IDENT INC_OP
   43           | . IDENT DEC_OP
   44           | . func_call
   45           | . var_ref
   46           | . value
   47           | . SUB_OP value
   48 value: . CONST_INT
   49      | . CONST_FLOAT
   50      | . CONST_CHAR
   51      | . STRING_LITERAL
   52      | . TRUE_TOKEN
   53      | . FALSE_TOKEN
   55 else_if: ELIF LEFT_PAREN . expression RIGHT_PAREN tail
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 81
    CONST_INT       shift, and go to state 71
    CONST_FLOAT     shift, and go to state 72
    CONST_CHAR      shift, and go to state 73
    STRING_LITERAL  shift, and go to state 74
    TRUE_TOKEN      shift, and go to state 75
    FALSE_TOKEN     shift, and go to state 76
    LEFT_PAREN      shift, and go to state 82
    SUB_OP          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    NOT_OP          shift, and go to state 86

    variable    go to state 35
    var_ref     go to state 87
    expression  go to state 187
    value       go to state 89
    func_call   go to state 90


State 175

   56 else_if: else_if ELIF . LEFT_PAREN expression RIGHT_PAREN tail

    LEFT_PAREN  shift, and go to state 188


State 176

   59 if_statement: IF LEFT_PAREN expression RIGHT_PAREN tail else_if else_part .

    $default  reduce using rule 59 (if_statement)


State 177

   63 for_statement: FOR LEFT_PAREN assignment SEMICOLON expression SEMICOLON IDENT . INC_OP RIGHT_PAREN tail
   64              | FOR LEFT_PAREN assignment SEMICOLON expression SEMICOLON IDENT . DEC_OP RIGHT_PAREN tail

    INC_OP  shift, and go to state 189
    DEC_OP  shift, and go to state 190


State 178

   65 do_statement: DO tail UNTIL LEFT_PAREN expression RIGHT_PAREN SEMICOLON .

    $default  reduce using rule 65 (do_statement)


State 179

   29 expression: expression . ADD_OP expression
   30           | expression . SUB_OP expression
   31           | expression . MUL_OP expression
   32           | expression . DIV_OP expression
   33           | expression . MOD_OP expression
   34           | expression . AND_OP expression
   35           | expression . OR_OP expression
   37           | expression . EQ_OP expression
   38           | expression . REL_OP expression
   71 case: CASE expression . COLON statements

    COLON   shift, and go to state 191
    ADD_OP  shift, and go to state 115
    SUB_OP  shift, and go to state 116
    MUL_OP  shift, and go to state 117
    DIV_OP  shift, and go to state 118
    MOD_OP  shift, and go to state 119
    OR_OP   shift, and go to state 120
    AND_OP  shift, and go to state 121
    EQ_OP   shift, and go to state 122
    REL_OP  shift, and go to state 123


State 180

   70 default: DEFAULT . COLON statements

    COLON  shift, and go to state 192


State 181

   66 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .

    $default  reduce using rule 66 (switch_statement)


State 182

   69 cases: cases default .

    $default  reduce using rule 69 (cases)


State 183

   67 cases: cases case .

    $default  reduce using rule 67 (cases)


State 184

   93 function_head: FUNC $@8 . IDENT LEFT_PAREN param_empty RIGHT_PAREN return_type

    IDENT  shift, and go to state 193


State 185

    6 type: . INTEGER
    7     | . FLOAT
    8     | . DOUBLE
    9     | . VOID
   10     | . BOOLEAN
   11     | . CHAR
   12     | . STR
   15 declaration: . type $@3 names $@4 SEMICOLON
   18            | . CONST type $@5 names $@6 SEMICOLON
   27 declarations: . declarations declaration
   28             | . declaration
   95 function_tail: LEFT_CURLY_BRACKET . declarations_optional statements_optional return_optional RIGHT_CURLY_BRACKET
   98 declarations_optional: . declarations
   99                      | . %empty  [IDENT, IF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, ENUM, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP]

    INTEGER  shift, and go to state 1
    FLOAT    shift, and go to state 2
    DOUBLE   shift, and go to state 3
    VOID     shift, and go to state 4
    BOOLEAN  shift, and go to state 5
    CHAR     shift, and go to state 6
    CONST    shift, and go to state 7
    STR      shift, and go to state 8

    $default  reduce using rule 99 (declarations_optional)

    type                   go to state 10
    declaration            go to state 11
    declarations           go to state 194
    declarations_optional  go to state 195


State 186

   91 function: $@7 function_head function_tail .

    $default  reduce using rule 91 (function)


State 187

   29 expression: expression . ADD_OP expression
   30           | expression . SUB_OP expression
   31           | expression . MUL_OP expression
   32           | expression . DIV_OP expression
   33           | expression . MOD_OP expression
   34           | expression . AND_OP expression
   35           | expression . OR_OP expression
   37           | expression . EQ_OP expression
   38           | expression . REL_OP expression
   55 else_if: ELIF LEFT_PAREN expression . RIGHT_PAREN tail

    RIGHT_PAREN  shift, and go to state 196
    ADD_OP       shift, and go to state 115
    SUB_OP       shift, and go to state 116
    MUL_OP       shift, and go to state 117
    DIV_OP       shift, and go to state 118
    MOD_OP       shift, and go to state 119
    OR_OP        shift, and go to state 120
    AND_OP       shift, and go to state 121
    EQ_OP        shift, and go to state 122
    REL_OP       shift, and go to state 123


State 188

   25 variable: . IDENT
   26 var_ref: . variable
   29 expression: . expression ADD_OP expression
   30           | . expression SUB_OP expression
   31           | . expression MUL_OP expression
   32           | . expression DIV_OP expression
   33           | . expression MOD_OP expression
   34           | . expression AND_OP expression
   35           | . expression OR_OP expression
   36           | . NOT_OP expression
   37           | . expression EQ_OP expression
   38           | . expression REL_OP expression
   39           | . LEFT_PAREN expression RIGHT_PAREN
   40           | . INC_OP IDENT
   41           | . DEC_OP IDENT
   42           | . IDENT INC_OP
   43           | . IDENT DEC_OP
   44           | . func_call
   45           | . var_ref
   46           | . value
   47           | . SUB_OP value
   48 value: . CONST_INT
   49      | . CONST_FLOAT
   50      | . CONST_CHAR
   51      | . STRING_LITERAL
   52      | . TRUE_TOKEN
   53      | . FALSE_TOKEN
   56 else_if: else_if ELIF LEFT_PAREN . expression RIGHT_PAREN tail
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 81
    CONST_INT       shift, and go to state 71
    CONST_FLOAT     shift, and go to state 72
    CONST_CHAR      shift, and go to state 73
    STRING_LITERAL  shift, and go to state 74
    TRUE_TOKEN      shift, and go to state 75
    FALSE_TOKEN     shift, and go to state 76
    LEFT_PAREN      shift, and go to state 82
    SUB_OP          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    NOT_OP          shift, and go to state 86

    variable    go to state 35
    var_ref     go to state 87
    expression  go to state 197
    value       go to state 89
    func_call   go to state 90


State 189

   63 for_statement: FOR LEFT_PAREN assignment SEMICOLON expression SEMICOLON IDENT INC_OP . RIGHT_PAREN tail

    RIGHT_PAREN  shift, and go to state 198


State 190

   64 for_statement: FOR LEFT_PAREN assignment SEMICOLON expression SEMICOLON IDENT DEC_OP . RIGHT_PAREN tail

    RIGHT_PAREN  shift, and go to state 199


State 191

   25 variable: . IDENT
   26 var_ref: . variable
   59 if_statement: . IF LEFT_PAREN expression RIGHT_PAREN tail else_if else_part
   60             | . IF LEFT_PAREN expression RIGHT_PAREN tail else_part
   61 while_statement: . WHILE LEFT_PAREN expression RIGHT_PAREN tail
   62 assignment: . var_ref ASSIGN_OP expression
   63 for_statement: . FOR LEFT_PAREN assignment SEMICOLON expression SEMICOLON IDENT INC_OP RIGHT_PAREN tail
   64              | . FOR LEFT_PAREN assignment SEMICOLON expression SEMICOLON IDENT DEC_OP RIGHT_PAREN tail
   65 do_statement: . DO tail UNTIL LEFT_PAREN expression RIGHT_PAREN SEMICOLON
   66 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   71 case: CASE expression COLON . statements
   72 statements: . statements statement
   73           | . statement
   74 statement: . if_statement
   75          | . while_statement
   76          | . for_statement
   77          | . do_statement
   78          | . switch_statement
   79          | . enum_statement
   80          | . func_call SEMICOLON
   81          | . CONTINUE SEMICOLON
   82          | . BREAK SEMICOLON
   83          | . assignment SEMICOLON
   84          | . INC_OP IDENT SEMICOLON
   85          | . DEC_OP IDENT SEMICOLON
   86          | . IDENT INC_OP SEMICOLON
   87          | . IDENT DEC_OP SEMICOLON
  108 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT     shift, and go to state 24
    IF        shift, and go to state 25
    WHILE     shift, and go to state 26
    FOR       shift, and go to state 27
    DO        shift, and go to state 28
    SWITCH    shift, and go to state 29
    BREAK     shift, and go to state 30
    CONTINUE  shift, and go to state 31
    ENUM      shift, and go to state 32
    INC_OP    shift, and go to state 33
    DEC_OP    shift, and go to state 34

    variable          go to state 35
    var_ref           go to state 36
    if_statement      go to state 37
    while_statement   go to state 38
    assignment        go to state 39
    for_statement     go to state 40
    do_statement      go to state 41
    switch_statement  go to state 42
    statements        go to state 200
    statement         go to state 44
    enum_statement    go to state 45
    func_call         go to state 46


State 192

   25 variable: . IDENT
   26 var_ref: . variable
   59 if_statement: . IF LEFT_PAREN expression RIGHT_PAREN tail else_if else_part
   60             | . IF LEFT_PAREN expression RIGHT_PAREN tail else_part
   61 while_statement: . WHILE LEFT_PAREN expression RIGHT_PAREN tail
   62 assignment: . var_ref ASSIGN_OP expression
   63 for_statement: . FOR LEFT_PAREN assignment SEMICOLON expression SEMICOLON IDENT INC_OP RIGHT_PAREN tail
   64              | . FOR LEFT_PAREN assignment SEMICOLON expression SEMICOLON IDENT DEC_OP RIGHT_PAREN tail
   65 do_statement: . DO tail UNTIL LEFT_PAREN expression RIGHT_PAREN SEMICOLON
   66 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   70 default: DEFAULT COLON . statements
   72 statements: . statements statement
   73           | . statement
   74 statement: . if_statement
   75          | . while_statement
   76          | . for_statement
   77          | . do_statement
   78          | . switch_statement
   79          | . enum_statement
   80          | . func_call SEMICOLON
   81          | . CONTINUE SEMICOLON
   82          | . BREAK SEMICOLON
   83          | . assignment SEMICOLON
   84          | . INC_OP IDENT SEMICOLON
   85          | . DEC_OP IDENT SEMICOLON
   86          | . IDENT INC_OP SEMICOLON
   87          | . IDENT DEC_OP SEMICOLON
  108 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT     shift, and go to state 24
    IF        shift, and go to state 25
    WHILE     shift, and go to state 26
    FOR       shift, and go to state 27
    DO        shift, and go to state 28
    SWITCH    shift, and go to state 29
    BREAK     shift, and go to state 30
    CONTINUE  shift, and go to state 31
    ENUM      shift, and go to state 32
    INC_OP    shift, and go to state 33
    DEC_OP    shift, and go to state 34

    variable          go to state 35
    var_ref           go to state 36
    if_statement      go to state 37
    while_statement   go to state 38
    assignment        go to state 39
    for_statement     go to state 40
    do_statement      go to state 41
    switch_statement  go to state 42
    statements        go to state 201
    statement         go to state 44
    enum_statement    go to state 45
    func_call         go to state 46


State 193

   93 function_head: FUNC $@8 IDENT . LEFT_PAREN param_empty RIGHT_PAREN return_type

    LEFT_PAREN  shift, and go to state 202


State 194

    6 type: . INTEGER
    7     | . FLOAT
    8     | . DOUBLE
    9     | . VOID
   10     | . BOOLEAN
   11     | . CHAR
   12     | . STR
   15 declaration: . type $@3 names $@4 SEMICOLON
   18            | . CONST type $@5 names $@6 SEMICOLON
   27 declarations: declarations . declaration
   98 declarations_optional: declarations .  [IDENT, IF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, ENUM, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP]

    INTEGER  shift, and go to state 1
    FLOAT    shift, and go to state 2
    DOUBLE   shift, and go to state 3
    VOID     shift, and go to state 4
    BOOLEAN  shift, and go to state 5
    CHAR     shift, and go to state 6
    CONST    shift, and go to state 7
    STR      shift, and go to state 8

    $default  reduce using rule 98 (declarations_optional)

    type         go to state 10
    declaration  go to state 17


State 195

   25 variable: . IDENT
   26 var_ref: . variable
   59 if_statement: . IF LEFT_PAREN expression RIGHT_PAREN tail else_if else_part
   60             | . IF LEFT_PAREN expression RIGHT_PAREN tail else_part
   61 while_statement: . WHILE LEFT_PAREN expression RIGHT_PAREN tail
   62 assignment: . var_ref ASSIGN_OP expression
   63 for_statement: . FOR LEFT_PAREN assignment SEMICOLON expression SEMICOLON IDENT INC_OP RIGHT_PAREN tail
   64              | . FOR LEFT_PAREN assignment SEMICOLON expression SEMICOLON IDENT DEC_OP RIGHT_PAREN tail
   65 do_statement: . DO tail UNTIL LEFT_PAREN expression RIGHT_PAREN SEMICOLON
   66 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   72 statements: . statements statement
   73           | . statement
   74 statement: . if_statement
   75          | . while_statement
   76          | . for_statement
   77          | . do_statement
   78          | . switch_statement
   79          | . enum_statement
   80          | . func_call SEMICOLON
   81          | . CONTINUE SEMICOLON
   82          | . BREAK SEMICOLON
   83          | . assignment SEMICOLON
   84          | . INC_OP IDENT SEMICOLON
   85          | . DEC_OP IDENT SEMICOLON
   86          | . IDENT INC_OP SEMICOLON
   87          | . IDENT DEC_OP SEMICOLON
   95 function_tail: LEFT_CURLY_BRACKET declarations_optional . statements_optional return_optional RIGHT_CURLY_BRACKET
   96 statements_optional: . statements
   97                    | . %empty  [RETURN, RIGHT_CURLY_BRACKET]
  108 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT     shift, and go to state 24
    IF        shift, and go to state 25
    WHILE     shift, and go to state 26
    FOR       shift, and go to state 27
    DO        shift, and go to state 28
    SWITCH    shift, and go to state 29
    BREAK     shift, and go to state 30
    CONTINUE  shift, and go to state 31
    ENUM      shift, and go to state 32
    INC_OP    shift, and go to state 33
    DEC_OP    shift, and go to state 34

    $default  reduce using rule 97 (statements_optional)

    variable             go to state 35
    var_ref              go to state 36
    if_statement         go to state 37
    while_statement      go to state 38
    assignment           go to state 39
    for_statement        go to state 40
    do_statement         go to state 41
    switch_statement     go to state 42
    statements           go to state 203
    statement            go to state 44
    statements_optional  go to state 204
    enum_statement       go to state 45
    func_call            go to state 46


State 196

   54 tail: . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   55 else_if: ELIF LEFT_PAREN expression RIGHT_PAREN . tail

    LEFT_CURLY_BRACKET  shift, and go to state 57

    tail  go to state 205


State 197

   29 expression: expression . ADD_OP expression
   30           | expression . SUB_OP expression
   31           | expression . MUL_OP expression
   32           | expression . DIV_OP expression
   33           | expression . MOD_OP expression
   34           | expression . AND_OP expression
   35           | expression . OR_OP expression
   37           | expression . EQ_OP expression
   38           | expression . REL_OP expression
   56 else_if: else_if ELIF LEFT_PAREN expression . RIGHT_PAREN tail

    RIGHT_PAREN  shift, and go to state 206
    ADD_OP       shift, and go to state 115
    SUB_OP       shift, and go to state 116
    MUL_OP       shift, and go to state 117
    DIV_OP       shift, and go to state 118
    MOD_OP       shift, and go to state 119
    OR_OP        shift, and go to state 120
    AND_OP       shift, and go to state 121
    EQ_OP        shift, and go to state 122
    REL_OP       shift, and go to state 123


State 198

   54 tail: . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   63 for_statement: FOR LEFT_PAREN assignment SEMICOLON expression SEMICOLON IDENT INC_OP RIGHT_PAREN . tail

    LEFT_CURLY_BRACKET  shift, and go to state 57

    tail  go to state 207


State 199

   54 tail: . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   64 for_statement: FOR LEFT_PAREN assignment SEMICOLON expression SEMICOLON IDENT DEC_OP RIGHT_PAREN . tail

    LEFT_CURLY_BRACKET  shift, and go to state 57

    tail  go to state 208


State 200

   25 variable: . IDENT
   26 var_ref: . variable
   59 if_statement: . IF LEFT_PAREN expression RIGHT_PAREN tail else_if else_part
   60             | . IF LEFT_PAREN expression RIGHT_PAREN tail else_part
   61 while_statement: . WHILE LEFT_PAREN expression RIGHT_PAREN tail
   62 assignment: . var_ref ASSIGN_OP expression
   63 for_statement: . FOR LEFT_PAREN assignment SEMICOLON expression SEMICOLON IDENT INC_OP RIGHT_PAREN tail
   64              | . FOR LEFT_PAREN assignment SEMICOLON expression SEMICOLON IDENT DEC_OP RIGHT_PAREN tail
   65 do_statement: . DO tail UNTIL LEFT_PAREN expression RIGHT_PAREN SEMICOLON
   66 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   71 case: CASE expression COLON statements .  [CASE, DEFAULT, RIGHT_CURLY_BRACKET]
   72 statements: statements . statement
   74 statement: . if_statement
   75          | . while_statement
   76          | . for_statement
   77          | . do_statement
   78          | . switch_statement
   79          | . enum_statement
   80          | . func_call SEMICOLON
   81          | . CONTINUE SEMICOLON
   82          | . BREAK SEMICOLON
   83          | . assignment SEMICOLON
   84          | . INC_OP IDENT SEMICOLON
   85          | . DEC_OP IDENT SEMICOLON
   86          | . IDENT INC_OP SEMICOLON
   87          | . IDENT DEC_OP SEMICOLON
  108 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT     shift, and go to state 24
    IF        shift, and go to state 25
    WHILE     shift, and go to state 26
    FOR       shift, and go to state 27
    DO        shift, and go to state 28
    SWITCH    shift, and go to state 29
    BREAK     shift, and go to state 30
    CONTINUE  shift, and go to state 31
    ENUM      shift, and go to state 32
    INC_OP    shift, and go to state 33
    DEC_OP    shift, and go to state 34

    $default  reduce using rule 71 (case)

    variable          go to state 35
    var_ref           go to state 36
    if_statement      go to state 37
    while_statement   go to state 38
    assignment        go to state 39
    for_statement     go to state 40
    do_statement      go to state 41
    switch_statement  go to state 42
    statement         go to state 68
    enum_statement    go to state 45
    func_call         go to state 46


State 201

   25 variable: . IDENT
   26 var_ref: . variable
   59 if_statement: . IF LEFT_PAREN expression RIGHT_PAREN tail else_if else_part
   60             | . IF LEFT_PAREN expression RIGHT_PAREN tail else_part
   61 while_statement: . WHILE LEFT_PAREN expression RIGHT_PAREN tail
   62 assignment: . var_ref ASSIGN_OP expression
   63 for_statement: . FOR LEFT_PAREN assignment SEMICOLON expression SEMICOLON IDENT INC_OP RIGHT_PAREN tail
   64              | . FOR LEFT_PAREN assignment SEMICOLON expression SEMICOLON IDENT DEC_OP RIGHT_PAREN tail
   65 do_statement: . DO tail UNTIL LEFT_PAREN expression RIGHT_PAREN SEMICOLON
   66 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   70 default: DEFAULT COLON statements .  [CASE, DEFAULT, RIGHT_CURLY_BRACKET]
   72 statements: statements . statement
   74 statement: . if_statement
   75          | . while_statement
   76          | . for_statement
   77          | . do_statement
   78          | . switch_statement
   79          | . enum_statement
   80          | . func_call SEMICOLON
   81          | . CONTINUE SEMICOLON
   82          | . BREAK SEMICOLON
   83          | . assignment SEMICOLON
   84          | . INC_OP IDENT SEMICOLON
   85          | . DEC_OP IDENT SEMICOLON
   86          | . IDENT INC_OP SEMICOLON
   87          | . IDENT DEC_OP SEMICOLON
  108 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT     shift, and go to state 24
    IF        shift, and go to state 25
    WHILE     shift, and go to state 26
    FOR       shift, and go to state 27
    DO        shift, and go to state 28
    SWITCH    shift, and go to state 29
    BREAK     shift, and go to state 30
    CONTINUE  shift, and go to state 31
    ENUM      shift, and go to state 32
    INC_OP    shift, and go to state 33
    DEC_OP    shift, and go to state 34

    $default  reduce using rule 70 (default)

    variable          go to state 35
    var_ref           go to state 36
    if_statement      go to state 37
    while_statement   go to state 38
    assignment        go to state 39
    for_statement     go to state 40
    do_statement      go to state 41
    switch_statement  go to state 42
    statement         go to state 68
    enum_statement    go to state 45
    func_call         go to state 46


State 202

   93 function_head: FUNC $@8 IDENT LEFT_PAREN . param_empty RIGHT_PAREN return_type
  102 param_empty: . parameters
  103            | . %empty  [RIGHT_PAREN]
  104 parameters: . parameters COMMA parameter
  105           | . parameter
  106 $@9: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, STR]
  107 parameter: . $@9 type variable

    RIGHT_PAREN  reduce using rule 103 (param_empty)
    $default     reduce using rule 106 ($@9)

    param_empty  go to state 209
    parameters   go to state 210
    parameter    go to state 211
    $@9          go to state 212


State 203

   25 variable: . IDENT
   26 var_ref: . variable
   59 if_statement: . IF LEFT_PAREN expression RIGHT_PAREN tail else_if else_part
   60             | . IF LEFT_PAREN expression RIGHT_PAREN tail else_part
   61 while_statement: . WHILE LEFT_PAREN expression RIGHT_PAREN tail
   62 assignment: . var_ref ASSIGN_OP expression
   63 for_statement: . FOR LEFT_PAREN assignment SEMICOLON expression SEMICOLON IDENT INC_OP RIGHT_PAREN tail
   64              | . FOR LEFT_PAREN assignment SEMICOLON expression SEMICOLON IDENT DEC_OP RIGHT_PAREN tail
   65 do_statement: . DO tail UNTIL LEFT_PAREN expression RIGHT_PAREN SEMICOLON
   66 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   72 statements: statements . statement
   74 statement: . if_statement
   75          | . while_statement
   76          | . for_statement
   77          | . do_statement
   78          | . switch_statement
   79          | . enum_statement
   80          | . func_call SEMICOLON
   81          | . CONTINUE SEMICOLON
   82          | . BREAK SEMICOLON
   83          | . assignment SEMICOLON
   84          | . INC_OP IDENT SEMICOLON
   85          | . DEC_OP IDENT SEMICOLON
   86          | . IDENT INC_OP SEMICOLON
   87          | . IDENT DEC_OP SEMICOLON
   96 statements_optional: statements .  [RETURN, RIGHT_CURLY_BRACKET]
  108 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET SEMICOLON
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT     shift, and go to state 24
    IF        shift, and go to state 25
    WHILE     shift, and go to state 26
    FOR       shift, and go to state 27
    DO        shift, and go to state 28
    SWITCH    shift, and go to state 29
    BREAK     shift, and go to state 30
    CONTINUE  shift, and go to state 31
    ENUM      shift, and go to state 32
    INC_OP    shift, and go to state 33
    DEC_OP    shift, and go to state 34

    $default  reduce using rule 96 (statements_optional)

    variable          go to state 35
    var_ref           go to state 36
    if_statement      go to state 37
    while_statement   go to state 38
    assignment        go to state 39
    for_statement     go to state 40
    do_statement      go to state 41
    switch_statement  go to state 42
    statement         go to state 68
    enum_statement    go to state 45
    func_call         go to state 46


State 204

   95 function_tail: LEFT_CURLY_BRACKET declarations_optional statements_optional . return_optional RIGHT_CURLY_BRACKET
  100 return_optional: . RETURN expression SEMICOLON
  101                | . %empty  [RIGHT_CURLY_BRACKET]

    RETURN  shift, and go to state 213

    $default  reduce using rule 101 (return_optional)

    return_optional  go to state 214


State 205

   55 else_if: ELIF LEFT_PAREN expression RIGHT_PAREN tail .

    $default  reduce using rule 55 (else_if)


State 206

   54 tail: . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   56 else_if: else_if ELIF LEFT_PAREN expression RIGHT_PAREN . tail

    LEFT_CURLY_BRACKET  shift, and go to state 57

    tail  go to state 215


State 207

   63 for_statement: FOR LEFT_PAREN assignment SEMICOLON expression SEMICOLON IDENT INC_OP RIGHT_PAREN tail .

    $default  reduce using rule 63 (for_statement)


State 208

   64 for_statement: FOR LEFT_PAREN assignment SEMICOLON expression SEMICOLON IDENT DEC_OP RIGHT_PAREN tail .

    $default  reduce using rule 64 (for_statement)


State 209

   93 function_head: FUNC $@8 IDENT LEFT_PAREN param_empty . RIGHT_PAREN return_type

    RIGHT_PAREN  shift, and go to state 216


State 210

  102 param_empty: parameters .  [RIGHT_PAREN]
  104 parameters: parameters . COMMA parameter

    COMMA  shift, and go to state 217

    $default  reduce using rule 102 (param_empty)


State 211

  105 parameters: parameter .

    $default  reduce using rule 105 (parameters)


State 212

    6 type: . INTEGER
    7     | . FLOAT
    8     | . DOUBLE
    9     | . VOID
   10     | . BOOLEAN
   11     | . CHAR
   12     | . STR
  107 parameter: $@9 . type variable

    INTEGER  shift, and go to state 1
    FLOAT    shift, and go to state 2
    DOUBLE   shift, and go to state 3
    VOID     shift, and go to state 4
    BOOLEAN  shift, and go to state 5
    CHAR     shift, and go to state 6
    STR      shift, and go to state 8

    type  go to state 218


State 213

   25 variable: . IDENT
   26 var_ref: . variable
   29 expression: . expression ADD_OP expression
   30           | . expression SUB_OP expression
   31           | . expression MUL_OP expression
   32           | . expression DIV_OP expression
   33           | . expression MOD_OP expression
   34           | . expression AND_OP expression
   35           | . expression OR_OP expression
   36           | . NOT_OP expression
   37           | . expression EQ_OP expression
   38           | . expression REL_OP expression
   39           | . LEFT_PAREN expression RIGHT_PAREN
   40           | . INC_OP IDENT
   41           | . DEC_OP IDENT
   42           | . IDENT INC_OP
   43           | . IDENT DEC_OP
   44           | . func_call
   45           | . var_ref
   46           | . value
   47           | . SUB_OP value
   48 value: . CONST_INT
   49      | . CONST_FLOAT
   50      | . CONST_CHAR
   51      | . STRING_LITERAL
   52      | . TRUE_TOKEN
   53      | . FALSE_TOKEN
  100 return_optional: RETURN . expression SEMICOLON
  113 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 81
    CONST_INT       shift, and go to state 71
    CONST_FLOAT     shift, and go to state 72
    CONST_CHAR      shift, and go to state 73
    STRING_LITERAL  shift, and go to state 74
    TRUE_TOKEN      shift, and go to state 75
    FALSE_TOKEN     shift, and go to state 76
    LEFT_PAREN      shift, and go to state 82
    SUB_OP          shift, and go to state 83
    INC_OP          shift, and go to state 84
    DEC_OP          shift, and go to state 85
    NOT_OP          shift, and go to state 86

    variable    go to state 35
    var_ref     go to state 87
    expression  go to state 219
    value       go to state 89
    func_call   go to state 90


State 214

   95 function_tail: LEFT_CURLY_BRACKET declarations_optional statements_optional return_optional . RIGHT_CURLY_BRACKET

    RIGHT_CURLY_BRACKET  shift, and go to state 220


State 215

   56 else_if: else_if ELIF LEFT_PAREN expression RIGHT_PAREN tail .

    $default  reduce using rule 56 (else_if)


State 216

    6 type: . INTEGER
    7     | . FLOAT
    8     | . DOUBLE
    9     | . VOID
   10     | . BOOLEAN
   11     | . CHAR
   12     | . STR
   93 function_head: FUNC $@8 IDENT LEFT_PAREN param_empty RIGHT_PAREN . return_type
   94 return_type: . type

    INTEGER  shift, and go to state 1
    FLOAT    shift, and go to state 2
    DOUBLE   shift, and go to state 3
    VOID     shift, and go to state 4
    BOOLEAN  shift, and go to state 5
    CHAR     shift, and go to state 6
    STR      shift, and go to state 8

    type         go to state 221
    return_type  go to state 222


State 217

  104 parameters: parameters COMMA . parameter
  106 $@9: . %empty
  107 parameter: . $@9 type variable

    $default  reduce using rule 106 ($@9)

    parameter  go to state 223
    $@9        go to state 212


State 218

   25 variable: . IDENT
  107 parameter: $@9 type . variable

    IDENT  shift, and go to state 97

    variable  go to state 224


State 219

   29 expression: expression . ADD_OP expression
   30           | expression . SUB_OP expression
   31           | expression . MUL_OP expression
   32           | expression . DIV_OP expression
   33           | expression . MOD_OP expression
   34           | expression . AND_OP expression
   35           | expression . OR_OP expression
   37           | expression . EQ_OP expression
   38           | expression . REL_OP expression
  100 return_optional: RETURN expression . SEMICOLON

    SEMICOLON  shift, and go to state 225
    ADD_OP     shift, and go to state 115
    SUB_OP     shift, and go to state 116
    MUL_OP     shift, and go to state 117
    DIV_OP     shift, and go to state 118
    MOD_OP     shift, and go to state 119
    OR_OP      shift, and go to state 120
    AND_OP     shift, and go to state 121
    EQ_OP      shift, and go to state 122
    REL_OP     shift, and go to state 123


State 220

   95 function_tail: LEFT_CURLY_BRACKET declarations_optional statements_optional return_optional RIGHT_CURLY_BRACKET .

    $default  reduce using rule 95 (function_tail)


State 221

   94 return_type: type .

    $default  reduce using rule 94 (return_type)


State 222

   93 function_head: FUNC $@8 IDENT LEFT_PAREN param_empty RIGHT_PAREN return_type .

    $default  reduce using rule 93 (function_head)


State 223

  104 parameters: parameters COMMA parameter .

    $default  reduce using rule 104 (parameters)


State 224

  107 parameter: $@9 type variable .

    $default  reduce using rule 107 (parameter)


State 225

  100 return_optional: RETURN expression SEMICOLON .

    $default  reduce using rule 100 (return_optional)
