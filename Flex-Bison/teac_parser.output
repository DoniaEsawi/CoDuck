Terminals unused in grammar

    UNTIL
    LEFT_SQ_BRACKET
    RIGHT_SQ_BRACKET
    QUESTION_MARK
    DOT
    BIT_NOT_OP


State 28 conflicts: 4 reduce/reduce
State 42 conflicts: 2 shift/reduce
State 81 conflicts: 17 shift/reduce, 6 reduce/reduce
State 86 conflicts: 2 shift/reduce
State 87 conflicts: 2 shift/reduce
State 88 conflicts: 2 shift/reduce
State 94 conflicts: 1 reduce/reduce
State 103 conflicts: 1 shift/reduce, 6 reduce/reduce
State 129 conflicts: 19 shift/reduce, 6 reduce/reduce
State 141 conflicts: 1 reduce/reduce
State 161 conflicts: 17 shift/reduce, 6 reduce/reduce
State 172 conflicts: 17 shift/reduce, 6 reduce/reduce
State 173 conflicts: 1 shift/reduce
State 174 conflicts: 17 shift/reduce, 6 reduce/reduce
State 185 conflicts: 2 shift/reduce
State 195 conflicts: 17 shift/reduce, 6 reduce/reduce
State 209 conflicts: 17 shift/reduce, 6 reduce/reduce
State 210 conflicts: 17 shift/reduce, 6 reduce/reduce
State 211 conflicts: 17 shift/reduce, 6 reduce/reduce
State 217 conflicts: 17 shift/reduce, 6 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: program function
    2        | function
    3        | IDENT
    4        | declaration

    5 type: INTEGER
    6     | FLOAT
    7     | DOUBLE
    8     | VOID
    9     | BOOLEAN
   10     | CHAR

   11 beforedecl: CONST
   12           | %empty

   13 declaration: beforedecl type IDENT SEMICOLON
   14            | beforedecl type IDENT ASSIGN_OP expression SEMICOLON

   15 declarations: declaration
   16             | declarations declaration

   17 tail: statements
   18     | LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET

   19 tail_inloop: statements_inloop
   20            | LEFT_CURLY_BRACKET statements_inloop RIGHT_CURLY_BRACKET

   21 bool_expression: relExp
   22                | TRUE_TOKEN
   23                | FALSE_TOKEN

   24 assign: IDENT ASSIGN_OP expression

   25 expression: assign
   26           | IDENT INC_OP
   27           | IDENT DEC_OP
   28           | simpleExp
   29           | IDENT

   30 simpleExp: simpleExp OR_OP andExp
   31          | andExp

   32 andExp: andExp AND_OP
   33       | bitRelExp

   34 bitRelExp: bitRelExp BIT_OR_OP relExp
   35          | bitRelExp AND relExp
   36          | bitRelExp BIT_XOR_OP relExp
   37          | relExp

   38 op: EQ_OP
   39   | NE_OP
   40   | GT_OP
   41   | LT_OP
   42   | LE_OP
   43   | GE_OP
   44   | OR_OP
   45   | AND_OP

   46 relExp: relExp op bitshiftExp
   47       | bitshiftExp

   48 bitshiftExp: bitshiftExp BIT_LSHIFT_OP sumExp
   49            | bitshiftExp BIT_RSHIFT_OP sumExp
   50            | sumExp

   51 pls_min: ADD_OP
   52        | SUB_OP

   53 mul_div: MUL_OP
   54        | DIV_OP
   55        | MOD_OP

   56 sumExp: sumExp pls_min mulExp
   57       | mulExp

   58 mulExp: mulExp mul_div unaryExp
   59       | unaryExp

   60 unaryExp: INC_OP IDENT
   61         | DEC_OP IDENT
   62         | NOT_OP IDENT
   63         | IDENT
   64         | value
   65         | LEFT_PAREN expression RIGHT_PAREN

   66 value: CONST_INT
   67      | CONST_FLOAT
   68      | CONST_CHAR
   69      | STRING_LITERAL

   70 else_if: ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   71        | else_if ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   72        | %empty

   73 else_part: ELSE tail
   74          | %empty

   75 if_statement: IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part

   76 while_statement: WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop

   77 for_statement: FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

   78 do_statement: DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON

   79 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

   80 cases: case
   81      | cases case
   82      | cases default

   83 default: DEFAULT COLON statements BREAK SEMICOLON

   84 case: CASE expression COLON statements BREAK SEMICOLON

   85 return_val: expression
   86           | %empty

   87 return_statement: RETURN return_val SEMICOLON

   88 break_statement: BREAK SEMICOLON

   89 continue_statement: CONTINUE SEMICOLON

   90 expression_statement: expression SEMICOLON

   91 statements: %empty
   92           | statement
   93           | statements statement

   94 statement: if_statement
   95          | while_statement
   96          | for_statement
   97          | do_statement
   98          | switch_statement
   99          | return_statement
  100          | expression_statement
  101          | declarations
  102          | enum_statement
  103          | func_call

  104 statement_inloop: statement
  105                 | break_statement
  106                 | continue_statement

  107 statements_inloop: statement_inloop
  108                  | statements_inloop statement_inloop

  109 function: FUNC IDENT LEFT_PAREN parameters RIGHT_PAREN type LEFT_CURLY_BRACKET statements return_statement RIGHT_CURLY_BRACKET

  110 parameters: parameter
  111           | parameters COMMA parameter
  112           | %empty

  113 parameter: type IDENT

  114 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET

  115 enum_list: one_val
  116          | enum_list COMMA one_val

  117 one_val: IDENT
  118        | IDENT ASSIGN_OP value

  119 func_call: IDENT LEFT_PAREN arguments RIGHT_PAREN
  120          | IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

  121 arguments: argument
  122          | arguments COMMA argument
  123          | %empty

  124 argument: expression


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INTEGER <int_val> (258) 5
    FLOAT <int_val> (259) 6
    DOUBLE <int_val> (260) 7
    VOID <int_val> (261) 8
    BOOLEAN <int_val> (262) 9
    CHAR <int_val> (263) 10
    CONST <int_val> (264) 11
    IDENT <symbol_table_item> (265) 3 13 14 24 26 27 29 60 61 62 63 109 113 114 117 118 119 120
    CONST_INT <int_val> (266) 66
    CONST_FLOAT <double_val> (267) 67
    CONST_CHAR <char_val> (268) 68
    STRING_LITERAL <str_val> (269) 69
    IF <int_val> (270) 75
    ELSE <int_val> (271) 73
    ELIF <int_val> (272) 70 71
    WHILE <int_val> (273) 76 78
    FOR <int_val> (274) 77
    DO <int_val> (275) 78
    SWITCH <int_val> (276) 79
    CASE <int_val> (277) 84
    DEFAULT <int_val> (278) 83
    RETURN <int_val> (279) 87
    BREAK <int_val> (280) 83 84 88
    CONTINUE <int_val> (281) 89
    TRUE_TOKEN <int_val> (282) 22
    FALSE_TOKEN <int_val> (283) 23
    ENUM <int_val> (284) 114
    FUNC <int_val> (285) 109
    UNTIL <int_val> (286)
    LEFT_PAREN <int_val> (287) 65 70 71 75 76 77 78 79 109 119 120
    RIGHT_PAREN <int_val> (288) 65 70 71 75 76 77 78 79 109 119 120
    LEFT_CURLY_BRACKET <int_val> (289) 18 20 79 109 114
    RIGHT_CURLY_BRACKET <int_val> (290) 18 20 79 109 114
    LEFT_SQ_BRACKET <int_val> (291)
    RIGHT_SQ_BRACKET <int_val> (292)
    SEMICOLON <int_val> (293) 13 14 77 78 83 84 87 88 89 90
    COMMA <int_val> (294) 111 116 122
    COLON <int_val> (295) 83 84
    QUESTION_MARK <int_val> (296)
    DOT <int_val> (297)
    ADD_OP <int_val> (298) 51
    SUB_OP <int_val> (299) 52
    MUL_OP <int_val> (300) 53
    DIV_OP <int_val> (301) 54
    MOD_OP <int_val> (302) 55
    INC_OP <int_val> (303) 26 60
    DEC_OP <int_val> (304) 27 61
    OR_OP <int_val> (305) 30 44
    AND_OP <int_val> (306) 32 45
    NOT_OP <int_val> (307) 62
    BIT_OR_OP <int_val> (308) 34
    AND <int_val> (309) 35
    BIT_XOR_OP <int_val> (310) 36
    BIT_NOT_OP <int_val> (311)
    BIT_LSHIFT_OP <int_val> (312) 48
    BIT_RSHIFT_OP <int_val> (313) 49
    EQ_OP <int_val> (314) 38
    NE_OP <int_val> (315) 39
    GT_OP <int_val> (316) 40
    LT_OP <int_val> (317) 41
    GE_OP <int_val> (318) 43
    LE_OP <int_val> (319) 42
    ASSIGN_OP <int_val> (320) 14 24 118 120


Nonterminals, with rules where they appear

    $accept (66)
        on left: 0
    program (67)
        on left: 1 2 3 4
        on right: 0 1
    type (68)
        on left: 5 6 7 8 9 10
        on right: 13 14 109 113
    beforedecl (69)
        on left: 11 12
        on right: 13 14
    declaration (70)
        on left: 13 14
        on right: 4 15 16
    declarations (71)
        on left: 15 16
        on right: 16 101
    tail (72)
        on left: 17 18
        on right: 70 71 73 75
    tail_inloop (73)
        on left: 19 20
        on right: 76 77 78
    bool_expression (74)
        on left: 21 22 23
        on right: 70 71 75 76 77 78
    assign (75)
        on left: 24
        on right: 25 77
    expression (76)
        on left: 25 26 27 28 29
        on right: 14 24 65 77 79 84 85 90 124
    simpleExp (77)
        on left: 30 31
        on right: 28 30
    andExp (78)
        on left: 32 33
        on right: 30 31 32
    bitRelExp (79)
        on left: 34 35 36 37
        on right: 33 34 35 36
    op (80)
        on left: 38 39 40 41 42 43 44 45
        on right: 46
    relExp (81)
        on left: 46 47
        on right: 21 34 35 36 37 46
    bitshiftExp (82)
        on left: 48 49 50
        on right: 46 47 48 49
    pls_min (83)
        on left: 51 52
        on right: 56
    mul_div (84)
        on left: 53 54 55
        on right: 58
    sumExp (85)
        on left: 56 57
        on right: 48 49 50 56
    mulExp (86)
        on left: 58 59
        on right: 56 57 58
    unaryExp (87)
        on left: 60 61 62 63 64 65
        on right: 58 59
    value (88)
        on left: 66 67 68 69
        on right: 64 118
    else_if (89)
        on left: 70 71 72
        on right: 71 75
    else_part (90)
        on left: 73 74
        on right: 75
    if_statement (91)
        on left: 75
        on right: 94
    while_statement (92)
        on left: 76
        on right: 95
    for_statement (93)
        on left: 77
        on right: 96
    do_statement (94)
        on left: 78
        on right: 97
    switch_statement (95)
        on left: 79
        on right: 98
    cases (96)
        on left: 80 81 82
        on right: 79 81 82
    default (97)
        on left: 83
        on right: 82
    case (98)
        on left: 84
        on right: 80 81
    return_val (99)
        on left: 85 86
        on right: 87
    return_statement (100)
        on left: 87
        on right: 99 109
    break_statement (101)
        on left: 88
        on right: 105
    continue_statement (102)
        on left: 89
        on right: 106
    expression_statement (103)
        on left: 90
        on right: 100
    statements (104)
        on left: 91 92 93
        on right: 17 18 83 84 93 109
    statement (105)
        on left: 94 95 96 97 98 99 100 101 102 103
        on right: 92 93 104
    statement_inloop (106)
        on left: 104 105 106
        on right: 107 108
    statements_inloop (107)
        on left: 107 108
        on right: 19 20 108
    function (108)
        on left: 109
        on right: 1 2
    parameters (109)
        on left: 110 111 112
        on right: 109 111
    parameter (110)
        on left: 113
        on right: 110 111
    enum_statement (111)
        on left: 114
        on right: 102
    enum_list (112)
        on left: 115 116
        on right: 114 116
    one_val (113)
        on left: 117 118
        on right: 115 116
    func_call (114)
        on left: 119 120
        on right: 103
    arguments (115)
        on left: 121 122 123
        on right: 119 120 122
    argument (116)
        on left: 124
        on right: 121 122


State 0

    0 $accept: . program $end
    1 program: . program function
    2        | . function
    3        | . IDENT
    4        | . declaration
   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
  109 function: . FUNC IDENT LEFT_PAREN parameters RIGHT_PAREN type LEFT_CURLY_BRACKET statements return_statement RIGHT_CURLY_BRACKET

    CONST  shift, and go to state 1
    IDENT  shift, and go to state 2
    FUNC   shift, and go to state 3

    $default  reduce using rule 12 (beforedecl)

    program      go to state 4
    beforedecl   go to state 5
    declaration  go to state 6
    function     go to state 7


State 1

   11 beforedecl: CONST .

    $default  reduce using rule 11 (beforedecl)


State 2

    3 program: IDENT .

    $default  reduce using rule 3 (program)


State 3

  109 function: FUNC . IDENT LEFT_PAREN parameters RIGHT_PAREN type LEFT_CURLY_BRACKET statements return_statement RIGHT_CURLY_BRACKET

    IDENT  shift, and go to state 8


State 4

    0 $accept: program . $end
    1 program: program . function
  109 function: . FUNC IDENT LEFT_PAREN parameters RIGHT_PAREN type LEFT_CURLY_BRACKET statements return_statement RIGHT_CURLY_BRACKET

    $end  shift, and go to state 9
    FUNC  shift, and go to state 3

    function  go to state 10


State 5

    5 type: . INTEGER
    6     | . FLOAT
    7     | . DOUBLE
    8     | . VOID
    9     | . BOOLEAN
   10     | . CHAR
   13 declaration: beforedecl . type IDENT SEMICOLON
   14            | beforedecl . type IDENT ASSIGN_OP expression SEMICOLON

    INTEGER  shift, and go to state 11
    FLOAT    shift, and go to state 12
    DOUBLE   shift, and go to state 13
    VOID     shift, and go to state 14
    BOOLEAN  shift, and go to state 15
    CHAR     shift, and go to state 16

    type  go to state 17


State 6

    4 program: declaration .

    $default  reduce using rule 4 (program)


State 7

    2 program: function .

    $default  reduce using rule 2 (program)


State 8

  109 function: FUNC IDENT . LEFT_PAREN parameters RIGHT_PAREN type LEFT_CURLY_BRACKET statements return_statement RIGHT_CURLY_BRACKET

    LEFT_PAREN  shift, and go to state 18


State 9

    0 $accept: program $end .

    $default  accept


State 10

    1 program: program function .

    $default  reduce using rule 1 (program)


State 11

    5 type: INTEGER .

    $default  reduce using rule 5 (type)


State 12

    6 type: FLOAT .

    $default  reduce using rule 6 (type)


State 13

    7 type: DOUBLE .

    $default  reduce using rule 7 (type)


State 14

    8 type: VOID .

    $default  reduce using rule 8 (type)


State 15

    9 type: BOOLEAN .

    $default  reduce using rule 9 (type)


State 16

   10 type: CHAR .

    $default  reduce using rule 10 (type)


State 17

   13 declaration: beforedecl type . IDENT SEMICOLON
   14            | beforedecl type . IDENT ASSIGN_OP expression SEMICOLON

    IDENT  shift, and go to state 19


State 18

    5 type: . INTEGER
    6     | . FLOAT
    7     | . DOUBLE
    8     | . VOID
    9     | . BOOLEAN
   10     | . CHAR
  109 function: FUNC IDENT LEFT_PAREN . parameters RIGHT_PAREN type LEFT_CURLY_BRACKET statements return_statement RIGHT_CURLY_BRACKET
  110 parameters: . parameter
  111           | . parameters COMMA parameter
  112           | . %empty  [RIGHT_PAREN, COMMA]
  113 parameter: . type IDENT

    INTEGER  shift, and go to state 11
    FLOAT    shift, and go to state 12
    DOUBLE   shift, and go to state 13
    VOID     shift, and go to state 14
    BOOLEAN  shift, and go to state 15
    CHAR     shift, and go to state 16

    $default  reduce using rule 112 (parameters)

    type        go to state 20
    parameters  go to state 21
    parameter   go to state 22


State 19

   13 declaration: beforedecl type IDENT . SEMICOLON
   14            | beforedecl type IDENT . ASSIGN_OP expression SEMICOLON

    SEMICOLON  shift, and go to state 23
    ASSIGN_OP  shift, and go to state 24


State 20

  113 parameter: type . IDENT

    IDENT  shift, and go to state 25


State 21

  109 function: FUNC IDENT LEFT_PAREN parameters . RIGHT_PAREN type LEFT_CURLY_BRACKET statements return_statement RIGHT_CURLY_BRACKET
  111 parameters: parameters . COMMA parameter

    RIGHT_PAREN  shift, and go to state 26
    COMMA        shift, and go to state 27


State 22

  110 parameters: parameter .

    $default  reduce using rule 110 (parameters)


State 23

   13 declaration: beforedecl type IDENT SEMICOLON .

    $default  reduce using rule 13 (declaration)


State 24

   14 declaration: beforedecl type IDENT ASSIGN_OP . expression SEMICOLON
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30 simpleExp: . simpleExp OR_OP andExp
   31          | . andExp
   32 andExp: . andExp AND_OP
   33       | . bitRelExp
   34 bitRelExp: . bitRelExp BIT_OR_OP relExp
   35          | . bitRelExp AND relExp
   36          | . bitRelExp BIT_XOR_OP relExp
   37          | . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL

    IDENT           shift, and go to state 28
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    assign       go to state 37
    expression   go to state 38
    simpleExp    go to state 39
    andExp       go to state 40
    bitRelExp    go to state 41
    relExp       go to state 42
    bitshiftExp  go to state 43
    sumExp       go to state 44
    mulExp       go to state 45
    unaryExp     go to state 46
    value        go to state 47


State 25

  113 parameter: type IDENT .

    $default  reduce using rule 113 (parameter)


State 26

    5 type: . INTEGER
    6     | . FLOAT
    7     | . DOUBLE
    8     | . VOID
    9     | . BOOLEAN
   10     | . CHAR
  109 function: FUNC IDENT LEFT_PAREN parameters RIGHT_PAREN . type LEFT_CURLY_BRACKET statements return_statement RIGHT_CURLY_BRACKET

    INTEGER  shift, and go to state 11
    FLOAT    shift, and go to state 12
    DOUBLE   shift, and go to state 13
    VOID     shift, and go to state 14
    BOOLEAN  shift, and go to state 15
    CHAR     shift, and go to state 16

    type  go to state 48


State 27

    5 type: . INTEGER
    6     | . FLOAT
    7     | . DOUBLE
    8     | . VOID
    9     | . BOOLEAN
   10     | . CHAR
  111 parameters: parameters COMMA . parameter
  113 parameter: . type IDENT

    INTEGER  shift, and go to state 11
    FLOAT    shift, and go to state 12
    DOUBLE   shift, and go to state 13
    VOID     shift, and go to state 14
    BOOLEAN  shift, and go to state 15
    CHAR     shift, and go to state 16

    type       go to state 20
    parameter  go to state 49


State 28

   24 assign: IDENT . ASSIGN_OP expression
   26 expression: IDENT . INC_OP
   27           | IDENT . DEC_OP
   29           | IDENT .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON]
   63 unaryExp: IDENT .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, ADD_OP, SUB_OP, MUL_OP, DIV_OP, MOD_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]

    INC_OP     shift, and go to state 50
    DEC_OP     shift, and go to state 51
    ASSIGN_OP  shift, and go to state 52

    RIGHT_PAREN  reduce using rule 29 (expression)
    RIGHT_PAREN  [reduce using rule 63 (unaryExp)]
    SEMICOLON    reduce using rule 29 (expression)
    SEMICOLON    [reduce using rule 63 (unaryExp)]
    COMMA        reduce using rule 29 (expression)
    COMMA        [reduce using rule 63 (unaryExp)]
    COLON        reduce using rule 29 (expression)
    COLON        [reduce using rule 63 (unaryExp)]
    $default     reduce using rule 63 (unaryExp)


State 29

   66 value: CONST_INT .

    $default  reduce using rule 66 (value)


State 30

   67 value: CONST_FLOAT .

    $default  reduce using rule 67 (value)


State 31

   68 value: CONST_CHAR .

    $default  reduce using rule 68 (value)


State 32

   69 value: STRING_LITERAL .

    $default  reduce using rule 69 (value)


State 33

   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30 simpleExp: . simpleExp OR_OP andExp
   31          | . andExp
   32 andExp: . andExp AND_OP
   33       | . bitRelExp
   34 bitRelExp: . bitRelExp BIT_OR_OP relExp
   35          | . bitRelExp AND relExp
   36          | . bitRelExp BIT_XOR_OP relExp
   37          | . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   65         | LEFT_PAREN . expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL

    IDENT           shift, and go to state 28
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    assign       go to state 37
    expression   go to state 53
    simpleExp    go to state 39
    andExp       go to state 40
    bitRelExp    go to state 41
    relExp       go to state 42
    bitshiftExp  go to state 43
    sumExp       go to state 44
    mulExp       go to state 45
    unaryExp     go to state 46
    value        go to state 47


State 34

   60 unaryExp: INC_OP . IDENT

    IDENT  shift, and go to state 54


State 35

   61 unaryExp: DEC_OP . IDENT

    IDENT  shift, and go to state 55


State 36

   62 unaryExp: NOT_OP . IDENT

    IDENT  shift, and go to state 56


State 37

   25 expression: assign .

    $default  reduce using rule 25 (expression)


State 38

   14 declaration: beforedecl type IDENT ASSIGN_OP expression . SEMICOLON

    SEMICOLON  shift, and go to state 57


State 39

   28 expression: simpleExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON]
   30 simpleExp: simpleExp . OR_OP andExp

    OR_OP  shift, and go to state 58

    $default  reduce using rule 28 (expression)


State 40

   31 simpleExp: andExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP]
   32 andExp: andExp . AND_OP

    AND_OP  shift, and go to state 59

    $default  reduce using rule 31 (simpleExp)


State 41

   33 andExp: bitRelExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP]
   34 bitRelExp: bitRelExp . BIT_OR_OP relExp
   35          | bitRelExp . AND relExp
   36          | bitRelExp . BIT_XOR_OP relExp

    BIT_OR_OP   shift, and go to state 60
    AND         shift, and go to state 61
    BIT_XOR_OP  shift, and go to state 62

    $default  reduce using rule 33 (andExp)


State 42

   37 bitRelExp: relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   38 op: . EQ_OP
   39   | . NE_OP
   40   | . GT_OP
   41   | . LT_OP
   42   | . LE_OP
   43   | . GE_OP
   44   | . OR_OP
   45   | . AND_OP
   46 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 63
    AND_OP  shift, and go to state 64
    EQ_OP   shift, and go to state 65
    NE_OP   shift, and go to state 66
    GT_OP   shift, and go to state 67
    LT_OP   shift, and go to state 68
    GE_OP   shift, and go to state 69
    LE_OP   shift, and go to state 70

    OR_OP     [reduce using rule 37 (bitRelExp)]
    AND_OP    [reduce using rule 37 (bitRelExp)]
    $default  reduce using rule 37 (bitRelExp)

    op  go to state 71


State 43

   47 relExp: bitshiftExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   48 bitshiftExp: bitshiftExp . BIT_LSHIFT_OP sumExp
   49            | bitshiftExp . BIT_RSHIFT_OP sumExp

    BIT_LSHIFT_OP  shift, and go to state 72
    BIT_RSHIFT_OP  shift, and go to state 73

    $default  reduce using rule 47 (relExp)


State 44

   50 bitshiftExp: sumExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   51 pls_min: . ADD_OP
   52        | . SUB_OP
   56 sumExp: sumExp . pls_min mulExp

    ADD_OP  shift, and go to state 74
    SUB_OP  shift, and go to state 75

    $default  reduce using rule 50 (bitshiftExp)

    pls_min  go to state 76


State 45

   53 mul_div: . MUL_OP
   54        | . DIV_OP
   55        | . MOD_OP
   57 sumExp: mulExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, ADD_OP, SUB_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   58 mulExp: mulExp . mul_div unaryExp

    MUL_OP  shift, and go to state 77
    DIV_OP  shift, and go to state 78
    MOD_OP  shift, and go to state 79

    $default  reduce using rule 57 (sumExp)

    mul_div  go to state 80


State 46

   59 mulExp: unaryExp .

    $default  reduce using rule 59 (mulExp)


State 47

   64 unaryExp: value .

    $default  reduce using rule 64 (unaryExp)


State 48

  109 function: FUNC IDENT LEFT_PAREN parameters RIGHT_PAREN type . LEFT_CURLY_BRACKET statements return_statement RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 81


State 49

  111 parameters: parameters COMMA parameter .

    $default  reduce using rule 111 (parameters)


State 50

   26 expression: IDENT INC_OP .

    $default  reduce using rule 26 (expression)


State 51

   27 expression: IDENT DEC_OP .

    $default  reduce using rule 27 (expression)


State 52

   24 assign: . IDENT ASSIGN_OP expression
   24       | IDENT ASSIGN_OP . expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30 simpleExp: . simpleExp OR_OP andExp
   31          | . andExp
   32 andExp: . andExp AND_OP
   33       | . bitRelExp
   34 bitRelExp: . bitRelExp BIT_OR_OP relExp
   35          | . bitRelExp AND relExp
   36          | . bitRelExp BIT_XOR_OP relExp
   37          | . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL

    IDENT           shift, and go to state 28
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    assign       go to state 37
    expression   go to state 82
    simpleExp    go to state 39
    andExp       go to state 40
    bitRelExp    go to state 41
    relExp       go to state 42
    bitshiftExp  go to state 43
    sumExp       go to state 44
    mulExp       go to state 45
    unaryExp     go to state 46
    value        go to state 47


State 53

   65 unaryExp: LEFT_PAREN expression . RIGHT_PAREN

    RIGHT_PAREN  shift, and go to state 83


State 54

   60 unaryExp: INC_OP IDENT .

    $default  reduce using rule 60 (unaryExp)


State 55

   61 unaryExp: DEC_OP IDENT .

    $default  reduce using rule 61 (unaryExp)


State 56

   62 unaryExp: NOT_OP IDENT .

    $default  reduce using rule 62 (unaryExp)


State 57

   14 declaration: beforedecl type IDENT ASSIGN_OP expression SEMICOLON .

    $default  reduce using rule 14 (declaration)


State 58

   30 simpleExp: simpleExp OR_OP . andExp
   32 andExp: . andExp AND_OP
   33       | . bitRelExp
   34 bitRelExp: . bitRelExp BIT_OR_OP relExp
   35          | . bitRelExp AND relExp
   36          | . bitRelExp BIT_XOR_OP relExp
   37          | . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL

    IDENT           shift, and go to state 84
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    andExp       go to state 85
    bitRelExp    go to state 41
    relExp       go to state 42
    bitshiftExp  go to state 43
    sumExp       go to state 44
    mulExp       go to state 45
    unaryExp     go to state 46
    value        go to state 47


State 59

   32 andExp: andExp AND_OP .

    $default  reduce using rule 32 (andExp)


State 60

   34 bitRelExp: bitRelExp BIT_OR_OP . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL

    IDENT           shift, and go to state 84
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    relExp       go to state 86
    bitshiftExp  go to state 43
    sumExp       go to state 44
    mulExp       go to state 45
    unaryExp     go to state 46
    value        go to state 47


State 61

   35 bitRelExp: bitRelExp AND . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL

    IDENT           shift, and go to state 84
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    relExp       go to state 87
    bitshiftExp  go to state 43
    sumExp       go to state 44
    mulExp       go to state 45
    unaryExp     go to state 46
    value        go to state 47


State 62

   36 bitRelExp: bitRelExp BIT_XOR_OP . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL

    IDENT           shift, and go to state 84
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    relExp       go to state 88
    bitshiftExp  go to state 43
    sumExp       go to state 44
    mulExp       go to state 45
    unaryExp     go to state 46
    value        go to state 47


State 63

   44 op: OR_OP .

    $default  reduce using rule 44 (op)


State 64

   45 op: AND_OP .

    $default  reduce using rule 45 (op)


State 65

   38 op: EQ_OP .

    $default  reduce using rule 38 (op)


State 66

   39 op: NE_OP .

    $default  reduce using rule 39 (op)


State 67

   40 op: GT_OP .

    $default  reduce using rule 40 (op)


State 68

   41 op: LT_OP .

    $default  reduce using rule 41 (op)


State 69

   43 op: GE_OP .

    $default  reduce using rule 43 (op)


State 70

   42 op: LE_OP .

    $default  reduce using rule 42 (op)


State 71

   46 relExp: relExp op . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL

    IDENT           shift, and go to state 84
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    bitshiftExp  go to state 89
    sumExp       go to state 44
    mulExp       go to state 45
    unaryExp     go to state 46
    value        go to state 47


State 72

   48 bitshiftExp: bitshiftExp BIT_LSHIFT_OP . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL

    IDENT           shift, and go to state 84
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    sumExp    go to state 90
    mulExp    go to state 45
    unaryExp  go to state 46
    value     go to state 47


State 73

   49 bitshiftExp: bitshiftExp BIT_RSHIFT_OP . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL

    IDENT           shift, and go to state 84
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    sumExp    go to state 91
    mulExp    go to state 45
    unaryExp  go to state 46
    value     go to state 47


State 74

   51 pls_min: ADD_OP .

    $default  reduce using rule 51 (pls_min)


State 75

   52 pls_min: SUB_OP .

    $default  reduce using rule 52 (pls_min)


State 76

   56 sumExp: sumExp pls_min . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL

    IDENT           shift, and go to state 84
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    mulExp    go to state 92
    unaryExp  go to state 46
    value     go to state 47


State 77

   53 mul_div: MUL_OP .

    $default  reduce using rule 53 (mul_div)


State 78

   54 mul_div: DIV_OP .

    $default  reduce using rule 54 (mul_div)


State 79

   55 mul_div: MOD_OP .

    $default  reduce using rule 55 (mul_div)


State 80

   58 mulExp: mulExp mul_div . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL

    IDENT           shift, and go to state 84
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    unaryExp  go to state 93
    value     go to state 47


State 81

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30 simpleExp: . simpleExp OR_OP andExp
   31          | . andExp
   32 andExp: . andExp AND_OP
   33       | . bitRelExp
   34 bitRelExp: . bitRelExp BIT_OR_OP relExp
   35          | . bitRelExp AND relExp
   36          | . bitRelExp BIT_XOR_OP relExp
   37          | . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
   75 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   76 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   77 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   78 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   79 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   87 return_statement: . RETURN return_val SEMICOLON
   90 expression_statement: . expression SEMICOLON
   91 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, ENUM, LEFT_PAREN, INC_OP, DEC_OP, NOT_OP]
   92           | . statement
   93           | . statements statement
   94 statement: . if_statement
   95          | . while_statement
   96          | . for_statement
   97          | . do_statement
   98          | . switch_statement
   99          | . return_statement
  100          | . expression_statement
  101          | . declarations
  102          | . enum_statement
  103          | . func_call
  109 function: FUNC IDENT LEFT_PAREN parameters RIGHT_PAREN type LEFT_CURLY_BRACKET . statements return_statement RIGHT_CURLY_BRACKET
  114 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  119 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  120          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 94
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    IF              shift, and go to state 95
    WHILE           shift, and go to state 96
    FOR             shift, and go to state 97
    DO              shift, and go to state 98
    SWITCH          shift, and go to state 99
    RETURN          shift, and go to state 100
    ENUM            shift, and go to state 101
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    INTEGER         reduce using rule 12 (beforedecl)
    INTEGER         [reduce using rule 91 (statements)]
    FLOAT           reduce using rule 12 (beforedecl)
    FLOAT           [reduce using rule 91 (statements)]
    DOUBLE          reduce using rule 12 (beforedecl)
    DOUBLE          [reduce using rule 91 (statements)]
    VOID            reduce using rule 12 (beforedecl)
    VOID            [reduce using rule 91 (statements)]
    BOOLEAN         reduce using rule 12 (beforedecl)
    BOOLEAN         [reduce using rule 91 (statements)]
    CHAR            reduce using rule 12 (beforedecl)
    CHAR            [reduce using rule 91 (statements)]
    CONST           [reduce using rule 91 (statements)]
    IDENT           [reduce using rule 91 (statements)]
    CONST_INT       [reduce using rule 91 (statements)]
    CONST_FLOAT     [reduce using rule 91 (statements)]
    CONST_CHAR      [reduce using rule 91 (statements)]
    STRING_LITERAL  [reduce using rule 91 (statements)]
    IF              [reduce using rule 91 (statements)]
    WHILE           [reduce using rule 91 (statements)]
    FOR             [reduce using rule 91 (statements)]
    DO              [reduce using rule 91 (statements)]
    SWITCH          [reduce using rule 91 (statements)]
    RETURN          [reduce using rule 91 (statements)]
    ENUM            [reduce using rule 91 (statements)]
    LEFT_PAREN      [reduce using rule 91 (statements)]
    INC_OP          [reduce using rule 91 (statements)]
    DEC_OP          [reduce using rule 91 (statements)]
    NOT_OP          [reduce using rule 91 (statements)]
    $default        reduce using rule 12 (beforedecl)

    beforedecl            go to state 5
    declaration           go to state 102
    declarations          go to state 103
    assign                go to state 37
    expression            go to state 104
    simpleExp             go to state 39
    andExp                go to state 40
    bitRelExp             go to state 41
    relExp                go to state 42
    bitshiftExp           go to state 43
    sumExp                go to state 44
    mulExp                go to state 45
    unaryExp              go to state 46
    value                 go to state 47
    if_statement          go to state 105
    while_statement       go to state 106
    for_statement         go to state 107
    do_statement          go to state 108
    switch_statement      go to state 109
    return_statement      go to state 110
    expression_statement  go to state 111
    statements            go to state 112
    statement             go to state 113
    enum_statement        go to state 114
    func_call             go to state 115


State 82

   24 assign: IDENT ASSIGN_OP expression .

    $default  reduce using rule 24 (assign)


State 83

   65 unaryExp: LEFT_PAREN expression RIGHT_PAREN .

    $default  reduce using rule 65 (unaryExp)


State 84

   63 unaryExp: IDENT .

    $default  reduce using rule 63 (unaryExp)


State 85

   30 simpleExp: simpleExp OR_OP andExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP]
   32 andExp: andExp . AND_OP

    AND_OP  shift, and go to state 59

    $default  reduce using rule 30 (simpleExp)


State 86

   34 bitRelExp: bitRelExp BIT_OR_OP relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   38 op: . EQ_OP
   39   | . NE_OP
   40   | . GT_OP
   41   | . LT_OP
   42   | . LE_OP
   43   | . GE_OP
   44   | . OR_OP
   45   | . AND_OP
   46 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 63
    AND_OP  shift, and go to state 64
    EQ_OP   shift, and go to state 65
    NE_OP   shift, and go to state 66
    GT_OP   shift, and go to state 67
    LT_OP   shift, and go to state 68
    GE_OP   shift, and go to state 69
    LE_OP   shift, and go to state 70

    OR_OP     [reduce using rule 34 (bitRelExp)]
    AND_OP    [reduce using rule 34 (bitRelExp)]
    $default  reduce using rule 34 (bitRelExp)

    op  go to state 71


State 87

   35 bitRelExp: bitRelExp AND relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   38 op: . EQ_OP
   39   | . NE_OP
   40   | . GT_OP
   41   | . LT_OP
   42   | . LE_OP
   43   | . GE_OP
   44   | . OR_OP
   45   | . AND_OP
   46 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 63
    AND_OP  shift, and go to state 64
    EQ_OP   shift, and go to state 65
    NE_OP   shift, and go to state 66
    GT_OP   shift, and go to state 67
    LT_OP   shift, and go to state 68
    GE_OP   shift, and go to state 69
    LE_OP   shift, and go to state 70

    OR_OP     [reduce using rule 35 (bitRelExp)]
    AND_OP    [reduce using rule 35 (bitRelExp)]
    $default  reduce using rule 35 (bitRelExp)

    op  go to state 71


State 88

   36 bitRelExp: bitRelExp BIT_XOR_OP relExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP]
   38 op: . EQ_OP
   39   | . NE_OP
   40   | . GT_OP
   41   | . LT_OP
   42   | . LE_OP
   43   | . GE_OP
   44   | . OR_OP
   45   | . AND_OP
   46 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 63
    AND_OP  shift, and go to state 64
    EQ_OP   shift, and go to state 65
    NE_OP   shift, and go to state 66
    GT_OP   shift, and go to state 67
    LT_OP   shift, and go to state 68
    GE_OP   shift, and go to state 69
    LE_OP   shift, and go to state 70

    OR_OP     [reduce using rule 36 (bitRelExp)]
    AND_OP    [reduce using rule 36 (bitRelExp)]
    $default  reduce using rule 36 (bitRelExp)

    op  go to state 71


State 89

   46 relExp: relExp op bitshiftExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   48 bitshiftExp: bitshiftExp . BIT_LSHIFT_OP sumExp
   49            | bitshiftExp . BIT_RSHIFT_OP sumExp

    BIT_LSHIFT_OP  shift, and go to state 72
    BIT_RSHIFT_OP  shift, and go to state 73

    $default  reduce using rule 46 (relExp)


State 90

   48 bitshiftExp: bitshiftExp BIT_LSHIFT_OP sumExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   51 pls_min: . ADD_OP
   52        | . SUB_OP
   56 sumExp: sumExp . pls_min mulExp

    ADD_OP  shift, and go to state 74
    SUB_OP  shift, and go to state 75

    $default  reduce using rule 48 (bitshiftExp)

    pls_min  go to state 76


State 91

   49 bitshiftExp: bitshiftExp BIT_RSHIFT_OP sumExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   51 pls_min: . ADD_OP
   52        | . SUB_OP
   56 sumExp: sumExp . pls_min mulExp

    ADD_OP  shift, and go to state 74
    SUB_OP  shift, and go to state 75

    $default  reduce using rule 49 (bitshiftExp)

    pls_min  go to state 76


State 92

   53 mul_div: . MUL_OP
   54        | . DIV_OP
   55        | . MOD_OP
   56 sumExp: sumExp pls_min mulExp .  [RIGHT_PAREN, SEMICOLON, COMMA, COLON, ADD_OP, SUB_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
   58 mulExp: mulExp . mul_div unaryExp

    MUL_OP  shift, and go to state 77
    DIV_OP  shift, and go to state 78
    MOD_OP  shift, and go to state 79

    $default  reduce using rule 56 (sumExp)

    mul_div  go to state 80


State 93

   58 mulExp: mulExp mul_div unaryExp .

    $default  reduce using rule 58 (mulExp)


State 94

   24 assign: IDENT . ASSIGN_OP expression
   26 expression: IDENT . INC_OP
   27           | IDENT . DEC_OP
   29           | IDENT .  [SEMICOLON]
   63 unaryExp: IDENT .  [SEMICOLON, ADD_OP, SUB_OP, MUL_OP, DIV_OP, MOD_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
  119 func_call: IDENT . LEFT_PAREN arguments RIGHT_PAREN
  120          | IDENT . ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    LEFT_PAREN  shift, and go to state 116
    INC_OP      shift, and go to state 50
    DEC_OP      shift, and go to state 51
    ASSIGN_OP   shift, and go to state 117

    SEMICOLON  reduce using rule 29 (expression)
    SEMICOLON  [reduce using rule 63 (unaryExp)]
    $default   reduce using rule 63 (unaryExp)


State 95

   75 if_statement: IF . LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part

    LEFT_PAREN  shift, and go to state 118


State 96

   76 while_statement: WHILE . LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop

    LEFT_PAREN  shift, and go to state 119


State 97

   77 for_statement: FOR . LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

    LEFT_PAREN  shift, and go to state 120


State 98

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   19 tail_inloop: . statements_inloop
   20            | . LEFT_CURLY_BRACKET statements_inloop RIGHT_CURLY_BRACKET
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30 simpleExp: . simpleExp OR_OP andExp
   31          | . andExp
   32 andExp: . andExp AND_OP
   33       | . bitRelExp
   34 bitRelExp: . bitRelExp BIT_OR_OP relExp
   35          | . bitRelExp AND relExp
   36          | . bitRelExp BIT_XOR_OP relExp
   37          | . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
   75 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   76 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   77 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   78 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   78             | DO . tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   79 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   87 return_statement: . RETURN return_val SEMICOLON
   88 break_statement: . BREAK SEMICOLON
   89 continue_statement: . CONTINUE SEMICOLON
   90 expression_statement: . expression SEMICOLON
   94 statement: . if_statement
   95          | . while_statement
   96          | . for_statement
   97          | . do_statement
   98          | . switch_statement
   99          | . return_statement
  100          | . expression_statement
  101          | . declarations
  102          | . enum_statement
  103          | . func_call
  104 statement_inloop: . statement
  105                 | . break_statement
  106                 | . continue_statement
  107 statements_inloop: . statement_inloop
  108                  | . statements_inloop statement_inloop
  114 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  119 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  120          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST               shift, and go to state 1
    IDENT               shift, and go to state 94
    CONST_INT           shift, and go to state 29
    CONST_FLOAT         shift, and go to state 30
    CONST_CHAR          shift, and go to state 31
    STRING_LITERAL      shift, and go to state 32
    IF                  shift, and go to state 95
    WHILE               shift, and go to state 96
    FOR                 shift, and go to state 97
    DO                  shift, and go to state 98
    SWITCH              shift, and go to state 99
    RETURN              shift, and go to state 100
    BREAK               shift, and go to state 121
    CONTINUE            shift, and go to state 122
    ENUM                shift, and go to state 101
    LEFT_PAREN          shift, and go to state 33
    LEFT_CURLY_BRACKET  shift, and go to state 123
    INC_OP              shift, and go to state 34
    DEC_OP              shift, and go to state 35
    NOT_OP              shift, and go to state 36

    $default  reduce using rule 12 (beforedecl)

    beforedecl            go to state 5
    declaration           go to state 102
    declarations          go to state 103
    tail_inloop           go to state 124
    assign                go to state 37
    expression            go to state 104
    simpleExp             go to state 39
    andExp                go to state 40
    bitRelExp             go to state 41
    relExp                go to state 42
    bitshiftExp           go to state 43
    sumExp                go to state 44
    mulExp                go to state 45
    unaryExp              go to state 46
    value                 go to state 47
    if_statement          go to state 105
    while_statement       go to state 106
    for_statement         go to state 107
    do_statement          go to state 108
    switch_statement      go to state 109
    return_statement      go to state 110
    break_statement       go to state 125
    continue_statement    go to state 126
    expression_statement  go to state 111
    statement             go to state 127
    statement_inloop      go to state 128
    statements_inloop     go to state 129
    enum_statement        go to state 114
    func_call             go to state 115


State 99

   79 switch_statement: SWITCH . LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    LEFT_PAREN  shift, and go to state 130


State 100

   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30 simpleExp: . simpleExp OR_OP andExp
   31          | . andExp
   32 andExp: . andExp AND_OP
   33       | . bitRelExp
   34 bitRelExp: . bitRelExp BIT_OR_OP relExp
   35          | . bitRelExp AND relExp
   36          | . bitRelExp BIT_XOR_OP relExp
   37          | . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
   85 return_val: . expression
   86           | . %empty  [SEMICOLON]
   87 return_statement: RETURN . return_val SEMICOLON

    IDENT           shift, and go to state 28
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    $default  reduce using rule 86 (return_val)

    assign       go to state 37
    expression   go to state 131
    simpleExp    go to state 39
    andExp       go to state 40
    bitRelExp    go to state 41
    relExp       go to state 42
    bitshiftExp  go to state 43
    sumExp       go to state 44
    mulExp       go to state 45
    unaryExp     go to state 46
    value        go to state 47
    return_val   go to state 132


State 101

  114 enum_statement: ENUM . IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET

    IDENT  shift, and go to state 133


State 102

   15 declarations: declaration .

    $default  reduce using rule 15 (declarations)


State 103

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   16 declarations: declarations . declaration
  101 statement: declarations .  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]

    CONST  shift, and go to state 1

    INTEGER   reduce using rule 12 (beforedecl)
    INTEGER   [reduce using rule 101 (statement)]
    FLOAT     reduce using rule 12 (beforedecl)
    FLOAT     [reduce using rule 101 (statement)]
    DOUBLE    reduce using rule 12 (beforedecl)
    DOUBLE    [reduce using rule 101 (statement)]
    VOID      reduce using rule 12 (beforedecl)
    VOID      [reduce using rule 101 (statement)]
    BOOLEAN   reduce using rule 12 (beforedecl)
    BOOLEAN   [reduce using rule 101 (statement)]
    CHAR      reduce using rule 12 (beforedecl)
    CHAR      [reduce using rule 101 (statement)]
    CONST     [reduce using rule 101 (statement)]
    $default  reduce using rule 101 (statement)

    beforedecl   go to state 5
    declaration  go to state 134


State 104

   90 expression_statement: expression . SEMICOLON

    SEMICOLON  shift, and go to state 135


State 105

   94 statement: if_statement .

    $default  reduce using rule 94 (statement)


State 106

   95 statement: while_statement .

    $default  reduce using rule 95 (statement)


State 107

   96 statement: for_statement .

    $default  reduce using rule 96 (statement)


State 108

   97 statement: do_statement .

    $default  reduce using rule 97 (statement)


State 109

   98 statement: switch_statement .

    $default  reduce using rule 98 (statement)


State 110

   99 statement: return_statement .

    $default  reduce using rule 99 (statement)


State 111

  100 statement: expression_statement .

    $default  reduce using rule 100 (statement)


State 112

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30 simpleExp: . simpleExp OR_OP andExp
   31          | . andExp
   32 andExp: . andExp AND_OP
   33       | . bitRelExp
   34 bitRelExp: . bitRelExp BIT_OR_OP relExp
   35          | . bitRelExp AND relExp
   36          | . bitRelExp BIT_XOR_OP relExp
   37          | . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
   75 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   76 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   77 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   78 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   79 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   87 return_statement: . RETURN return_val SEMICOLON
   90 expression_statement: . expression SEMICOLON
   93 statements: statements . statement
   94 statement: . if_statement
   95          | . while_statement
   96          | . for_statement
   97          | . do_statement
   98          | . switch_statement
   99          | . return_statement
  100          | . expression_statement
  101          | . declarations
  102          | . enum_statement
  103          | . func_call
  109 function: FUNC IDENT LEFT_PAREN parameters RIGHT_PAREN type LEFT_CURLY_BRACKET statements . return_statement RIGHT_CURLY_BRACKET
  114 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  119 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  120          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 94
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    IF              shift, and go to state 95
    WHILE           shift, and go to state 96
    FOR             shift, and go to state 97
    DO              shift, and go to state 98
    SWITCH          shift, and go to state 99
    RETURN          shift, and go to state 100
    ENUM            shift, and go to state 101
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    $default  reduce using rule 12 (beforedecl)

    beforedecl            go to state 5
    declaration           go to state 102
    declarations          go to state 103
    assign                go to state 37
    expression            go to state 104
    simpleExp             go to state 39
    andExp                go to state 40
    bitRelExp             go to state 41
    relExp                go to state 42
    bitshiftExp           go to state 43
    sumExp                go to state 44
    mulExp                go to state 45
    unaryExp              go to state 46
    value                 go to state 47
    if_statement          go to state 105
    while_statement       go to state 106
    for_statement         go to state 107
    do_statement          go to state 108
    switch_statement      go to state 109
    return_statement      go to state 136
    expression_statement  go to state 111
    statement             go to state 137
    enum_statement        go to state 114
    func_call             go to state 115


State 113

   92 statements: statement .

    $default  reduce using rule 92 (statements)


State 114

  102 statement: enum_statement .

    $default  reduce using rule 102 (statement)


State 115

  103 statement: func_call .

    $default  reduce using rule 103 (statement)


State 116

   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30 simpleExp: . simpleExp OR_OP andExp
   31          | . andExp
   32 andExp: . andExp AND_OP
   33       | . bitRelExp
   34 bitRelExp: . bitRelExp BIT_OR_OP relExp
   35          | . bitRelExp AND relExp
   36          | . bitRelExp BIT_XOR_OP relExp
   37          | . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
  119 func_call: IDENT LEFT_PAREN . arguments RIGHT_PAREN
  121 arguments: . argument
  122          | . arguments COMMA argument
  123          | . %empty  [RIGHT_PAREN, COMMA]
  124 argument: . expression

    IDENT           shift, and go to state 28
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    $default  reduce using rule 123 (arguments)

    assign       go to state 37
    expression   go to state 138
    simpleExp    go to state 39
    andExp       go to state 40
    bitRelExp    go to state 41
    relExp       go to state 42
    bitshiftExp  go to state 43
    sumExp       go to state 44
    mulExp       go to state 45
    unaryExp     go to state 46
    value        go to state 47
    arguments    go to state 139
    argument     go to state 140


State 117

   24 assign: . IDENT ASSIGN_OP expression
   24       | IDENT ASSIGN_OP . expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30 simpleExp: . simpleExp OR_OP andExp
   31          | . andExp
   32 andExp: . andExp AND_OP
   33       | . bitRelExp
   34 bitRelExp: . bitRelExp BIT_OR_OP relExp
   35          | . bitRelExp AND relExp
   36          | . bitRelExp BIT_XOR_OP relExp
   37          | . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
  120 func_call: IDENT ASSIGN_OP . IDENT LEFT_PAREN arguments RIGHT_PAREN

    IDENT           shift, and go to state 141
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    assign       go to state 37
    expression   go to state 82
    simpleExp    go to state 39
    andExp       go to state 40
    bitRelExp    go to state 41
    relExp       go to state 42
    bitshiftExp  go to state 43
    sumExp       go to state 44
    mulExp       go to state 45
    unaryExp     go to state 46
    value        go to state 47


State 118

   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
   75 if_statement: IF LEFT_PAREN . bool_expression RIGHT_PAREN tail else_if else_part

    IDENT           shift, and go to state 84
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    TRUE_TOKEN      shift, and go to state 142
    FALSE_TOKEN     shift, and go to state 143
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    bool_expression  go to state 144
    relExp           go to state 145
    bitshiftExp      go to state 43
    sumExp           go to state 44
    mulExp           go to state 45
    unaryExp         go to state 46
    value            go to state 47


State 119

   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
   76 while_statement: WHILE LEFT_PAREN . bool_expression RIGHT_PAREN tail_inloop

    IDENT           shift, and go to state 84
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    TRUE_TOKEN      shift, and go to state 142
    FALSE_TOKEN     shift, and go to state 143
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    bool_expression  go to state 146
    relExp           go to state 145
    bitshiftExp      go to state 43
    sumExp           go to state 44
    mulExp           go to state 45
    unaryExp         go to state 46
    value            go to state 47


State 120

   24 assign: . IDENT ASSIGN_OP expression
   77 for_statement: FOR LEFT_PAREN . assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

    IDENT  shift, and go to state 147

    assign  go to state 148


State 121

   88 break_statement: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 149


State 122

   89 continue_statement: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 150


State 123

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   20 tail_inloop: LEFT_CURLY_BRACKET . statements_inloop RIGHT_CURLY_BRACKET
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30 simpleExp: . simpleExp OR_OP andExp
   31          | . andExp
   32 andExp: . andExp AND_OP
   33       | . bitRelExp
   34 bitRelExp: . bitRelExp BIT_OR_OP relExp
   35          | . bitRelExp AND relExp
   36          | . bitRelExp BIT_XOR_OP relExp
   37          | . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
   75 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   76 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   77 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   78 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   79 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   87 return_statement: . RETURN return_val SEMICOLON
   88 break_statement: . BREAK SEMICOLON
   89 continue_statement: . CONTINUE SEMICOLON
   90 expression_statement: . expression SEMICOLON
   94 statement: . if_statement
   95          | . while_statement
   96          | . for_statement
   97          | . do_statement
   98          | . switch_statement
   99          | . return_statement
  100          | . expression_statement
  101          | . declarations
  102          | . enum_statement
  103          | . func_call
  104 statement_inloop: . statement
  105                 | . break_statement
  106                 | . continue_statement
  107 statements_inloop: . statement_inloop
  108                  | . statements_inloop statement_inloop
  114 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  119 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  120          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 94
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    IF              shift, and go to state 95
    WHILE           shift, and go to state 96
    FOR             shift, and go to state 97
    DO              shift, and go to state 98
    SWITCH          shift, and go to state 99
    RETURN          shift, and go to state 100
    BREAK           shift, and go to state 121
    CONTINUE        shift, and go to state 122
    ENUM            shift, and go to state 101
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    $default  reduce using rule 12 (beforedecl)

    beforedecl            go to state 5
    declaration           go to state 102
    declarations          go to state 103
    assign                go to state 37
    expression            go to state 104
    simpleExp             go to state 39
    andExp                go to state 40
    bitRelExp             go to state 41
    relExp                go to state 42
    bitshiftExp           go to state 43
    sumExp                go to state 44
    mulExp                go to state 45
    unaryExp              go to state 46
    value                 go to state 47
    if_statement          go to state 105
    while_statement       go to state 106
    for_statement         go to state 107
    do_statement          go to state 108
    switch_statement      go to state 109
    return_statement      go to state 110
    break_statement       go to state 125
    continue_statement    go to state 126
    expression_statement  go to state 111
    statement             go to state 127
    statement_inloop      go to state 128
    statements_inloop     go to state 151
    enum_statement        go to state 114
    func_call             go to state 115


State 124

   78 do_statement: DO tail_inloop . WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON

    WHILE  shift, and go to state 152


State 125

  105 statement_inloop: break_statement .

    $default  reduce using rule 105 (statement_inloop)


State 126

  106 statement_inloop: continue_statement .

    $default  reduce using rule 106 (statement_inloop)


State 127

  104 statement_inloop: statement .

    $default  reduce using rule 104 (statement_inloop)


State 128

  107 statements_inloop: statement_inloop .

    $default  reduce using rule 107 (statements_inloop)


State 129

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   19 tail_inloop: statements_inloop .  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30 simpleExp: . simpleExp OR_OP andExp
   31          | . andExp
   32 andExp: . andExp AND_OP
   33       | . bitRelExp
   34 bitRelExp: . bitRelExp BIT_OR_OP relExp
   35          | . bitRelExp AND relExp
   36          | . bitRelExp BIT_XOR_OP relExp
   37          | . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
   75 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   76 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   77 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   78 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   79 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   87 return_statement: . RETURN return_val SEMICOLON
   88 break_statement: . BREAK SEMICOLON
   89 continue_statement: . CONTINUE SEMICOLON
   90 expression_statement: . expression SEMICOLON
   94 statement: . if_statement
   95          | . while_statement
   96          | . for_statement
   97          | . do_statement
   98          | . switch_statement
   99          | . return_statement
  100          | . expression_statement
  101          | . declarations
  102          | . enum_statement
  103          | . func_call
  104 statement_inloop: . statement
  105                 | . break_statement
  106                 | . continue_statement
  108 statements_inloop: statements_inloop . statement_inloop
  114 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  119 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  120          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 94
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    IF              shift, and go to state 95
    WHILE           shift, and go to state 96
    FOR             shift, and go to state 97
    DO              shift, and go to state 98
    SWITCH          shift, and go to state 99
    RETURN          shift, and go to state 100
    BREAK           shift, and go to state 121
    CONTINUE        shift, and go to state 122
    ENUM            shift, and go to state 101
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    INTEGER              reduce using rule 12 (beforedecl)
    INTEGER              [reduce using rule 19 (tail_inloop)]
    FLOAT                reduce using rule 12 (beforedecl)
    FLOAT                [reduce using rule 19 (tail_inloop)]
    DOUBLE               reduce using rule 12 (beforedecl)
    DOUBLE               [reduce using rule 19 (tail_inloop)]
    VOID                 reduce using rule 12 (beforedecl)
    VOID                 [reduce using rule 19 (tail_inloop)]
    BOOLEAN              reduce using rule 12 (beforedecl)
    BOOLEAN              [reduce using rule 19 (tail_inloop)]
    CHAR                 reduce using rule 12 (beforedecl)
    CHAR                 [reduce using rule 19 (tail_inloop)]
    CONST                [reduce using rule 19 (tail_inloop)]
    IDENT                [reduce using rule 19 (tail_inloop)]
    CONST_INT            [reduce using rule 19 (tail_inloop)]
    CONST_FLOAT          [reduce using rule 19 (tail_inloop)]
    CONST_CHAR           [reduce using rule 19 (tail_inloop)]
    STRING_LITERAL       [reduce using rule 19 (tail_inloop)]
    IF                   [reduce using rule 19 (tail_inloop)]
    ELSE                 reduce using rule 19 (tail_inloop)
    ELIF                 reduce using rule 19 (tail_inloop)
    WHILE                [reduce using rule 19 (tail_inloop)]
    FOR                  [reduce using rule 19 (tail_inloop)]
    DO                   [reduce using rule 19 (tail_inloop)]
    SWITCH               [reduce using rule 19 (tail_inloop)]
    RETURN               [reduce using rule 19 (tail_inloop)]
    BREAK                [reduce using rule 19 (tail_inloop)]
    CONTINUE             [reduce using rule 19 (tail_inloop)]
    ENUM                 [reduce using rule 19 (tail_inloop)]
    LEFT_PAREN           [reduce using rule 19 (tail_inloop)]
    RIGHT_CURLY_BRACKET  reduce using rule 19 (tail_inloop)
    INC_OP               [reduce using rule 19 (tail_inloop)]
    DEC_OP               [reduce using rule 19 (tail_inloop)]
    NOT_OP               [reduce using rule 19 (tail_inloop)]
    $default             reduce using rule 12 (beforedecl)

    beforedecl            go to state 5
    declaration           go to state 102
    declarations          go to state 103
    assign                go to state 37
    expression            go to state 104
    simpleExp             go to state 39
    andExp                go to state 40
    bitRelExp             go to state 41
    relExp                go to state 42
    bitshiftExp           go to state 43
    sumExp                go to state 44
    mulExp                go to state 45
    unaryExp              go to state 46
    value                 go to state 47
    if_statement          go to state 105
    while_statement       go to state 106
    for_statement         go to state 107
    do_statement          go to state 108
    switch_statement      go to state 109
    return_statement      go to state 110
    break_statement       go to state 125
    continue_statement    go to state 126
    expression_statement  go to state 111
    statement             go to state 127
    statement_inloop      go to state 153
    enum_statement        go to state 114
    func_call             go to state 115


State 130

   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30 simpleExp: . simpleExp OR_OP andExp
   31          | . andExp
   32 andExp: . andExp AND_OP
   33       | . bitRelExp
   34 bitRelExp: . bitRelExp BIT_OR_OP relExp
   35          | . bitRelExp AND relExp
   36          | . bitRelExp BIT_XOR_OP relExp
   37          | . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
   79 switch_statement: SWITCH LEFT_PAREN . expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    IDENT           shift, and go to state 28
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    assign       go to state 37
    expression   go to state 154
    simpleExp    go to state 39
    andExp       go to state 40
    bitRelExp    go to state 41
    relExp       go to state 42
    bitshiftExp  go to state 43
    sumExp       go to state 44
    mulExp       go to state 45
    unaryExp     go to state 46
    value        go to state 47


State 131

   85 return_val: expression .

    $default  reduce using rule 85 (return_val)


State 132

   87 return_statement: RETURN return_val . SEMICOLON

    SEMICOLON  shift, and go to state 155


State 133

  114 enum_statement: ENUM IDENT . LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 156


State 134

   16 declarations: declarations declaration .

    $default  reduce using rule 16 (declarations)


State 135

   90 expression_statement: expression SEMICOLON .

    $default  reduce using rule 90 (expression_statement)


State 136

   99 statement: return_statement .  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, ENUM, LEFT_PAREN, INC_OP, DEC_OP, NOT_OP]
  109 function: FUNC IDENT LEFT_PAREN parameters RIGHT_PAREN type LEFT_CURLY_BRACKET statements return_statement . RIGHT_CURLY_BRACKET

    RIGHT_CURLY_BRACKET  shift, and go to state 157

    $default  reduce using rule 99 (statement)


State 137

   93 statements: statements statement .

    $default  reduce using rule 93 (statements)


State 138

  124 argument: expression .

    $default  reduce using rule 124 (argument)


State 139

  119 func_call: IDENT LEFT_PAREN arguments . RIGHT_PAREN
  122 arguments: arguments . COMMA argument

    RIGHT_PAREN  shift, and go to state 158
    COMMA        shift, and go to state 159


State 140

  121 arguments: argument .

    $default  reduce using rule 121 (arguments)


State 141

   24 assign: IDENT . ASSIGN_OP expression
   26 expression: IDENT . INC_OP
   27           | IDENT . DEC_OP
   29           | IDENT .  [SEMICOLON]
   63 unaryExp: IDENT .  [SEMICOLON, ADD_OP, SUB_OP, MUL_OP, DIV_OP, MOD_OP, OR_OP, AND_OP, BIT_OR_OP, AND, BIT_XOR_OP, BIT_LSHIFT_OP, BIT_RSHIFT_OP, EQ_OP, NE_OP, GT_OP, LT_OP, GE_OP, LE_OP]
  120 func_call: IDENT ASSIGN_OP IDENT . LEFT_PAREN arguments RIGHT_PAREN

    LEFT_PAREN  shift, and go to state 160
    INC_OP      shift, and go to state 50
    DEC_OP      shift, and go to state 51
    ASSIGN_OP   shift, and go to state 52

    SEMICOLON  reduce using rule 29 (expression)
    SEMICOLON  [reduce using rule 63 (unaryExp)]
    $default   reduce using rule 63 (unaryExp)


State 142

   22 bool_expression: TRUE_TOKEN .

    $default  reduce using rule 22 (bool_expression)


State 143

   23 bool_expression: FALSE_TOKEN .

    $default  reduce using rule 23 (bool_expression)


State 144

   75 if_statement: IF LEFT_PAREN bool_expression . RIGHT_PAREN tail else_if else_part

    RIGHT_PAREN  shift, and go to state 161


State 145

   21 bool_expression: relExp .  [RIGHT_PAREN, SEMICOLON]
   38 op: . EQ_OP
   39   | . NE_OP
   40   | . GT_OP
   41   | . LT_OP
   42   | . LE_OP
   43   | . GE_OP
   44   | . OR_OP
   45   | . AND_OP
   46 relExp: relExp . op bitshiftExp

    OR_OP   shift, and go to state 63
    AND_OP  shift, and go to state 64
    EQ_OP   shift, and go to state 65
    NE_OP   shift, and go to state 66
    GT_OP   shift, and go to state 67
    LT_OP   shift, and go to state 68
    GE_OP   shift, and go to state 69
    LE_OP   shift, and go to state 70

    $default  reduce using rule 21 (bool_expression)

    op  go to state 71


State 146

   76 while_statement: WHILE LEFT_PAREN bool_expression . RIGHT_PAREN tail_inloop

    RIGHT_PAREN  shift, and go to state 162


State 147

   24 assign: IDENT . ASSIGN_OP expression

    ASSIGN_OP  shift, and go to state 52


State 148

   77 for_statement: FOR LEFT_PAREN assign . SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

    SEMICOLON  shift, and go to state 163


State 149

   88 break_statement: BREAK SEMICOLON .

    $default  reduce using rule 88 (break_statement)


State 150

   89 continue_statement: CONTINUE SEMICOLON .

    $default  reduce using rule 89 (continue_statement)


State 151

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   20 tail_inloop: LEFT_CURLY_BRACKET statements_inloop . RIGHT_CURLY_BRACKET
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30 simpleExp: . simpleExp OR_OP andExp
   31          | . andExp
   32 andExp: . andExp AND_OP
   33       | . bitRelExp
   34 bitRelExp: . bitRelExp BIT_OR_OP relExp
   35          | . bitRelExp AND relExp
   36          | . bitRelExp BIT_XOR_OP relExp
   37          | . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
   75 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   76 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   77 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   78 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   79 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   87 return_statement: . RETURN return_val SEMICOLON
   88 break_statement: . BREAK SEMICOLON
   89 continue_statement: . CONTINUE SEMICOLON
   90 expression_statement: . expression SEMICOLON
   94 statement: . if_statement
   95          | . while_statement
   96          | . for_statement
   97          | . do_statement
   98          | . switch_statement
   99          | . return_statement
  100          | . expression_statement
  101          | . declarations
  102          | . enum_statement
  103          | . func_call
  104 statement_inloop: . statement
  105                 | . break_statement
  106                 | . continue_statement
  108 statements_inloop: statements_inloop . statement_inloop
  114 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  119 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  120          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST                shift, and go to state 1
    IDENT                shift, and go to state 94
    CONST_INT            shift, and go to state 29
    CONST_FLOAT          shift, and go to state 30
    CONST_CHAR           shift, and go to state 31
    STRING_LITERAL       shift, and go to state 32
    IF                   shift, and go to state 95
    WHILE                shift, and go to state 96
    FOR                  shift, and go to state 97
    DO                   shift, and go to state 98
    SWITCH               shift, and go to state 99
    RETURN               shift, and go to state 100
    BREAK                shift, and go to state 121
    CONTINUE             shift, and go to state 122
    ENUM                 shift, and go to state 101
    LEFT_PAREN           shift, and go to state 33
    RIGHT_CURLY_BRACKET  shift, and go to state 164
    INC_OP               shift, and go to state 34
    DEC_OP               shift, and go to state 35
    NOT_OP               shift, and go to state 36

    $default  reduce using rule 12 (beforedecl)

    beforedecl            go to state 5
    declaration           go to state 102
    declarations          go to state 103
    assign                go to state 37
    expression            go to state 104
    simpleExp             go to state 39
    andExp                go to state 40
    bitRelExp             go to state 41
    relExp                go to state 42
    bitshiftExp           go to state 43
    sumExp                go to state 44
    mulExp                go to state 45
    unaryExp              go to state 46
    value                 go to state 47
    if_statement          go to state 105
    while_statement       go to state 106
    for_statement         go to state 107
    do_statement          go to state 108
    switch_statement      go to state 109
    return_statement      go to state 110
    break_statement       go to state 125
    continue_statement    go to state 126
    expression_statement  go to state 111
    statement             go to state 127
    statement_inloop      go to state 153
    enum_statement        go to state 114
    func_call             go to state 115


State 152

   78 do_statement: DO tail_inloop WHILE . LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON

    LEFT_PAREN  shift, and go to state 165


State 153

  108 statements_inloop: statements_inloop statement_inloop .

    $default  reduce using rule 108 (statements_inloop)


State 154

   79 switch_statement: SWITCH LEFT_PAREN expression . RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    RIGHT_PAREN  shift, and go to state 166


State 155

   87 return_statement: RETURN return_val SEMICOLON .

    $default  reduce using rule 87 (return_statement)


State 156

  114 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET . enum_list RIGHT_CURLY_BRACKET
  115 enum_list: . one_val
  116          | . enum_list COMMA one_val
  117 one_val: . IDENT
  118        | . IDENT ASSIGN_OP value

    IDENT  shift, and go to state 167

    enum_list  go to state 168
    one_val    go to state 169


State 157

  109 function: FUNC IDENT LEFT_PAREN parameters RIGHT_PAREN type LEFT_CURLY_BRACKET statements return_statement RIGHT_CURLY_BRACKET .

    $default  reduce using rule 109 (function)


State 158

  119 func_call: IDENT LEFT_PAREN arguments RIGHT_PAREN .

    $default  reduce using rule 119 (func_call)


State 159

   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30 simpleExp: . simpleExp OR_OP andExp
   31          | . andExp
   32 andExp: . andExp AND_OP
   33       | . bitRelExp
   34 bitRelExp: . bitRelExp BIT_OR_OP relExp
   35          | . bitRelExp AND relExp
   36          | . bitRelExp BIT_XOR_OP relExp
   37          | . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
  122 arguments: arguments COMMA . argument
  124 argument: . expression

    IDENT           shift, and go to state 28
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    assign       go to state 37
    expression   go to state 138
    simpleExp    go to state 39
    andExp       go to state 40
    bitRelExp    go to state 41
    relExp       go to state 42
    bitshiftExp  go to state 43
    sumExp       go to state 44
    mulExp       go to state 45
    unaryExp     go to state 46
    value        go to state 47
    argument     go to state 170


State 160

   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30 simpleExp: . simpleExp OR_OP andExp
   31          | . andExp
   32 andExp: . andExp AND_OP
   33       | . bitRelExp
   34 bitRelExp: . bitRelExp BIT_OR_OP relExp
   35          | . bitRelExp AND relExp
   36          | . bitRelExp BIT_XOR_OP relExp
   37          | . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
  120 func_call: IDENT ASSIGN_OP IDENT LEFT_PAREN . arguments RIGHT_PAREN
  121 arguments: . argument
  122          | . arguments COMMA argument
  123          | . %empty  [RIGHT_PAREN, COMMA]
  124 argument: . expression

    IDENT           shift, and go to state 28
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    $default  reduce using rule 123 (arguments)

    assign       go to state 37
    expression   go to state 138
    simpleExp    go to state 39
    andExp       go to state 40
    bitRelExp    go to state 41
    relExp       go to state 42
    bitshiftExp  go to state 43
    sumExp       go to state 44
    mulExp       go to state 45
    unaryExp     go to state 46
    value        go to state 47
    arguments    go to state 171
    argument     go to state 140


State 161

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   17 tail: . statements
   18     | . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30 simpleExp: . simpleExp OR_OP andExp
   31          | . andExp
   32 andExp: . andExp AND_OP
   33       | . bitRelExp
   34 bitRelExp: . bitRelExp BIT_OR_OP relExp
   35          | . bitRelExp AND relExp
   36          | . bitRelExp BIT_XOR_OP relExp
   37          | . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
   75 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   75             | IF LEFT_PAREN bool_expression RIGHT_PAREN . tail else_if else_part
   76 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   77 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   78 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   79 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   87 return_statement: . RETURN return_val SEMICOLON
   90 expression_statement: . expression SEMICOLON
   91 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   92           | . statement
   93           | . statements statement
   94 statement: . if_statement
   95          | . while_statement
   96          | . for_statement
   97          | . do_statement
   98          | . switch_statement
   99          | . return_statement
  100          | . expression_statement
  101          | . declarations
  102          | . enum_statement
  103          | . func_call
  114 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  119 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  120          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST               shift, and go to state 1
    IDENT               shift, and go to state 94
    CONST_INT           shift, and go to state 29
    CONST_FLOAT         shift, and go to state 30
    CONST_CHAR          shift, and go to state 31
    STRING_LITERAL      shift, and go to state 32
    IF                  shift, and go to state 95
    WHILE               shift, and go to state 96
    FOR                 shift, and go to state 97
    DO                  shift, and go to state 98
    SWITCH              shift, and go to state 99
    RETURN              shift, and go to state 100
    ENUM                shift, and go to state 101
    LEFT_PAREN          shift, and go to state 33
    LEFT_CURLY_BRACKET  shift, and go to state 172
    INC_OP              shift, and go to state 34
    DEC_OP              shift, and go to state 35
    NOT_OP              shift, and go to state 36

    INTEGER              reduce using rule 12 (beforedecl)
    INTEGER              [reduce using rule 91 (statements)]
    FLOAT                reduce using rule 12 (beforedecl)
    FLOAT                [reduce using rule 91 (statements)]
    DOUBLE               reduce using rule 12 (beforedecl)
    DOUBLE               [reduce using rule 91 (statements)]
    VOID                 reduce using rule 12 (beforedecl)
    VOID                 [reduce using rule 91 (statements)]
    BOOLEAN              reduce using rule 12 (beforedecl)
    BOOLEAN              [reduce using rule 91 (statements)]
    CHAR                 reduce using rule 12 (beforedecl)
    CHAR                 [reduce using rule 91 (statements)]
    CONST                [reduce using rule 91 (statements)]
    IDENT                [reduce using rule 91 (statements)]
    CONST_INT            [reduce using rule 91 (statements)]
    CONST_FLOAT          [reduce using rule 91 (statements)]
    CONST_CHAR           [reduce using rule 91 (statements)]
    STRING_LITERAL       [reduce using rule 91 (statements)]
    IF                   [reduce using rule 91 (statements)]
    ELSE                 reduce using rule 91 (statements)
    ELIF                 reduce using rule 91 (statements)
    WHILE                [reduce using rule 91 (statements)]
    FOR                  [reduce using rule 91 (statements)]
    DO                   [reduce using rule 91 (statements)]
    SWITCH               [reduce using rule 91 (statements)]
    RETURN               [reduce using rule 91 (statements)]
    BREAK                reduce using rule 91 (statements)
    CONTINUE             reduce using rule 91 (statements)
    ENUM                 [reduce using rule 91 (statements)]
    LEFT_PAREN           [reduce using rule 91 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 91 (statements)
    INC_OP               [reduce using rule 91 (statements)]
    DEC_OP               [reduce using rule 91 (statements)]
    NOT_OP               [reduce using rule 91 (statements)]
    $default             reduce using rule 12 (beforedecl)

    beforedecl            go to state 5
    declaration           go to state 102
    declarations          go to state 103
    tail                  go to state 173
    assign                go to state 37
    expression            go to state 104
    simpleExp             go to state 39
    andExp                go to state 40
    bitRelExp             go to state 41
    relExp                go to state 42
    bitshiftExp           go to state 43
    sumExp                go to state 44
    mulExp                go to state 45
    unaryExp              go to state 46
    value                 go to state 47
    if_statement          go to state 105
    while_statement       go to state 106
    for_statement         go to state 107
    do_statement          go to state 108
    switch_statement      go to state 109
    return_statement      go to state 110
    expression_statement  go to state 111
    statements            go to state 174
    statement             go to state 113
    enum_statement        go to state 114
    func_call             go to state 115


State 162

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   19 tail_inloop: . statements_inloop
   20            | . LEFT_CURLY_BRACKET statements_inloop RIGHT_CURLY_BRACKET
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30 simpleExp: . simpleExp OR_OP andExp
   31          | . andExp
   32 andExp: . andExp AND_OP
   33       | . bitRelExp
   34 bitRelExp: . bitRelExp BIT_OR_OP relExp
   35          | . bitRelExp AND relExp
   36          | . bitRelExp BIT_XOR_OP relExp
   37          | . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
   75 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   76 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   76                | WHILE LEFT_PAREN bool_expression RIGHT_PAREN . tail_inloop
   77 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   78 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   79 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   87 return_statement: . RETURN return_val SEMICOLON
   88 break_statement: . BREAK SEMICOLON
   89 continue_statement: . CONTINUE SEMICOLON
   90 expression_statement: . expression SEMICOLON
   94 statement: . if_statement
   95          | . while_statement
   96          | . for_statement
   97          | . do_statement
   98          | . switch_statement
   99          | . return_statement
  100          | . expression_statement
  101          | . declarations
  102          | . enum_statement
  103          | . func_call
  104 statement_inloop: . statement
  105                 | . break_statement
  106                 | . continue_statement
  107 statements_inloop: . statement_inloop
  108                  | . statements_inloop statement_inloop
  114 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  119 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  120          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST               shift, and go to state 1
    IDENT               shift, and go to state 94
    CONST_INT           shift, and go to state 29
    CONST_FLOAT         shift, and go to state 30
    CONST_CHAR          shift, and go to state 31
    STRING_LITERAL      shift, and go to state 32
    IF                  shift, and go to state 95
    WHILE               shift, and go to state 96
    FOR                 shift, and go to state 97
    DO                  shift, and go to state 98
    SWITCH              shift, and go to state 99
    RETURN              shift, and go to state 100
    BREAK               shift, and go to state 121
    CONTINUE            shift, and go to state 122
    ENUM                shift, and go to state 101
    LEFT_PAREN          shift, and go to state 33
    LEFT_CURLY_BRACKET  shift, and go to state 123
    INC_OP              shift, and go to state 34
    DEC_OP              shift, and go to state 35
    NOT_OP              shift, and go to state 36

    $default  reduce using rule 12 (beforedecl)

    beforedecl            go to state 5
    declaration           go to state 102
    declarations          go to state 103
    tail_inloop           go to state 175
    assign                go to state 37
    expression            go to state 104
    simpleExp             go to state 39
    andExp                go to state 40
    bitRelExp             go to state 41
    relExp                go to state 42
    bitshiftExp           go to state 43
    sumExp                go to state 44
    mulExp                go to state 45
    unaryExp              go to state 46
    value                 go to state 47
    if_statement          go to state 105
    while_statement       go to state 106
    for_statement         go to state 107
    do_statement          go to state 108
    switch_statement      go to state 109
    return_statement      go to state 110
    break_statement       go to state 125
    continue_statement    go to state 126
    expression_statement  go to state 111
    statement             go to state 127
    statement_inloop      go to state 128
    statements_inloop     go to state 129
    enum_statement        go to state 114
    func_call             go to state 115


State 163

   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
   77 for_statement: FOR LEFT_PAREN assign SEMICOLON . bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop

    IDENT           shift, and go to state 84
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    TRUE_TOKEN      shift, and go to state 142
    FALSE_TOKEN     shift, and go to state 143
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    bool_expression  go to state 176
    relExp           go to state 145
    bitshiftExp      go to state 43
    sumExp           go to state 44
    mulExp           go to state 45
    unaryExp         go to state 46
    value            go to state 47


State 164

   20 tail_inloop: LEFT_CURLY_BRACKET statements_inloop RIGHT_CURLY_BRACKET .

    $default  reduce using rule 20 (tail_inloop)


State 165

   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
   78 do_statement: DO tail_inloop WHILE LEFT_PAREN . bool_expression RIGHT_PAREN SEMICOLON

    IDENT           shift, and go to state 84
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    TRUE_TOKEN      shift, and go to state 142
    FALSE_TOKEN     shift, and go to state 143
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    bool_expression  go to state 177
    relExp           go to state 145
    bitshiftExp      go to state 43
    sumExp           go to state 44
    mulExp           go to state 45
    unaryExp         go to state 46
    value            go to state 47


State 166

   79 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN . LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 178


State 167

  117 one_val: IDENT .  [RIGHT_CURLY_BRACKET, COMMA]
  118        | IDENT . ASSIGN_OP value

    ASSIGN_OP  shift, and go to state 179

    $default  reduce using rule 117 (one_val)


State 168

  114 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET enum_list . RIGHT_CURLY_BRACKET
  116 enum_list: enum_list . COMMA one_val

    RIGHT_CURLY_BRACKET  shift, and go to state 180
    COMMA                shift, and go to state 181


State 169

  115 enum_list: one_val .

    $default  reduce using rule 115 (enum_list)


State 170

  122 arguments: arguments COMMA argument .

    $default  reduce using rule 122 (arguments)


State 171

  120 func_call: IDENT ASSIGN_OP IDENT LEFT_PAREN arguments . RIGHT_PAREN
  122 arguments: arguments . COMMA argument

    RIGHT_PAREN  shift, and go to state 182
    COMMA        shift, and go to state 159


State 172

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   18 tail: LEFT_CURLY_BRACKET . statements RIGHT_CURLY_BRACKET
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30 simpleExp: . simpleExp OR_OP andExp
   31          | . andExp
   32 andExp: . andExp AND_OP
   33       | . bitRelExp
   34 bitRelExp: . bitRelExp BIT_OR_OP relExp
   35          | . bitRelExp AND relExp
   36          | . bitRelExp BIT_XOR_OP relExp
   37          | . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
   75 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   76 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   77 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   78 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   79 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   87 return_statement: . RETURN return_val SEMICOLON
   90 expression_statement: . expression SEMICOLON
   91 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   92           | . statement
   93           | . statements statement
   94 statement: . if_statement
   95          | . while_statement
   96          | . for_statement
   97          | . do_statement
   98          | . switch_statement
   99          | . return_statement
  100          | . expression_statement
  101          | . declarations
  102          | . enum_statement
  103          | . func_call
  114 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  119 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  120          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 94
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    IF              shift, and go to state 95
    WHILE           shift, and go to state 96
    FOR             shift, and go to state 97
    DO              shift, and go to state 98
    SWITCH          shift, and go to state 99
    RETURN          shift, and go to state 100
    ENUM            shift, and go to state 101
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    INTEGER              reduce using rule 12 (beforedecl)
    INTEGER              [reduce using rule 91 (statements)]
    FLOAT                reduce using rule 12 (beforedecl)
    FLOAT                [reduce using rule 91 (statements)]
    DOUBLE               reduce using rule 12 (beforedecl)
    DOUBLE               [reduce using rule 91 (statements)]
    VOID                 reduce using rule 12 (beforedecl)
    VOID                 [reduce using rule 91 (statements)]
    BOOLEAN              reduce using rule 12 (beforedecl)
    BOOLEAN              [reduce using rule 91 (statements)]
    CHAR                 reduce using rule 12 (beforedecl)
    CHAR                 [reduce using rule 91 (statements)]
    CONST                [reduce using rule 91 (statements)]
    IDENT                [reduce using rule 91 (statements)]
    CONST_INT            [reduce using rule 91 (statements)]
    CONST_FLOAT          [reduce using rule 91 (statements)]
    CONST_CHAR           [reduce using rule 91 (statements)]
    STRING_LITERAL       [reduce using rule 91 (statements)]
    IF                   [reduce using rule 91 (statements)]
    WHILE                [reduce using rule 91 (statements)]
    FOR                  [reduce using rule 91 (statements)]
    DO                   [reduce using rule 91 (statements)]
    SWITCH               [reduce using rule 91 (statements)]
    RETURN               [reduce using rule 91 (statements)]
    ENUM                 [reduce using rule 91 (statements)]
    LEFT_PAREN           [reduce using rule 91 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 91 (statements)
    INC_OP               [reduce using rule 91 (statements)]
    DEC_OP               [reduce using rule 91 (statements)]
    NOT_OP               [reduce using rule 91 (statements)]
    $default             reduce using rule 12 (beforedecl)

    beforedecl            go to state 5
    declaration           go to state 102
    declarations          go to state 103
    assign                go to state 37
    expression            go to state 104
    simpleExp             go to state 39
    andExp                go to state 40
    bitRelExp             go to state 41
    relExp                go to state 42
    bitshiftExp           go to state 43
    sumExp                go to state 44
    mulExp                go to state 45
    unaryExp              go to state 46
    value                 go to state 47
    if_statement          go to state 105
    while_statement       go to state 106
    for_statement         go to state 107
    do_statement          go to state 108
    switch_statement      go to state 109
    return_statement      go to state 110
    expression_statement  go to state 111
    statements            go to state 183
    statement             go to state 113
    enum_statement        go to state 114
    func_call             go to state 115


State 173

   70 else_if: . ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   71        | . else_if ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   72        | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   75 if_statement: IF LEFT_PAREN bool_expression RIGHT_PAREN tail . else_if else_part

    ELIF  shift, and go to state 184

    ELIF      [reduce using rule 72 (else_if)]
    $default  reduce using rule 72 (else_if)

    else_if  go to state 185


State 174

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   17 tail: statements .  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30 simpleExp: . simpleExp OR_OP andExp
   31          | . andExp
   32 andExp: . andExp AND_OP
   33       | . bitRelExp
   34 bitRelExp: . bitRelExp BIT_OR_OP relExp
   35          | . bitRelExp AND relExp
   36          | . bitRelExp BIT_XOR_OP relExp
   37          | . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
   75 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   76 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   77 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   78 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   79 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   87 return_statement: . RETURN return_val SEMICOLON
   90 expression_statement: . expression SEMICOLON
   93 statements: statements . statement
   94 statement: . if_statement
   95          | . while_statement
   96          | . for_statement
   97          | . do_statement
   98          | . switch_statement
   99          | . return_statement
  100          | . expression_statement
  101          | . declarations
  102          | . enum_statement
  103          | . func_call
  114 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  119 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  120          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 94
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    IF              shift, and go to state 95
    WHILE           shift, and go to state 96
    FOR             shift, and go to state 97
    DO              shift, and go to state 98
    SWITCH          shift, and go to state 99
    RETURN          shift, and go to state 100
    ENUM            shift, and go to state 101
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    INTEGER              reduce using rule 12 (beforedecl)
    INTEGER              [reduce using rule 17 (tail)]
    FLOAT                reduce using rule 12 (beforedecl)
    FLOAT                [reduce using rule 17 (tail)]
    DOUBLE               reduce using rule 12 (beforedecl)
    DOUBLE               [reduce using rule 17 (tail)]
    VOID                 reduce using rule 12 (beforedecl)
    VOID                 [reduce using rule 17 (tail)]
    BOOLEAN              reduce using rule 12 (beforedecl)
    BOOLEAN              [reduce using rule 17 (tail)]
    CHAR                 reduce using rule 12 (beforedecl)
    CHAR                 [reduce using rule 17 (tail)]
    CONST                [reduce using rule 17 (tail)]
    IDENT                [reduce using rule 17 (tail)]
    CONST_INT            [reduce using rule 17 (tail)]
    CONST_FLOAT          [reduce using rule 17 (tail)]
    CONST_CHAR           [reduce using rule 17 (tail)]
    STRING_LITERAL       [reduce using rule 17 (tail)]
    IF                   [reduce using rule 17 (tail)]
    ELSE                 reduce using rule 17 (tail)
    ELIF                 reduce using rule 17 (tail)
    WHILE                [reduce using rule 17 (tail)]
    FOR                  [reduce using rule 17 (tail)]
    DO                   [reduce using rule 17 (tail)]
    SWITCH               [reduce using rule 17 (tail)]
    RETURN               [reduce using rule 17 (tail)]
    BREAK                reduce using rule 17 (tail)
    CONTINUE             reduce using rule 17 (tail)
    ENUM                 [reduce using rule 17 (tail)]
    LEFT_PAREN           [reduce using rule 17 (tail)]
    RIGHT_CURLY_BRACKET  reduce using rule 17 (tail)
    INC_OP               [reduce using rule 17 (tail)]
    DEC_OP               [reduce using rule 17 (tail)]
    NOT_OP               [reduce using rule 17 (tail)]
    $default             reduce using rule 12 (beforedecl)

    beforedecl            go to state 5
    declaration           go to state 102
    declarations          go to state 103
    assign                go to state 37
    expression            go to state 104
    simpleExp             go to state 39
    andExp                go to state 40
    bitRelExp             go to state 41
    relExp                go to state 42
    bitshiftExp           go to state 43
    sumExp                go to state 44
    mulExp                go to state 45
    unaryExp              go to state 46
    value                 go to state 47
    if_statement          go to state 105
    while_statement       go to state 106
    for_statement         go to state 107
    do_statement          go to state 108
    switch_statement      go to state 109
    return_statement      go to state 110
    expression_statement  go to state 111
    statement             go to state 137
    enum_statement        go to state 114
    func_call             go to state 115


State 175

   76 while_statement: WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop .

    $default  reduce using rule 76 (while_statement)


State 176

   77 for_statement: FOR LEFT_PAREN assign SEMICOLON bool_expression . SEMICOLON expression RIGHT_PAREN tail_inloop

    SEMICOLON  shift, and go to state 186


State 177

   78 do_statement: DO tail_inloop WHILE LEFT_PAREN bool_expression . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN  shift, and go to state 187


State 178

   79 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET . cases RIGHT_CURLY_BRACKET
   80 cases: . case
   81      | . cases case
   82      | . cases default
   84 case: . CASE expression COLON statements BREAK SEMICOLON

    CASE  shift, and go to state 188

    cases  go to state 189
    case   go to state 190


State 179

   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
  118 one_val: IDENT ASSIGN_OP . value

    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32

    value  go to state 191


State 180

  114 enum_statement: ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET .

    $default  reduce using rule 114 (enum_statement)


State 181

  116 enum_list: enum_list COMMA . one_val
  117 one_val: . IDENT
  118        | . IDENT ASSIGN_OP value

    IDENT  shift, and go to state 167

    one_val  go to state 192


State 182

  120 func_call: IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN .

    $default  reduce using rule 120 (func_call)


State 183

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   18 tail: LEFT_CURLY_BRACKET statements . RIGHT_CURLY_BRACKET
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30 simpleExp: . simpleExp OR_OP andExp
   31          | . andExp
   32 andExp: . andExp AND_OP
   33       | . bitRelExp
   34 bitRelExp: . bitRelExp BIT_OR_OP relExp
   35          | . bitRelExp AND relExp
   36          | . bitRelExp BIT_XOR_OP relExp
   37          | . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
   75 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   76 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   77 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   78 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   79 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   87 return_statement: . RETURN return_val SEMICOLON
   90 expression_statement: . expression SEMICOLON
   93 statements: statements . statement
   94 statement: . if_statement
   95          | . while_statement
   96          | . for_statement
   97          | . do_statement
   98          | . switch_statement
   99          | . return_statement
  100          | . expression_statement
  101          | . declarations
  102          | . enum_statement
  103          | . func_call
  114 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  119 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  120          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST                shift, and go to state 1
    IDENT                shift, and go to state 94
    CONST_INT            shift, and go to state 29
    CONST_FLOAT          shift, and go to state 30
    CONST_CHAR           shift, and go to state 31
    STRING_LITERAL       shift, and go to state 32
    IF                   shift, and go to state 95
    WHILE                shift, and go to state 96
    FOR                  shift, and go to state 97
    DO                   shift, and go to state 98
    SWITCH               shift, and go to state 99
    RETURN               shift, and go to state 100
    ENUM                 shift, and go to state 101
    LEFT_PAREN           shift, and go to state 33
    RIGHT_CURLY_BRACKET  shift, and go to state 193
    INC_OP               shift, and go to state 34
    DEC_OP               shift, and go to state 35
    NOT_OP               shift, and go to state 36

    $default  reduce using rule 12 (beforedecl)

    beforedecl            go to state 5
    declaration           go to state 102
    declarations          go to state 103
    assign                go to state 37
    expression            go to state 104
    simpleExp             go to state 39
    andExp                go to state 40
    bitRelExp             go to state 41
    relExp                go to state 42
    bitshiftExp           go to state 43
    sumExp                go to state 44
    mulExp                go to state 45
    unaryExp              go to state 46
    value                 go to state 47
    if_statement          go to state 105
    while_statement       go to state 106
    for_statement         go to state 107
    do_statement          go to state 108
    switch_statement      go to state 109
    return_statement      go to state 110
    expression_statement  go to state 111
    statement             go to state 137
    enum_statement        go to state 114
    func_call             go to state 115


State 184

   70 else_if: ELIF . LEFT_PAREN bool_expression RIGHT_PAREN tail

    LEFT_PAREN  shift, and go to state 194


State 185

   71 else_if: else_if . ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail
   73 else_part: . ELSE tail
   74          | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   75 if_statement: IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if . else_part

    ELSE  shift, and go to state 195
    ELIF  shift, and go to state 196

    ELSE      [reduce using rule 74 (else_part)]
    ELIF      [reduce using rule 74 (else_part)]
    $default  reduce using rule 74 (else_part)

    else_part  go to state 197


State 186

   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30 simpleExp: . simpleExp OR_OP andExp
   31          | . andExp
   32 andExp: . andExp AND_OP
   33       | . bitRelExp
   34 bitRelExp: . bitRelExp BIT_OR_OP relExp
   35          | . bitRelExp AND relExp
   36          | . bitRelExp BIT_XOR_OP relExp
   37          | . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
   77 for_statement: FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON . expression RIGHT_PAREN tail_inloop

    IDENT           shift, and go to state 28
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    assign       go to state 37
    expression   go to state 198
    simpleExp    go to state 39
    andExp       go to state 40
    bitRelExp    go to state 41
    relExp       go to state 42
    bitshiftExp  go to state 43
    sumExp       go to state 44
    mulExp       go to state 45
    unaryExp     go to state 46
    value        go to state 47


State 187

   78 do_statement: DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN . SEMICOLON

    SEMICOLON  shift, and go to state 199


State 188

   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30 simpleExp: . simpleExp OR_OP andExp
   31          | . andExp
   32 andExp: . andExp AND_OP
   33       | . bitRelExp
   34 bitRelExp: . bitRelExp BIT_OR_OP relExp
   35          | . bitRelExp AND relExp
   36          | . bitRelExp BIT_XOR_OP relExp
   37          | . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
   84 case: CASE . expression COLON statements BREAK SEMICOLON

    IDENT           shift, and go to state 28
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    assign       go to state 37
    expression   go to state 200
    simpleExp    go to state 39
    andExp       go to state 40
    bitRelExp    go to state 41
    relExp       go to state 42
    bitshiftExp  go to state 43
    sumExp       go to state 44
    mulExp       go to state 45
    unaryExp     go to state 46
    value        go to state 47


State 189

   79 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases . RIGHT_CURLY_BRACKET
   81 cases: cases . case
   82      | cases . default
   83 default: . DEFAULT COLON statements BREAK SEMICOLON
   84 case: . CASE expression COLON statements BREAK SEMICOLON

    CASE                 shift, and go to state 188
    DEFAULT              shift, and go to state 201
    RIGHT_CURLY_BRACKET  shift, and go to state 202

    default  go to state 203
    case     go to state 204


State 190

   80 cases: case .

    $default  reduce using rule 80 (cases)


State 191

  118 one_val: IDENT ASSIGN_OP value .

    $default  reduce using rule 118 (one_val)


State 192

  116 enum_list: enum_list COMMA one_val .

    $default  reduce using rule 116 (enum_list)


State 193

   18 tail: LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET .

    $default  reduce using rule 18 (tail)


State 194

   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
   70 else_if: ELIF LEFT_PAREN . bool_expression RIGHT_PAREN tail

    IDENT           shift, and go to state 84
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    TRUE_TOKEN      shift, and go to state 142
    FALSE_TOKEN     shift, and go to state 143
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    bool_expression  go to state 205
    relExp           go to state 145
    bitshiftExp      go to state 43
    sumExp           go to state 44
    mulExp           go to state 45
    unaryExp         go to state 46
    value            go to state 47


State 195

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   17 tail: . statements
   18     | . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30 simpleExp: . simpleExp OR_OP andExp
   31          | . andExp
   32 andExp: . andExp AND_OP
   33       | . bitRelExp
   34 bitRelExp: . bitRelExp BIT_OR_OP relExp
   35          | . bitRelExp AND relExp
   36          | . bitRelExp BIT_XOR_OP relExp
   37          | . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
   73 else_part: ELSE . tail
   75 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   76 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   77 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   78 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   79 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   87 return_statement: . RETURN return_val SEMICOLON
   90 expression_statement: . expression SEMICOLON
   91 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   92           | . statement
   93           | . statements statement
   94 statement: . if_statement
   95          | . while_statement
   96          | . for_statement
   97          | . do_statement
   98          | . switch_statement
   99          | . return_statement
  100          | . expression_statement
  101          | . declarations
  102          | . enum_statement
  103          | . func_call
  114 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  119 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  120          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST               shift, and go to state 1
    IDENT               shift, and go to state 94
    CONST_INT           shift, and go to state 29
    CONST_FLOAT         shift, and go to state 30
    CONST_CHAR          shift, and go to state 31
    STRING_LITERAL      shift, and go to state 32
    IF                  shift, and go to state 95
    WHILE               shift, and go to state 96
    FOR                 shift, and go to state 97
    DO                  shift, and go to state 98
    SWITCH              shift, and go to state 99
    RETURN              shift, and go to state 100
    ENUM                shift, and go to state 101
    LEFT_PAREN          shift, and go to state 33
    LEFT_CURLY_BRACKET  shift, and go to state 172
    INC_OP              shift, and go to state 34
    DEC_OP              shift, and go to state 35
    NOT_OP              shift, and go to state 36

    INTEGER              reduce using rule 12 (beforedecl)
    INTEGER              [reduce using rule 91 (statements)]
    FLOAT                reduce using rule 12 (beforedecl)
    FLOAT                [reduce using rule 91 (statements)]
    DOUBLE               reduce using rule 12 (beforedecl)
    DOUBLE               [reduce using rule 91 (statements)]
    VOID                 reduce using rule 12 (beforedecl)
    VOID                 [reduce using rule 91 (statements)]
    BOOLEAN              reduce using rule 12 (beforedecl)
    BOOLEAN              [reduce using rule 91 (statements)]
    CHAR                 reduce using rule 12 (beforedecl)
    CHAR                 [reduce using rule 91 (statements)]
    CONST                [reduce using rule 91 (statements)]
    IDENT                [reduce using rule 91 (statements)]
    CONST_INT            [reduce using rule 91 (statements)]
    CONST_FLOAT          [reduce using rule 91 (statements)]
    CONST_CHAR           [reduce using rule 91 (statements)]
    STRING_LITERAL       [reduce using rule 91 (statements)]
    IF                   [reduce using rule 91 (statements)]
    ELSE                 reduce using rule 91 (statements)
    ELIF                 reduce using rule 91 (statements)
    WHILE                [reduce using rule 91 (statements)]
    FOR                  [reduce using rule 91 (statements)]
    DO                   [reduce using rule 91 (statements)]
    SWITCH               [reduce using rule 91 (statements)]
    RETURN               [reduce using rule 91 (statements)]
    BREAK                reduce using rule 91 (statements)
    CONTINUE             reduce using rule 91 (statements)
    ENUM                 [reduce using rule 91 (statements)]
    LEFT_PAREN           [reduce using rule 91 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 91 (statements)
    INC_OP               [reduce using rule 91 (statements)]
    DEC_OP               [reduce using rule 91 (statements)]
    NOT_OP               [reduce using rule 91 (statements)]
    $default             reduce using rule 12 (beforedecl)

    beforedecl            go to state 5
    declaration           go to state 102
    declarations          go to state 103
    tail                  go to state 206
    assign                go to state 37
    expression            go to state 104
    simpleExp             go to state 39
    andExp                go to state 40
    bitRelExp             go to state 41
    relExp                go to state 42
    bitshiftExp           go to state 43
    sumExp                go to state 44
    mulExp                go to state 45
    unaryExp              go to state 46
    value                 go to state 47
    if_statement          go to state 105
    while_statement       go to state 106
    for_statement         go to state 107
    do_statement          go to state 108
    switch_statement      go to state 109
    return_statement      go to state 110
    expression_statement  go to state 111
    statements            go to state 174
    statement             go to state 113
    enum_statement        go to state 114
    func_call             go to state 115


State 196

   71 else_if: else_if ELIF . LEFT_PAREN bool_expression RIGHT_PAREN tail

    LEFT_PAREN  shift, and go to state 207


State 197

   75 if_statement: IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part .

    $default  reduce using rule 75 (if_statement)


State 198

   77 for_statement: FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression . RIGHT_PAREN tail_inloop

    RIGHT_PAREN  shift, and go to state 208


State 199

   78 do_statement: DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON .

    $default  reduce using rule 78 (do_statement)


State 200

   84 case: CASE expression . COLON statements BREAK SEMICOLON

    COLON  shift, and go to state 209


State 201

   83 default: DEFAULT . COLON statements BREAK SEMICOLON

    COLON  shift, and go to state 210


State 202

   79 switch_statement: SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET .

    $default  reduce using rule 79 (switch_statement)


State 203

   82 cases: cases default .

    $default  reduce using rule 82 (cases)


State 204

   81 cases: cases case .

    $default  reduce using rule 81 (cases)


State 205

   70 else_if: ELIF LEFT_PAREN bool_expression . RIGHT_PAREN tail

    RIGHT_PAREN  shift, and go to state 211


State 206

   73 else_part: ELSE tail .

    $default  reduce using rule 73 (else_part)


State 207

   21 bool_expression: . relExp
   22                | . TRUE_TOKEN
   23                | . FALSE_TOKEN
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
   71 else_if: else_if ELIF LEFT_PAREN . bool_expression RIGHT_PAREN tail

    IDENT           shift, and go to state 84
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    TRUE_TOKEN      shift, and go to state 142
    FALSE_TOKEN     shift, and go to state 143
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    bool_expression  go to state 212
    relExp           go to state 145
    bitshiftExp      go to state 43
    sumExp           go to state 44
    mulExp           go to state 45
    unaryExp         go to state 46
    value            go to state 47


State 208

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   19 tail_inloop: . statements_inloop
   20            | . LEFT_CURLY_BRACKET statements_inloop RIGHT_CURLY_BRACKET
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30 simpleExp: . simpleExp OR_OP andExp
   31          | . andExp
   32 andExp: . andExp AND_OP
   33       | . bitRelExp
   34 bitRelExp: . bitRelExp BIT_OR_OP relExp
   35          | . bitRelExp AND relExp
   36          | . bitRelExp BIT_XOR_OP relExp
   37          | . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
   75 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   76 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   77 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   77              | FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN . tail_inloop
   78 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   79 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   87 return_statement: . RETURN return_val SEMICOLON
   88 break_statement: . BREAK SEMICOLON
   89 continue_statement: . CONTINUE SEMICOLON
   90 expression_statement: . expression SEMICOLON
   94 statement: . if_statement
   95          | . while_statement
   96          | . for_statement
   97          | . do_statement
   98          | . switch_statement
   99          | . return_statement
  100          | . expression_statement
  101          | . declarations
  102          | . enum_statement
  103          | . func_call
  104 statement_inloop: . statement
  105                 | . break_statement
  106                 | . continue_statement
  107 statements_inloop: . statement_inloop
  108                  | . statements_inloop statement_inloop
  114 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  119 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  120          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST               shift, and go to state 1
    IDENT               shift, and go to state 94
    CONST_INT           shift, and go to state 29
    CONST_FLOAT         shift, and go to state 30
    CONST_CHAR          shift, and go to state 31
    STRING_LITERAL      shift, and go to state 32
    IF                  shift, and go to state 95
    WHILE               shift, and go to state 96
    FOR                 shift, and go to state 97
    DO                  shift, and go to state 98
    SWITCH              shift, and go to state 99
    RETURN              shift, and go to state 100
    BREAK               shift, and go to state 121
    CONTINUE            shift, and go to state 122
    ENUM                shift, and go to state 101
    LEFT_PAREN          shift, and go to state 33
    LEFT_CURLY_BRACKET  shift, and go to state 123
    INC_OP              shift, and go to state 34
    DEC_OP              shift, and go to state 35
    NOT_OP              shift, and go to state 36

    $default  reduce using rule 12 (beforedecl)

    beforedecl            go to state 5
    declaration           go to state 102
    declarations          go to state 103
    tail_inloop           go to state 213
    assign                go to state 37
    expression            go to state 104
    simpleExp             go to state 39
    andExp                go to state 40
    bitRelExp             go to state 41
    relExp                go to state 42
    bitshiftExp           go to state 43
    sumExp                go to state 44
    mulExp                go to state 45
    unaryExp              go to state 46
    value                 go to state 47
    if_statement          go to state 105
    while_statement       go to state 106
    for_statement         go to state 107
    do_statement          go to state 108
    switch_statement      go to state 109
    return_statement      go to state 110
    break_statement       go to state 125
    continue_statement    go to state 126
    expression_statement  go to state 111
    statement             go to state 127
    statement_inloop      go to state 128
    statements_inloop     go to state 129
    enum_statement        go to state 114
    func_call             go to state 115


State 209

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30 simpleExp: . simpleExp OR_OP andExp
   31          | . andExp
   32 andExp: . andExp AND_OP
   33       | . bitRelExp
   34 bitRelExp: . bitRelExp BIT_OR_OP relExp
   35          | . bitRelExp AND relExp
   36          | . bitRelExp BIT_XOR_OP relExp
   37          | . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
   75 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   76 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   77 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   78 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   79 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   84 case: CASE expression COLON . statements BREAK SEMICOLON
   87 return_statement: . RETURN return_val SEMICOLON
   90 expression_statement: . expression SEMICOLON
   91 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, ENUM, LEFT_PAREN, INC_OP, DEC_OP, NOT_OP]
   92           | . statement
   93           | . statements statement
   94 statement: . if_statement
   95          | . while_statement
   96          | . for_statement
   97          | . do_statement
   98          | . switch_statement
   99          | . return_statement
  100          | . expression_statement
  101          | . declarations
  102          | . enum_statement
  103          | . func_call
  114 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  119 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  120          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 94
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    IF              shift, and go to state 95
    WHILE           shift, and go to state 96
    FOR             shift, and go to state 97
    DO              shift, and go to state 98
    SWITCH          shift, and go to state 99
    RETURN          shift, and go to state 100
    ENUM            shift, and go to state 101
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    INTEGER         reduce using rule 12 (beforedecl)
    INTEGER         [reduce using rule 91 (statements)]
    FLOAT           reduce using rule 12 (beforedecl)
    FLOAT           [reduce using rule 91 (statements)]
    DOUBLE          reduce using rule 12 (beforedecl)
    DOUBLE          [reduce using rule 91 (statements)]
    VOID            reduce using rule 12 (beforedecl)
    VOID            [reduce using rule 91 (statements)]
    BOOLEAN         reduce using rule 12 (beforedecl)
    BOOLEAN         [reduce using rule 91 (statements)]
    CHAR            reduce using rule 12 (beforedecl)
    CHAR            [reduce using rule 91 (statements)]
    CONST           [reduce using rule 91 (statements)]
    IDENT           [reduce using rule 91 (statements)]
    CONST_INT       [reduce using rule 91 (statements)]
    CONST_FLOAT     [reduce using rule 91 (statements)]
    CONST_CHAR      [reduce using rule 91 (statements)]
    STRING_LITERAL  [reduce using rule 91 (statements)]
    IF              [reduce using rule 91 (statements)]
    WHILE           [reduce using rule 91 (statements)]
    FOR             [reduce using rule 91 (statements)]
    DO              [reduce using rule 91 (statements)]
    SWITCH          [reduce using rule 91 (statements)]
    RETURN          [reduce using rule 91 (statements)]
    BREAK           reduce using rule 91 (statements)
    ENUM            [reduce using rule 91 (statements)]
    LEFT_PAREN      [reduce using rule 91 (statements)]
    INC_OP          [reduce using rule 91 (statements)]
    DEC_OP          [reduce using rule 91 (statements)]
    NOT_OP          [reduce using rule 91 (statements)]
    $default        reduce using rule 12 (beforedecl)

    beforedecl            go to state 5
    declaration           go to state 102
    declarations          go to state 103
    assign                go to state 37
    expression            go to state 104
    simpleExp             go to state 39
    andExp                go to state 40
    bitRelExp             go to state 41
    relExp                go to state 42
    bitshiftExp           go to state 43
    sumExp                go to state 44
    mulExp                go to state 45
    unaryExp              go to state 46
    value                 go to state 47
    if_statement          go to state 105
    while_statement       go to state 106
    for_statement         go to state 107
    do_statement          go to state 108
    switch_statement      go to state 109
    return_statement      go to state 110
    expression_statement  go to state 111
    statements            go to state 214
    statement             go to state 113
    enum_statement        go to state 114
    func_call             go to state 115


State 210

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30 simpleExp: . simpleExp OR_OP andExp
   31          | . andExp
   32 andExp: . andExp AND_OP
   33       | . bitRelExp
   34 bitRelExp: . bitRelExp BIT_OR_OP relExp
   35          | . bitRelExp AND relExp
   36          | . bitRelExp BIT_XOR_OP relExp
   37          | . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
   75 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   76 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   77 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   78 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   79 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   83 default: DEFAULT COLON . statements BREAK SEMICOLON
   87 return_statement: . RETURN return_val SEMICOLON
   90 expression_statement: . expression SEMICOLON
   91 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, ENUM, LEFT_PAREN, INC_OP, DEC_OP, NOT_OP]
   92           | . statement
   93           | . statements statement
   94 statement: . if_statement
   95          | . while_statement
   96          | . for_statement
   97          | . do_statement
   98          | . switch_statement
   99          | . return_statement
  100          | . expression_statement
  101          | . declarations
  102          | . enum_statement
  103          | . func_call
  114 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  119 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  120          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 94
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    IF              shift, and go to state 95
    WHILE           shift, and go to state 96
    FOR             shift, and go to state 97
    DO              shift, and go to state 98
    SWITCH          shift, and go to state 99
    RETURN          shift, and go to state 100
    ENUM            shift, and go to state 101
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    INTEGER         reduce using rule 12 (beforedecl)
    INTEGER         [reduce using rule 91 (statements)]
    FLOAT           reduce using rule 12 (beforedecl)
    FLOAT           [reduce using rule 91 (statements)]
    DOUBLE          reduce using rule 12 (beforedecl)
    DOUBLE          [reduce using rule 91 (statements)]
    VOID            reduce using rule 12 (beforedecl)
    VOID            [reduce using rule 91 (statements)]
    BOOLEAN         reduce using rule 12 (beforedecl)
    BOOLEAN         [reduce using rule 91 (statements)]
    CHAR            reduce using rule 12 (beforedecl)
    CHAR            [reduce using rule 91 (statements)]
    CONST           [reduce using rule 91 (statements)]
    IDENT           [reduce using rule 91 (statements)]
    CONST_INT       [reduce using rule 91 (statements)]
    CONST_FLOAT     [reduce using rule 91 (statements)]
    CONST_CHAR      [reduce using rule 91 (statements)]
    STRING_LITERAL  [reduce using rule 91 (statements)]
    IF              [reduce using rule 91 (statements)]
    WHILE           [reduce using rule 91 (statements)]
    FOR             [reduce using rule 91 (statements)]
    DO              [reduce using rule 91 (statements)]
    SWITCH          [reduce using rule 91 (statements)]
    RETURN          [reduce using rule 91 (statements)]
    BREAK           reduce using rule 91 (statements)
    ENUM            [reduce using rule 91 (statements)]
    LEFT_PAREN      [reduce using rule 91 (statements)]
    INC_OP          [reduce using rule 91 (statements)]
    DEC_OP          [reduce using rule 91 (statements)]
    NOT_OP          [reduce using rule 91 (statements)]
    $default        reduce using rule 12 (beforedecl)

    beforedecl            go to state 5
    declaration           go to state 102
    declarations          go to state 103
    assign                go to state 37
    expression            go to state 104
    simpleExp             go to state 39
    andExp                go to state 40
    bitRelExp             go to state 41
    relExp                go to state 42
    bitshiftExp           go to state 43
    sumExp                go to state 44
    mulExp                go to state 45
    unaryExp              go to state 46
    value                 go to state 47
    if_statement          go to state 105
    while_statement       go to state 106
    for_statement         go to state 107
    do_statement          go to state 108
    switch_statement      go to state 109
    return_statement      go to state 110
    expression_statement  go to state 111
    statements            go to state 215
    statement             go to state 113
    enum_statement        go to state 114
    func_call             go to state 115


State 211

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   17 tail: . statements
   18     | . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30 simpleExp: . simpleExp OR_OP andExp
   31          | . andExp
   32 andExp: . andExp AND_OP
   33       | . bitRelExp
   34 bitRelExp: . bitRelExp BIT_OR_OP relExp
   35          | . bitRelExp AND relExp
   36          | . bitRelExp BIT_XOR_OP relExp
   37          | . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
   70 else_if: ELIF LEFT_PAREN bool_expression RIGHT_PAREN . tail
   75 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   76 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   77 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   78 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   79 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   87 return_statement: . RETURN return_val SEMICOLON
   90 expression_statement: . expression SEMICOLON
   91 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   92           | . statement
   93           | . statements statement
   94 statement: . if_statement
   95          | . while_statement
   96          | . for_statement
   97          | . do_statement
   98          | . switch_statement
   99          | . return_statement
  100          | . expression_statement
  101          | . declarations
  102          | . enum_statement
  103          | . func_call
  114 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  119 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  120          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST               shift, and go to state 1
    IDENT               shift, and go to state 94
    CONST_INT           shift, and go to state 29
    CONST_FLOAT         shift, and go to state 30
    CONST_CHAR          shift, and go to state 31
    STRING_LITERAL      shift, and go to state 32
    IF                  shift, and go to state 95
    WHILE               shift, and go to state 96
    FOR                 shift, and go to state 97
    DO                  shift, and go to state 98
    SWITCH              shift, and go to state 99
    RETURN              shift, and go to state 100
    ENUM                shift, and go to state 101
    LEFT_PAREN          shift, and go to state 33
    LEFT_CURLY_BRACKET  shift, and go to state 172
    INC_OP              shift, and go to state 34
    DEC_OP              shift, and go to state 35
    NOT_OP              shift, and go to state 36

    INTEGER              reduce using rule 12 (beforedecl)
    INTEGER              [reduce using rule 91 (statements)]
    FLOAT                reduce using rule 12 (beforedecl)
    FLOAT                [reduce using rule 91 (statements)]
    DOUBLE               reduce using rule 12 (beforedecl)
    DOUBLE               [reduce using rule 91 (statements)]
    VOID                 reduce using rule 12 (beforedecl)
    VOID                 [reduce using rule 91 (statements)]
    BOOLEAN              reduce using rule 12 (beforedecl)
    BOOLEAN              [reduce using rule 91 (statements)]
    CHAR                 reduce using rule 12 (beforedecl)
    CHAR                 [reduce using rule 91 (statements)]
    CONST                [reduce using rule 91 (statements)]
    IDENT                [reduce using rule 91 (statements)]
    CONST_INT            [reduce using rule 91 (statements)]
    CONST_FLOAT          [reduce using rule 91 (statements)]
    CONST_CHAR           [reduce using rule 91 (statements)]
    STRING_LITERAL       [reduce using rule 91 (statements)]
    IF                   [reduce using rule 91 (statements)]
    ELSE                 reduce using rule 91 (statements)
    ELIF                 reduce using rule 91 (statements)
    WHILE                [reduce using rule 91 (statements)]
    FOR                  [reduce using rule 91 (statements)]
    DO                   [reduce using rule 91 (statements)]
    SWITCH               [reduce using rule 91 (statements)]
    RETURN               [reduce using rule 91 (statements)]
    BREAK                reduce using rule 91 (statements)
    CONTINUE             reduce using rule 91 (statements)
    ENUM                 [reduce using rule 91 (statements)]
    LEFT_PAREN           [reduce using rule 91 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 91 (statements)
    INC_OP               [reduce using rule 91 (statements)]
    DEC_OP               [reduce using rule 91 (statements)]
    NOT_OP               [reduce using rule 91 (statements)]
    $default             reduce using rule 12 (beforedecl)

    beforedecl            go to state 5
    declaration           go to state 102
    declarations          go to state 103
    tail                  go to state 216
    assign                go to state 37
    expression            go to state 104
    simpleExp             go to state 39
    andExp                go to state 40
    bitRelExp             go to state 41
    relExp                go to state 42
    bitshiftExp           go to state 43
    sumExp                go to state 44
    mulExp                go to state 45
    unaryExp              go to state 46
    value                 go to state 47
    if_statement          go to state 105
    while_statement       go to state 106
    for_statement         go to state 107
    do_statement          go to state 108
    switch_statement      go to state 109
    return_statement      go to state 110
    expression_statement  go to state 111
    statements            go to state 174
    statement             go to state 113
    enum_statement        go to state 114
    func_call             go to state 115


State 212

   71 else_if: else_if ELIF LEFT_PAREN bool_expression . RIGHT_PAREN tail

    RIGHT_PAREN  shift, and go to state 217


State 213

   77 for_statement: FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop .

    $default  reduce using rule 77 (for_statement)


State 214

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30 simpleExp: . simpleExp OR_OP andExp
   31          | . andExp
   32 andExp: . andExp AND_OP
   33       | . bitRelExp
   34 bitRelExp: . bitRelExp BIT_OR_OP relExp
   35          | . bitRelExp AND relExp
   36          | . bitRelExp BIT_XOR_OP relExp
   37          | . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
   75 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   76 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   77 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   78 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   79 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   84 case: CASE expression COLON statements . BREAK SEMICOLON
   87 return_statement: . RETURN return_val SEMICOLON
   90 expression_statement: . expression SEMICOLON
   93 statements: statements . statement
   94 statement: . if_statement
   95          | . while_statement
   96          | . for_statement
   97          | . do_statement
   98          | . switch_statement
   99          | . return_statement
  100          | . expression_statement
  101          | . declarations
  102          | . enum_statement
  103          | . func_call
  114 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  119 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  120          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 94
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    IF              shift, and go to state 95
    WHILE           shift, and go to state 96
    FOR             shift, and go to state 97
    DO              shift, and go to state 98
    SWITCH          shift, and go to state 99
    RETURN          shift, and go to state 100
    BREAK           shift, and go to state 218
    ENUM            shift, and go to state 101
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    $default  reduce using rule 12 (beforedecl)

    beforedecl            go to state 5
    declaration           go to state 102
    declarations          go to state 103
    assign                go to state 37
    expression            go to state 104
    simpleExp             go to state 39
    andExp                go to state 40
    bitRelExp             go to state 41
    relExp                go to state 42
    bitshiftExp           go to state 43
    sumExp                go to state 44
    mulExp                go to state 45
    unaryExp              go to state 46
    value                 go to state 47
    if_statement          go to state 105
    while_statement       go to state 106
    for_statement         go to state 107
    do_statement          go to state 108
    switch_statement      go to state 109
    return_statement      go to state 110
    expression_statement  go to state 111
    statement             go to state 137
    enum_statement        go to state 114
    func_call             go to state 115


State 215

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30 simpleExp: . simpleExp OR_OP andExp
   31          | . andExp
   32 andExp: . andExp AND_OP
   33       | . bitRelExp
   34 bitRelExp: . bitRelExp BIT_OR_OP relExp
   35          | . bitRelExp AND relExp
   36          | . bitRelExp BIT_XOR_OP relExp
   37          | . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
   75 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   76 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   77 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   78 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   79 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   83 default: DEFAULT COLON statements . BREAK SEMICOLON
   87 return_statement: . RETURN return_val SEMICOLON
   90 expression_statement: . expression SEMICOLON
   93 statements: statements . statement
   94 statement: . if_statement
   95          | . while_statement
   96          | . for_statement
   97          | . do_statement
   98          | . switch_statement
   99          | . return_statement
  100          | . expression_statement
  101          | . declarations
  102          | . enum_statement
  103          | . func_call
  114 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  119 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  120          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST           shift, and go to state 1
    IDENT           shift, and go to state 94
    CONST_INT       shift, and go to state 29
    CONST_FLOAT     shift, and go to state 30
    CONST_CHAR      shift, and go to state 31
    STRING_LITERAL  shift, and go to state 32
    IF              shift, and go to state 95
    WHILE           shift, and go to state 96
    FOR             shift, and go to state 97
    DO              shift, and go to state 98
    SWITCH          shift, and go to state 99
    RETURN          shift, and go to state 100
    BREAK           shift, and go to state 219
    ENUM            shift, and go to state 101
    LEFT_PAREN      shift, and go to state 33
    INC_OP          shift, and go to state 34
    DEC_OP          shift, and go to state 35
    NOT_OP          shift, and go to state 36

    $default  reduce using rule 12 (beforedecl)

    beforedecl            go to state 5
    declaration           go to state 102
    declarations          go to state 103
    assign                go to state 37
    expression            go to state 104
    simpleExp             go to state 39
    andExp                go to state 40
    bitRelExp             go to state 41
    relExp                go to state 42
    bitshiftExp           go to state 43
    sumExp                go to state 44
    mulExp                go to state 45
    unaryExp              go to state 46
    value                 go to state 47
    if_statement          go to state 105
    while_statement       go to state 106
    for_statement         go to state 107
    do_statement          go to state 108
    switch_statement      go to state 109
    return_statement      go to state 110
    expression_statement  go to state 111
    statement             go to state 137
    enum_statement        go to state 114
    func_call             go to state 115


State 216

   70 else_if: ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail .

    $default  reduce using rule 70 (else_if)


State 217

   11 beforedecl: . CONST
   12           | . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR]
   13 declaration: . beforedecl type IDENT SEMICOLON
   14            | . beforedecl type IDENT ASSIGN_OP expression SEMICOLON
   15 declarations: . declaration
   16             | . declarations declaration
   17 tail: . statements
   18     | . LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET
   24 assign: . IDENT ASSIGN_OP expression
   25 expression: . assign
   26           | . IDENT INC_OP
   27           | . IDENT DEC_OP
   28           | . simpleExp
   29           | . IDENT
   30 simpleExp: . simpleExp OR_OP andExp
   31          | . andExp
   32 andExp: . andExp AND_OP
   33       | . bitRelExp
   34 bitRelExp: . bitRelExp BIT_OR_OP relExp
   35          | . bitRelExp AND relExp
   36          | . bitRelExp BIT_XOR_OP relExp
   37          | . relExp
   46 relExp: . relExp op bitshiftExp
   47       | . bitshiftExp
   48 bitshiftExp: . bitshiftExp BIT_LSHIFT_OP sumExp
   49            | . bitshiftExp BIT_RSHIFT_OP sumExp
   50            | . sumExp
   56 sumExp: . sumExp pls_min mulExp
   57       | . mulExp
   58 mulExp: . mulExp mul_div unaryExp
   59       | . unaryExp
   60 unaryExp: . INC_OP IDENT
   61         | . DEC_OP IDENT
   62         | . NOT_OP IDENT
   63         | . IDENT
   64         | . value
   65         | . LEFT_PAREN expression RIGHT_PAREN
   66 value: . CONST_INT
   67      | . CONST_FLOAT
   68      | . CONST_CHAR
   69      | . STRING_LITERAL
   71 else_if: else_if ELIF LEFT_PAREN bool_expression RIGHT_PAREN . tail
   75 if_statement: . IF LEFT_PAREN bool_expression RIGHT_PAREN tail else_if else_part
   76 while_statement: . WHILE LEFT_PAREN bool_expression RIGHT_PAREN tail_inloop
   77 for_statement: . FOR LEFT_PAREN assign SEMICOLON bool_expression SEMICOLON expression RIGHT_PAREN tail_inloop
   78 do_statement: . DO tail_inloop WHILE LEFT_PAREN bool_expression RIGHT_PAREN SEMICOLON
   79 switch_statement: . SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET
   87 return_statement: . RETURN return_val SEMICOLON
   90 expression_statement: . expression SEMICOLON
   91 statements: . %empty  [INTEGER, FLOAT, DOUBLE, VOID, BOOLEAN, CHAR, CONST, IDENT, CONST_INT, CONST_FLOAT, CONST_CHAR, STRING_LITERAL, IF, ELSE, ELIF, WHILE, FOR, DO, SWITCH, RETURN, BREAK, CONTINUE, ENUM, LEFT_PAREN, RIGHT_CURLY_BRACKET, INC_OP, DEC_OP, NOT_OP]
   92           | . statement
   93           | . statements statement
   94 statement: . if_statement
   95          | . while_statement
   96          | . for_statement
   97          | . do_statement
   98          | . switch_statement
   99          | . return_statement
  100          | . expression_statement
  101          | . declarations
  102          | . enum_statement
  103          | . func_call
  114 enum_statement: . ENUM IDENT LEFT_CURLY_BRACKET enum_list RIGHT_CURLY_BRACKET
  119 func_call: . IDENT LEFT_PAREN arguments RIGHT_PAREN
  120          | . IDENT ASSIGN_OP IDENT LEFT_PAREN arguments RIGHT_PAREN

    CONST               shift, and go to state 1
    IDENT               shift, and go to state 94
    CONST_INT           shift, and go to state 29
    CONST_FLOAT         shift, and go to state 30
    CONST_CHAR          shift, and go to state 31
    STRING_LITERAL      shift, and go to state 32
    IF                  shift, and go to state 95
    WHILE               shift, and go to state 96
    FOR                 shift, and go to state 97
    DO                  shift, and go to state 98
    SWITCH              shift, and go to state 99
    RETURN              shift, and go to state 100
    ENUM                shift, and go to state 101
    LEFT_PAREN          shift, and go to state 33
    LEFT_CURLY_BRACKET  shift, and go to state 172
    INC_OP              shift, and go to state 34
    DEC_OP              shift, and go to state 35
    NOT_OP              shift, and go to state 36

    INTEGER              reduce using rule 12 (beforedecl)
    INTEGER              [reduce using rule 91 (statements)]
    FLOAT                reduce using rule 12 (beforedecl)
    FLOAT                [reduce using rule 91 (statements)]
    DOUBLE               reduce using rule 12 (beforedecl)
    DOUBLE               [reduce using rule 91 (statements)]
    VOID                 reduce using rule 12 (beforedecl)
    VOID                 [reduce using rule 91 (statements)]
    BOOLEAN              reduce using rule 12 (beforedecl)
    BOOLEAN              [reduce using rule 91 (statements)]
    CHAR                 reduce using rule 12 (beforedecl)
    CHAR                 [reduce using rule 91 (statements)]
    CONST                [reduce using rule 91 (statements)]
    IDENT                [reduce using rule 91 (statements)]
    CONST_INT            [reduce using rule 91 (statements)]
    CONST_FLOAT          [reduce using rule 91 (statements)]
    CONST_CHAR           [reduce using rule 91 (statements)]
    STRING_LITERAL       [reduce using rule 91 (statements)]
    IF                   [reduce using rule 91 (statements)]
    ELSE                 reduce using rule 91 (statements)
    ELIF                 reduce using rule 91 (statements)
    WHILE                [reduce using rule 91 (statements)]
    FOR                  [reduce using rule 91 (statements)]
    DO                   [reduce using rule 91 (statements)]
    SWITCH               [reduce using rule 91 (statements)]
    RETURN               [reduce using rule 91 (statements)]
    BREAK                reduce using rule 91 (statements)
    CONTINUE             reduce using rule 91 (statements)
    ENUM                 [reduce using rule 91 (statements)]
    LEFT_PAREN           [reduce using rule 91 (statements)]
    RIGHT_CURLY_BRACKET  reduce using rule 91 (statements)
    INC_OP               [reduce using rule 91 (statements)]
    DEC_OP               [reduce using rule 91 (statements)]
    NOT_OP               [reduce using rule 91 (statements)]
    $default             reduce using rule 12 (beforedecl)

    beforedecl            go to state 5
    declaration           go to state 102
    declarations          go to state 103
    tail                  go to state 220
    assign                go to state 37
    expression            go to state 104
    simpleExp             go to state 39
    andExp                go to state 40
    bitRelExp             go to state 41
    relExp                go to state 42
    bitshiftExp           go to state 43
    sumExp                go to state 44
    mulExp                go to state 45
    unaryExp              go to state 46
    value                 go to state 47
    if_statement          go to state 105
    while_statement       go to state 106
    for_statement         go to state 107
    do_statement          go to state 108
    switch_statement      go to state 109
    return_statement      go to state 110
    expression_statement  go to state 111
    statements            go to state 174
    statement             go to state 113
    enum_statement        go to state 114
    func_call             go to state 115


State 218

   84 case: CASE expression COLON statements BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 221


State 219

   83 default: DEFAULT COLON statements BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 222


State 220

   71 else_if: else_if ELIF LEFT_PAREN bool_expression RIGHT_PAREN tail .

    $default  reduce using rule 71 (else_if)


State 221

   84 case: CASE expression COLON statements BREAK SEMICOLON .

    $default  reduce using rule 84 (case)


State 222

   83 default: DEFAULT COLON statements BREAK SEMICOLON .

    $default  reduce using rule 83 (default)
